%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[doesWhat doclatex
C subset, modelled after C--
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Cmm
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs module {%{EH}Cmm} import({%{EH}Base.Common} hiding (Range), {%{EH}Base.HsName.Builtin})
%%]

%%[(8 codegen cmm) hs import(UHC.Util.Utils)
%%]

%%[(8 codegen cmm) hs import(qualified Data.Map as Map, Data.Maybe, qualified UHC.Util.FastSeq as Seq)
%%]
%%[(8 codegen cmm) hs import(qualified {%{EH}Config} as Cfg)
%%]
%%[(8 codegen cmm) hs import({%{EH}CodeGen.Const}(ConstSt, emptyConstSt)) export(ConstSt)
%%]
%%[(8 codegen cmm) hs import({%{EH}Gam.DataGam})
%%]

%%[(8 codegen cmm) hs export(AGItf(..))
%%]
%%[(8 codegen cmm) hs export(Module(..), TopLevel(..), TopLevelL, Section(..), SectionL, Decl(..), DeclL, Target(..), TargetL, Import(..), ImportL, Export(..), ExportL)
%%]
%%[(8 codegen cmm) hs export(Datum(..), DatumL, Init(..), MbInit)
%%]
%%[(8 codegen cmm) hs export(Regs(..), RegNmInit(..), RegNmInitL)
%%]
%%[(8 codegen cmm) hs export(BodyDecl(..), BodyDeclL, Body(..), MbBody, Proc(..), Conv(..), MbConv, Formal(..), FormalL, Actual(..), ActualL, Stmt(..))
%%]
%%[(8 codegen cmm) hs export(RetCont(..), MbRetCont, KindName(..), KindNameL, Arm(..), ArmL, Range(..), RangeL, LValue(..), LValueL)
%%]
%%[(8 codegen cmm) hs export(Flow(..), FlowL, Also(..), AlsoL, Alias(..), FlowAlias(..), FlowAliasL, Targets(..), FldExpr(..), FldExprL, CallExpr(..), Expr(..), ExprL, MbExpr, Ty(..), MbTy, Bits(..), GC(..), MbGC)
%%]
%%[(8 codegen cmm) hs export(String16(..), Assert(..), MbAssert, Op(..), OpCode(..), Round(..), Lit(..), Tag(..))
%%]
%%[(8 codegen cmm) hs export(StructFld(..), StructFldL)
%%]

%%[(50 codegen cmm) hs import(Control.Monad, UHC.Util.Serialize, UHC.Util.Control.Monad(liftM6))
%%]
%%[(50 codegen cmm) hs import(Data.Typeable(Typeable), Data.Generics(Data))
%%]

%%[(8 codegen cmm) hs import({%{EH}Foreign.Boxing}) export(module {%{EH}Foreign.Boxing})
%%]

%%[(8 codegen cmm) hs import({%{EH}CodeGen.RefGenerator}, {%{EH}CodeGen.CVar})
%%]
%%[(8888 codegen cmm) hs import({%{EH}CodeGen.ValAccess} as VA (Fld(..)))
%%]

%%[(8 codegen cmm) ag import({Cmm/AbsSyn})
%%]

%%[(8888 codegen cmm) ag
DERIVING *
  : Show
%%[[50
  , Typeable, Data
%%]]

DERIVING *
  : Eq, Ord
%%]

%%[(8 codegen cmm) ag
DERIVING AllTy Tag
  : Eq, Ord
%%]

-- debug only
%%[(8888 codegen cmm) hs import({%{EH}Base.Debug},UHC.Util.Pretty)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional types
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(Nm,NmL)
-- | Name
type Nm = HsName
type NmL = [Nm]
%%]

%%[(8 codegen cmm) hs export(ConstKind(..))
-- | Kind of const decls
data ConstKind
  = Const_CompileTime		-- ^ constant at compile time, ie also in the bound expr
  | Const_SSA				-- ^ constant after init, not necessarily also in the bound expr
  deriving Eq

instance Show ConstKind where
  show Const_CompileTime 	= "const"
  show Const_SSA			= "ssa"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% CVar instantiation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(CVarInfo, CVarMp)
type CVarInfo = CVarInfo' Tag Ty Fld Nm Int
type CVarMp   = CVarMp'   Tag Ty Fld Nm Int
%%]

%%[(8 codegen cmm) hs export(cvarToHsName)
cvarToHsName :: CVarInfo -> HsName
cvarToHsName 
  = cvarToDef
      ( \r -> mkHNm $ "cvarToDefHsName.mkErrorRef: " ++ show r
      , \_ -> mkHNm
      , \_ -> mkHNm
      , \_ -> hsnSetQual
      , \_ -> maybe id hsnSetQual
      , \_ d _ f -> hsnSetQual d f -- mkHNm "cvarToHsName.mkDataFld"
      , \_ _ -> mkHNm "cvarToHsName.mkDataTag"
      , \_ _ -> mkHNm "cvarToHsName.mkTupFld"
      , \_ -> mkHNm "cvarToHsName.mkOffset"
      , \_ _ -> panic "cvarToHsName.mkTag"
      , \_ _ r -> r
      ) emptyCVarNmModuleCfg Map.empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Cmm types (only temporary place holders)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(tyNd, tyFn, tyStr8, tyInt, tyNone)
mkTy :: String -> Ty
mkTy = Ty_Nm . mkHNm

tyNd :: Ty
tyNd = mkTy "Nd"

tyNone :: Ty
tyNone = Ty_None

tyFn :: Ty
tyFn = mkTy "Fn"

tyStr8 :: Ty
tyStr8 = mkTy "Str8"

tyInt :: Ty
tyInt = Ty_Bits Bits_Word
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constructing: CVar
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(cvargext,cvarloc, cvararg', cvararg)
-- | basic construction: global external reference
cvargext :: Ty -> Nm -> CVarInfo
cvargext ty nm = CVar_GlobalExtern ty (fromMaybe hsnEmpty $ hsnQualifier nm) (hsnQualified nm)

-- | basic construction: local reference
cvarloc :: Ty -> Nm -> CVarInfo
cvarloc ty nm = cvarLoc ty (mkFldNm nm)

-- | basic construction: arg reference
cvararg' :: Ty -> Fld -> CVarInfo
cvararg' ty nm = cvarArg ty nm
{-# INLINE cvararg' #-}

-- | basic construction: arg reference
cvararg :: Ty -> Nm -> CVarInfo
cvararg ty nm = cvararg' ty (mkFldNm nm)

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constructing: misc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(cmt)
-- | Comment
cmt :: String -> Decl
cmt = Decl_Comment
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tag info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs
instance TagLike Tag where
  tagIsTup  		t	= case t of {Tag_Tup     -> True  ; _ -> False}
  tagMbDataInfo		t 	= case t of {Tag_Con _ i -> Just i; _ -> Nothing}
  tagDataTag 		t	= case t of {Tag_Con t _ -> t}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constructing: module, toplevel
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(imp,impcvars)
-- | Import
imp :: Maybe Nm -> AssocL Nm Ty -> Decl
imp mod ns = Decl_Import mod [ Import_Imp (Just t) Nothing n | (n,t) <- ns ]

-- | Import external CVar_GlobalExtern, rest is ignored
impcvars :: [CVarInfo] -> TopLevelL
impcvars ns
  = [ TopLevel_Decl $ imp (Just mod) [(cvarFldNm i, cvarType i) | i <- is] | (is@(CVar_GlobalExtern {cvarModNm=mod} :_)) <- exts ]
  where exts = groupOn cvarModNm $ filter cvarIsGlobExt ns
%%]

%%[(8 codegen cmm) hs export(arr)
-- | Array decl
arr :: Ty -> Nm -> ExprL -> Decl
arr t n es = Decl_ConstArray (Just t) n es
%%]

%%[(8 codegen cmm) hs export(top,topDecl,topProc)
-- | lift to top level
top :: (x -> TopLevel) -> [x] -> TopLevelL
top lift xs = map lift xs

-- | lift decls to top level
topDecl :: DeclL -> TopLevelL
topDecl = top TopLevel_Decl

-- | lift procedures to top level
topProc :: [Proc] -> TopLevelL
topProc = top TopLevel_Proc
%%]

%%[(8 codegen cmm) hs export(emptyModule)
emptyModule :: Module
emptyModule = Module_Mod hsnUnknown [] Nothing emptyConstSt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constructing: stmt
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(declLocalStackVar, declLocalRegVar, declLocalConst)
-- | Declare & assign stack variable
declLocalStackVar :: Ty -> Nm -> Maybe Expr -> Seq.Seq BodyDecl
declLocalStackVar t nm me = Seq.fromList [BodyDecl_StackDecl [Datum_Nm nm, Datum_Ty t Nothing (fmap (\e -> Init_Seq [e]) me)]]

-- | Declare & assign (register) variable
declLocalRegVar :: Ty -> CVarInfo -> Maybe Expr -> Seq.Seq BodyDecl
declLocalRegVar t nm me
  = Seq.fromList [BodyDecl_Decl $ Decl_Regs False $ Regs_Regs Nothing t [RegNmInit_NmInit nm Nothing]]
    `Seq.union` maybe Seq.empty (\e -> assign nm e) me

-- | Locally declare & assign constant (or variation)
declLocalConst :: ConstKind -> Ty -> CVarInfo -> Expr -> Seq.Seq BodyDecl
declLocalConst k t nm e = Seq.fromList $
     [BodyDecl_Decl $ Decl_Const k (Just t) nm e]
%%]

%%[(8 codegen cmm) hs export(declGlobalConst)
-- | Globally declare & assign constant (or variation)
declGlobalConst :: ConstKind -> Ty -> CVarInfo -> Expr -> Seq.Seq TopLevel
declGlobalConst k t nm e = Seq.fromList $
     [TopLevel_Decl $ Decl_Const k (Just t) nm e]
%%]

%%[(8 codegen cmm) hs export(call, ret)
-- | Call (& assign)
call :: Maybe Conv -> Maybe Nm -> CallExpr -> [Expr] -> Seq.Seq BodyDecl
call mbconv mbnm f as = Seq.fromList [BodyDecl_Stmt $ Stmt_Call (maybe [] (\n -> [KindName_KindName Nothing n]) mbnm) mbconv f [Actual_Actual Nothing a | a <- as] (Targets_Targets []) []]

-- | Return
ret :: Maybe Expr -> Seq.Seq BodyDecl
ret me = Seq.fromList [BodyDecl_Stmt $ Stmt_Ret Nothing Nothing $ maybe [] (\e -> [Actual_Actual Nothing e]) me]
%%]

%%[(8 codegen cmm) hs export(assign)
-- | Assign
assign :: CVarInfo -> Expr -> Seq.Seq BodyDecl
assign cvi e = Seq.fromList [BodyDecl_Stmt $ Stmt_Assign [LValue_Nm cvi] [e]]

-- | Assign
assign' :: Nm -> Expr -> Seq.Seq BodyDecl
assign' n e = assign (cvarLoc tyNd $ mkFldNm n) e
%%]

%%[(8 codegen cmm) hs export(switch)
switch :: Expr -> [Arm] -> Seq.Seq BodyDecl
switch e as = Seq.fromList [BodyDecl_Stmt $ Stmt_Switch e as]
%%]

%%[(8 codegen cmm) hs export(alloc, box, unbox)
-- | Alloc
alloc :: DataGam -> CVarInfo -> Tag -> [Expr] -> Seq.Seq BodyDecl
alloc dataGam nm tag as = Seq.fromList [BodyDecl_Stmt $ Stmt_Alloc nm tag (zip (flds ++ (assocLElts $ refGen (length flds) 1 hsnLclSupply)) as)]
  where flds  = maybe [] (\(_,dti) -> dtiFldRefL dti) $ dataGamTagLookup tag dataGam

-- | Boxing
box :: CVarInfo -> Boxing -> Expr -> Seq.Seq BodyDecl
box nm bx e = Seq.fromList [BodyDecl_Stmt $ Stmt_Box nm bx e]

-- | UnBoxing
unbox :: CVarInfo -> Boxing -> Expr -> Seq.Seq BodyDecl
unbox nm bx e = Seq.fromList [BodyDecl_Stmt $ Stmt_UnBox nm bx e]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constructing: expr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(var, ffivar)
-- | Var ref
var :: Nm -> Expr
var = Expr_Nm
{-# INLINE var #-}

-- | Foreign var ref
ffivar :: String -> Expr
ffivar = Expr_NmForeign
{-# INLINE ffivar #-}
%%]

%%[(8 codegen cmm) hs export(cvar)
-- | Var ref
cvar :: CVarInfo -> Expr
cvar = Expr_CVar
{-# INLINE cvar #-}
%%]

%%[(8 codegen cmm) hs export(undef)
-- | Undefined
undef :: Expr
undef = var hsnUnknown
{-# INLINE undef #-}
%%]

%%[(8 codegen cmm) hs export(str8)
-- | String literal
str8 :: String -> Expr
str8 = flip Expr_Str (Just tyStr8)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constructing: debug aids
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(err)
-- | Error
err ::String -> Expr
err = Expr_Err
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Configuration for semantics, info about the target machinery
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(CmmCfg(..))
data TargetTyInfo
  = TargetTyInfo
      { targtyinfoNm			:: !Nm												-- name of the type in the target language
      , targtyinfoNrBits		:: !Int												-- nr of bits
      , targtyinfoTy			:: !Ty												-- the basic bits ty
      }

data CmmCfg
  = CmmCfg
      { cmmcfgWordInfo			:: !TargetTyInfo								-- info about word
      , cmmcfgPtrInfo			:: !TargetTyInfo								--            pointer
      , cmmcfgUnitInfo			:: !TargetTyInfo								--            smallest addressable unit, usually a byte
      , cmmcfgAvailSizeMp		:: !(Map.Map Int TargetTyInfo)					-- info about available (bit)sizes
      }
%%]

%%[(8 codegen cmm) hs export(defaultCmmCfg)
-- | default cfg is based on global config, all temporary hackish
defaultCmmCfg :: CmmCfg
defaultCmmCfg
  = CmmCfg
      { cmmcfgWordInfo = winfo
      , cmmcfgPtrInfo = winfo
      , cmmcfgUnitInfo = mki "Word8" (Cfg.sizeofWordInBits `div` Cfg.sizeofWord)
      , cmmcfgAvailSizeMp = Map.fromList [ (s, mki ("Word" ++ show s) s) | s <- [8, 16, 32, 64] ]
      }
  where mki n sz = TargetTyInfo (mkHNm n) sz (Ty_Bits $ Bits_Size sz)
        winfo = mki "Word" Cfg.sizeofWordInBits
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Environment for semantics, e.g. holding mappings for type names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(CmmEnv(..))
data CmmEnv
  = CmmEnv
      { cmmenvCfg				:: CmmCfg										-- the target machine config
      }
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm) hs export(ty2TargetTy)
-- | Get the type in terms of the target, corresponding to ty.
--   Assumption: cfg covers required size
ty2TargetTy :: CmmEnv -> Ty -> Ty
ty2TargetTy env ty
  = t ty
  where b m bs@(Bits_Size sz) | sz <= targtyinfoNrBits minfo = Ty_Nm (targtyinfoNm minfo)
                              | otherwise                    = b m' bs
          where mbMin = Map.minViewWithKey m
                ((msz,minfo),m') = panicJust "ty2TargetTy" mbMin
        b _ (Bits_Ptr _) = Ty_Nm (targtyinfoNm $ cmmcfgPtrInfo  cfg)
        b _ (Bits_Word ) = Ty_Nm (targtyinfoNm $ cmmcfgWordInfo cfg)
        
        t (Ty_Bits bits) = b (cmmcfgAvailSizeMp cfg) bits
        t (Ty_Struct flds) = Ty_Struct [ (StructFld_Fld n (t fty)) | (StructFld_Fld n fty) <- flds ]
        t ty             = ty

        cfg = cmmenvCfg env
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Instances: Binary, Serialize
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(5050 codegen cmm) hs
%%]
