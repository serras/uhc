%%[doesWhat doclatex

Transforms a Grin program to a Silly program.

%%]


%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[(8 codegen grin wholeprogAnal wholeprogC) hs module {%{EH}GrinCode.ToSilly} export(grin2silly)
%%]

%%[(8 codegen grin wholeprogAnal wholeprogC) ag import({GrinCode/AbsSyn},{GrinCode/CommonForGen})
%%]

%%[(8 codegen grin wholeprogAnal wholeprogC) hs import(Debug.Trace)
%%]
%%[(8 codegen grin wholeprogAnal wholeprogC) hs import(Data.List((\\)), Data.Maybe, qualified Data.Map as Map, qualified Data.Set as Set, Data.Bits)
%%]
%%[(8 codegen grin wholeprogAnal wholeprogC) hs import(UHC.Util.Pretty, UHC.Util.Utils)
%%]
%%[(8 codegen grin wholeprogAnal wholeprogC) hs import( {%{EH}Base.HsName.Builtin}, {%{EH}Base.Common}, {%{EH}Opts}, {%{EH}GrinCode})
%%]
%%[(8 codegen grin wholeprogAnal wholeprogC) hs import({%{EH}GrinCode.Common} hiding (Variable(..)), {%{EH}Config}, {%{EH}Silly})
%%]

%%[(8 codegen grin wholeprogAnal wholeprogC) hs import({%{EH}Foreign.Extract})
%%]

%%[(8 codegen grin wholeprogAnal wholeprogC)
WRAPPER GrAGItf
%%]

%%[(8 codegen grin wholeprogAnal wholeprogC) hs
grin2silly :: HptMap -> GrModule -> EHCOpts -> SilModule
grin2silly hptmap gr opts
 = let t = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf gr))
                        (Inh_GrAGItf { opts_Inh_GrAGItf = opts
                                     , hptMap_Inh_GrAGItf = hptmap
                                     }
                        )
   in silModule_Syn_GrAGItf t 
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Code generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[(8 codegen grin wholeprogAnal wholeprogC)

ATTR GrAGItf GrModule GrGlobalL GrGlobal GrBindL GrBind GrExpr GrAlt GrAltL [ hptMap : {HptMap} | | ]

ATTR GrAGItf GrModule   [ | | silModule                  : {SilModule}    ]
ATTR GrBindL GrBind     [ | | functions    USE {++} {[]} : {Functions}    ]
ATTR GrExpr             [ | | stats        USE {++} {[]} : {Statements}   ]
ATTR GrAltL             [ | | alternatives               : {Alternatives}
                              reenteralts                : {Alternatives} ]
ATTR GrAlt              [ | | alternative                : {Alternative}  
                              isReenter                  : {Bool}         ]
ATTR GrVal 
     GrPatAlt 
     GrTag              [ | | value                      : {Value}        ]
ATTR GrPatAlt GrTag     [ | | constant                   : {Constant}     ]
ATTR GrValL GrVal       [ | | values                     : {Values}       ]
ATTR GrValL GrVal GrTag [ | | isHole                     : {Bool}         ]
ATTR GrGlobal GrGlobalL [ | | initStats1   USE {++} {[]} : {Statements}
                              initStats2   USE {++} {[]} : {Statements}
                              names        USE {++} {[]} : {[HsName]}     ]

ATTR GrExpr GrAlt GrAltL [ numberParameters : {Int}
                         |
                         | localsSet USE {`Set.union`} {Set.empty}: {Set.Set HsName}
                         ]

%%]

%%[(8 codegen grin wholeprogAnal wholeprogC)

ATTR GrExpr GrVal [ | | hasEmptyBody : {Bool} ]

SEM GrExpr
  | Unit    lhs.hasEmptyBody = @val.hasEmptyBody
  | *-Unit  lhs.hasEmptyBody = False

SEM GrVal
  | Empty   lhs.hasEmptyBody = True
  | *-Empty lhs.hasEmptyBody = False


ATTR GrVal [ | | valueName : HsName ]
ATTR AllAlt [ scrutineeName : HsName | | ]

SEM GrExpr
  | Case    altL . scrutineeName = @val.valueName


ATTR AllGrExpr [ hasNext: {Bool} | | ]

SEM GrBind
  | Bind     expr . hasNext = False

SEM GrExpr
  | Seq      expr . hasNext = True
             body . hasNext = @lhs.hasNext

SEM GrAlt
  | Alt      ( lhs  . isReenter
             , expr . hasNext
             , expr . targets    ) = case @ann of
                                      GrAltAnnReenter -> (True,  True        , [ @lhs.scrutineeName ] )
                                      _               -> (False, @lhs.hasNext, @lhs.targets           )


ATTR AllGrExpr         [ functionName : HsName         | | ]

SEM GrBind
  | Bind    expr.functionName = @nm


SEM GrModule
  | Mod lhs.silModule    =   SilModule_SilModule
                                (tagConstants @lhs.opts @lhs.hptMap @tagsMp @bindL.genArities (@bindL.genAllTags `Set.union` @globalL.genAllTags)) -- constants
                                @globalL.names                               -- variables
                                ( @loc.startFunction : @loc.initFunction : @bindL.functions )     -- functions

        loc . startFunction =  Function_Function (hsnFromString "silly_start") [] []
                                                    [ Statement_Call (hsnFromString "initialize")        False []
                                                    , Statement_Call mainNr  False []
                                                    , Statement_Return []
                                                    ]

        loc . initFunction  =  Function_Function (hsnFromString "initialize") [] []
                                                    (  @globalL.initStats1
                                                    ++ @globalL.initStats2
                                                    ++ [ Statement_Return [] ]
                                                    )


SEM GrBind
  | Bind   lhs.functions =  if False && @expr.hasEmptyBody
                            then []
                            else   [ Function_Function
                                   -- name
                                   @nm
                                   -- parameters
                                   @argNmL
                                   -- locals
                                   @loc.locals
                                   -- body
                                   @expr.stats
                                 ]

          expr . numberParameters = length @argNmL
          loc  . locals  = map (\nm -> (nm, getSilTp @lhs.hptMap nm))
                               ( filter (\(HsName_Nr{-use: hsnMbNr-} n _)->n/=0) (Set.toList @expr.localsSet) )

SEM GrExpr
 | Seq     lhs.stats  = @expr.stats
                        ++ @body.stats

 | UpdateUnit
           loc.name   = mkVar @nm
           lhs.stats   = if not @lhs.hasNext
                          then assignments "Update" (map (arrayVariab @loc.name) [0..]) [] @val.values
                               ++ [ Statement_Comment ["Return (Unit after Update)"]
                                  , Statement_Return @val.values
                                  ]
                          else maybe (assignments "UpdateUnit" (map (arrayVariab @loc.name) [0..]) (map mkVar @lhs.targets) @val.values)
                                     (\t -> Statement_Comment ["Updateunit to PtrNode"] : store2 (mkVar t) (length @val.values) (length @val.values) (map (arrayVariab @loc.name) [0..]) @val.values)
                                     @lhs.mbPtrTarget

 | Unit    lhs.stats  = if not @lhs.hasNext
                         then  [ Statement_Comment ["Return (Unit)"]
                               , Statement_Return @val.values
                               ]
                         else maybe  (assignments "Unit" [] (map mkVar @lhs.targets) @val.values)
                                     (\t -> Statement_Comment ["Unit to PtrNode"] : store (mkVar t) (length @val.values) (length @val.values) @val.values)
                                     @lhs.mbPtrTarget
           lhs.localsSet = Set.fromList @lhs.targets

 | FFI     lhs.stats  = if not @lhs.hasNext
                         then  [ Statement_Comment ["Return (FFI)"]
                               , Statement_Return [@loc.callres]
                               ]
                         else case @lhs.targets
                              of  [ HsName_Nr{-use: hsnMbNr-} 0 _ ] -> [Statement_Comment ["FFI void"], Statement_Voiden  @loc.callres]
                                  _             -> assignments "FFI" [] (map mkVar @lhs.targets) [@loc.callres]
           lhs.localsSet = Set.fromList @lhs.targets
           loc.callres   = Value_Call @impEntNm @argL.values   -- TODO: check that argL contains Var's or singleton Node's only


 | Store   lhs.stats  = let ph = case @lhs.targets of
                                   [] -> error ("ToSilly: Store has no target in " ++ show @lhs.functionName)
                                   (x:_) -> x
                            vs = @val.values
                            n  = length vs
                            absval = absFetch @lhs.hptMap ph
                            -- n2 = 1+ maximum0 (map (length . snd) (filter (isFinalTag . fst) (getNodes (absFetch @lhs.hptMap ph))))  -- wrong, because H-tags can be overwritten with non-final tags
                            n2 = 1 +  maximum0 (map (length . snd) (getNodes absval))
                            vs2 = if  @val.isHole
                                  then vs ++ [Value_Con (Constant_LiteralInt (max 2 n2))]
                                  else vs
                        in Statement_Comment ["Store"]
                           : store (mkVar ph) n n2 vs2

           lhs.localsSet = Set.fromList @lhs.targets

 | FetchUpdate 
           lhs.stats  = let -- use hptMap to determine size, because hptMap can now be used even after changing numbered variables back to names
                            n = 1+ maximum0 (map (length . snd) (getNodes (absFetch @lhs.hptMap @src)))
                         in Statement_Comment ["FetchUpdate"]
                            : zipWith Statement_Assignment
                                     (map (arrayVariab (mkVar @dst)) [0..n-1])
                                     (map (arrayValue  (mkVar @src)) [0..n-1])

 | FetchNode
           lhs.stats  = error "FetchNode found while generating Silly"
           lhs.localsSet= error "FetchNode found while generating Silly"
           
 | FetchField
           lhs.stats  = let ph = case @lhs.targets of
                                   [] -> error ("ToSilly: FetchField has no target in " ++ show @lhs.functionName)
                                   (x:_) -> x
                        in    
                        [ Statement_Comment ["Fetch"]
                        , Statement_Assignment (mkVar ph)
                                               (arrayValue (mkVar @nm) @offset)
                        ]
           lhs.localsSet = Set.fromList @lhs.targets

 | Case    lhs.stats  = let comm     = Statement_Comment ["Case"]
                            reenters = if  null @altL.reenteralts
                                       then []
                                       else [ ifstat ]
                            condition   = Value_CompareGT @val.value (Constant_Alias "UNBOXED")    -- assumes that Unboxed tag is the highest-numbered Final tag
                            ifstat      = Statement_IfThenElse condition switch1 []
                            switch1     = switchStatement (ehcOptGenCaseDefault @lhs.opts) @val.value @altL.reenteralts
                            switch2     = switchStatement (ehcOptGenCaseDefault @lhs.opts) @val.value @altL.alternatives
                        in  if   null @altL.alternatives
                            then assignments "Empty Case" [] (map mkVar @lhs.targets) (replicate (length @lhs.targets)(Value_Con (Constant_LiteralInt 0)))
                            else comm : reenters ++ switch2
                        
           lhs.localsSet = Set.union (Set.fromList @lhs.targets) @altL.localsSet

 | Call    lhs.stats  = if    @nm==evaluateNr && isJust @lhs.mbPtrTarget
                        then  [ Statement_Comment ["Evaluate to ptrNode"]
                              , Statement_Assignment (Variable_Unembedded (fromJust2 "no target" @lhs.mbPtrTarget)) (head @argL.values)
                              ]
                        else  (   Statement_Call @nm (not @lhs.hasNext) @argL.values
                                  :  assignments "Result" 
                                                 []
                                                 (map mkVar @lhs.targets) 
                                                 ( let n = length @lhs.targets     -- n is 0 for tailcalls, so no assignments in that case
                                                   in  map (arrayValue Variable_RP) [0..n-1]
                                                 )
                              )
           lhs.localsSet = Set.fromList @lhs.targets

 | App     lhs.stats  = [Statement_Comment ["App: SHOULDNT"]]
 | Eval    lhs.stats  = [Statement_Comment ["Eval: SHOULDNT"]]
 | Throw   lhs.stats  = [Statement_Comment ["Throw: TODO"]]
 | Catch   lhs.stats  = [Statement_Comment ["Catch: TODO"]]


SEM GrAltL
  | Nil    (lhs.reenteralts, lhs.alternatives) = ([], [])
  | Cons   (lhs.reenteralts, lhs.alternatives) = if   @hd.isReenter
                                                 then (@hd.alternative : @tl.reenteralts,                   @tl.alternatives)
                                                 else (                  @tl.reenteralts, @hd.alternative : @tl.alternatives)

SEM GrAlt
 | Alt     lhs.alternative = Alternative_Alternative @pat.constant
                                                     @expr.stats

SEM GrGlobal
 | Global  loc.globNm      = @nm
 		   lhs.names       = [@globNm]
           lhs.initStats1  = let vs = @val.values
                                 n  = length vs
                                 n2 = 1+ maximum0 (map (length . snd) (filter (isFinalTag . fst) (getNodes (absFetch @lhs.hptMap @globNm))))
                             in  [ storeAlloc NotManaged (Variable_Global @globNm) n n2 vs ]
           lhs.initStats2  = storePopulate (Variable_Global @globNm) @val.values

SEM GrVal
 | LitInt  lhs.value  = Value_Con (Constant_LiteralInt @int)
 | LitStr  lhs.value  = Value_Con (Constant_LiteralStr @str)
 | Var
   EnumNode loc.value = Value_Var (mkVar @nm)
           lhs.value  = @loc.value
           lhs.values = [@loc.value]
 | Tag     lhs.value  = @tag.value
 | Node    lhs.values = @tag.value : @fldL.values
 | VarNode lhs.values =              @fldL.values
 | Node    lhs.value  = if null @fldL.values
                        then @tag.value
                        else error ("cannot generate value code for non-singleton Node " ++ show @tag.value ++ show @fldL.values)
 | VarNode lhs.value  = let vs = @fldL.values
                        in  if length vs==1
                            then head vs
                            else error ("cannot generate value code for non-singleton VarNode " ++ show vs)
                            
 | BasicNode  lhs.values = [@tag.value, Value_Var (mkVar @nm)]
 | OpaqueNode lhs.values = [Value_Con (Constant_Alias "UNBOXED"), Value_Var (mkVar @nm)]
-- | EnumNode   lhs.values = [Value_Var (mkVar @nm)]
 | Tag        lhs.values = [@tag.value]

-- | PtrNode    lhs.values = [Value_Var (mkVar @nm)]    -- TODO: this treats a ptr as an enum, which is not right
 | PtrNode    lhs.values = []    -- TODO: do something useful with a pointernode. It is now discarded, because it can only occur after returning from error, which won't happen
 
 -- | PtrNode    lhs.values = error "ToSilly: PtrNode values"
 | Empty      lhs.values = take 10 (repeat (Value_Con (Constant_LiteralInt 0))) -- error "ToSilly: Empty values"
 | LitInt     lhs.values = error ("ToSilly: LitInt values" ++ show @int)
 | LitStr     lhs.values = error ("ToSilly: LitStr values" ++ show @str)
 -- | Tag        lhs.values = error ("ToSilly: Tag values" ++ show @tag.value)
 
 | BasicNode  lhs.value  = error "ToSilly: BasicNode value"
-- | EnumNode   lhs.value  = error "ToSilly: EnumNode value"
 | OpaqueNode lhs.value  = error "ToSilly: OpaqueNode value"
 | PtrNode    lhs.value  = error "ToSilly: PtrNode value"
-- | Empty      lhs.value  = error "ToSilly: Empty value"
 | Empty      lhs.value  = Value_Label []
%%[[10
 | NodeAdapt  lhs.value  = error "ToSilly: NodeAdapt value"
              lhs.values = error "ToSilly: NodeAdapt values"
%%]]

 | Var        lhs.valueName = @nm
 | *-Var      lhs.valueName = error "ToSilly: valueName taken of non-Var"          

SEM GrValL
 | Nil    lhs.values = []
 | Cons   lhs.values = @hd.value : @tl.values

SEM GrTag
 | Con     loc.constant = Constant_Alias ("C" ++ hsnShowAlphanumericShort @nm)
 | Fun     loc.constant = Constant_Alias ("F" ++ hsnShowAlphanumericShort @nm)
 | App     loc.constant = Constant_Alias ("A" ++ hsnShowAlphanumeric @nm)
 | PApp    loc.constant = Constant_Alias ("P" ++ show @needs ++ "_" ++ hsnShowAlphanumericShort @nm)
 | Hole    loc.constant = Constant_Alias ("HOLE")
 | Con Fun App PApp Hole
           lhs.constant = @loc.constant
           lhs.value    = Value_Con (@loc.constant)

 | Unboxed lhs.value    = Value_Con (Constant_Alias "UNBOXED")
 | Unboxed lhs.constant = Constant_Alias "UNBOXED"

 | * - Con Fun App PApp Hole Unboxed
           lhs.constant = error "GrTag:other constant"
           lhs.value    = error "GrTag:other value"

SEM GrPatAlt
 | Tag     lhs.value    = @tag.value
           lhs.constant = @tag.constant
 | * - Tag lhs.value    = error "GrPatAlt:other value"
           lhs.constant = error "GrPatAlt:other constant"
-- TODO: | LitInt = ...


SEM GrTag
  | Hole        lhs.isHole  = True
  | *-Hole      lhs.isHole  = False
  
SEM GrVal
  | Tag Node    lhs.isHole  = @tag.isHole
  | *-Tag Node  lhs.isHole  = False
 
SEM GrValL
  | Nil         lhs.isHole  = False
  | Cons        lhs.isHole  = @hd.isHole


%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Determining the target
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[(8 codegen grin wholeprogAnal wholeprogC)

ATTR AllGrExpr [ targets : {[HsName]} mbPtrTarget: {Maybe HsName} | | ]
ATTR GrPatLam GrVarL [ | |  patternNames: {[HsName]}  ]
ATTR GrPatLam        [ | |  mbPtrName: {Maybe HsName} ]
ATTR GrVar [ | |  patternName: {HsName} ]

SEM GrBind
  | Bind     expr . targets = []
             expr . mbPtrTarget = Nothing

SEM GrExpr
  | Seq      expr . targets = @pat.patternNames
             body . targets = @lhs.targets
             
             expr . mbPtrTarget = @pat.mbPtrName
             body . mbPtrTarget = @lhs.mbPtrTarget
             

SEM GrPatLam
  | Empty       lhs  .  patternNames = []
  | Var         lhs  .  patternNames = [@nm]
  | VarNode     lhs  .  patternNames = @fldL.patternNames
  | BasicNode   lhs  .  patternNames = [wildcardNr, @nm]
  | EnumNode    lhs  .  patternNames = [@nm]
  | OpaqueNode  lhs  .  patternNames = [wildcardNr, @nm]
  | PtrNode     lhs  .  patternNames = [@nm]
  
  | BasicAnnot  lhs  .  patternNames = [@nm]
  | EnumAnnot   lhs  .  patternNames = [@nm]
  | OpaqueAnnot lhs  .  patternNames = [@nm]
  | PtrAnnot    lhs  .  patternNames = [@nm]
  
SEM GrPatLam
  | PtrNode     lhs  .  mbPtrName    = Just @nm
  | * - PtrNode lhs  .  mbPtrName    = Nothing
  

SEM GrVarL
  | Nil   lhs.patternNames = []
  | Cons  lhs.patternNames = @hd.patternName : @tl.patternNames
  
SEM GrVar
  | Var      lhs.patternName = @nm
  | KnownTag lhs.patternName = wildcardNr
  | Ignore   lhs.patternName = wildcardNr

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Options to adapt the structure of the generated code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[(8 codegen grin wholeprogAnal wholeprogC)


ATTR GrAGItf
  [ opts : {EHCOpts} | | ]

ATTR GrModule GrBind GrBindL GrExpr GrAlt GrAltL
  [ opts   : {EHCOpts}  | | ]

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Collect all tags
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[(8 codegen grin wholeprogAnal wholeprogC)

ATTR AllDef AllExpr [ | | genAllTags USE {`Set.union`} {Set.empty} : {Set.Set GrTag} ]

ATTR GrTag [ | | self : SELF ]

SEM GrTag
  | *     lhs.genAllTags = Set.singleton @loc.self

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Collect tag arities
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[(8 codegen grin wholeprogAnal wholeprogC)

ATTR AllBind [ | | genArities USE {`Map.union`} {Map.empty}: {Map.Map Int Int}  ]

SEM GrBind
  | Bind   lhs.genArities = Map.singleton (getNr @nm) (length @argNmL)
  | Arity  lhs.genArities = Map.singleton (getNr @nm) @arity

%%]



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Auxiliary Haskell
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[(8 codegen grin wholeprogAnal wholeprogC) hs


assignments :: String -> [Variable] -> [Variable] -> [Value] -> [Statement]
assignments what vars1 vars2 values
  = Statement_Comment [what] 
    :
    [ if isRealVar v1
       then (if isRealVar v2
              then Statement_Assignment2 v2 v1 e
              else Statement_Assignment v1 e
            )
       else Statement_Assignment v2 e
    | (v1,v2,e) <-zip3 (vars1 ++ repeat Variable_None)
                       (vars2 ++ repeat Variable_None)
                       values
    , (isRealVar v1 || isRealVar v2) && isRealVal e
    ]



switchStatement :: Bool -> Value -> Alternatives -> Statements
switchStatement False scrut [Alternative_Alternative when body]
  = body
switchStatement gendef scrut alts
  = [ Statement_Switch scrut alts ]



isRealVal (Value_Label []) = False
isRealVal _                = True



isRealVar Variable_None = False
isRealVar (Variable_Unembedded (HsName_Nr{-use: hsnMbNr-} 0 _)) = False
isRealVar _             = True

maximum0 [] = 0
maximum0 xs = maximum xs

-- n1 is the number of parameters of the tag
-- n2 is the maximum number of parameters of all constructorfunctions
-- F-tags and A-tags may be overwritten later with a C-tag or a P-tag, which might have more parameters.
-- We anticipate here for the maximum number of parameters.
-- Also, the size should be at least 2, to allow for the forwarding pointer during garbage collection.

allocate :: Char -> SillyAllocManageType -> Int -> Int -> Value
allocate 'C' tp n1 _  = Value_Alloc (max 2      n1    ) tp emptyStackInfo
allocate _   tp n1 n2 = Value_Alloc (max 2 (max n1 n2)) tp emptyStackInfo
       
-- tagcat is "C" for constructors, "F" for function thunks, "P" for partialapp thunks, "U" for unboxed, etc.
tagcat :: [Value] -> Char
tagcat (Value_Con (Constant_Alias (c:_)):_) = c
tagcat _ = ' '

storeAlloc :: SillyAllocManageType -> Variable -> Int -> Int -> [Value] -> Statement
storeAlloc tp v n1 n2 vs
       =  Statement_Assignment v (allocate (tagcat vs) tp n1 n2)

storePopulate :: Variable -> [Value] -> Statements
storePopulate v vs
       =  zipWith Statement_Assignment
                  (map (arrayVariab v) [0..])
                  vs

store :: Variable -> Int -> Int -> [Value] -> Statements
store v n1 n2 vs
       =  storeAlloc GCManaged v n1 n2 vs : storePopulate v vs

storePopulate2 :: Variable -> [Variable] -> [Value] -> Statements
storePopulate2 v xs vs
       =  zipWith3 Statement_Assignment2
                   xs
                   (map (arrayVariab v) [0..])
                   vs

store2 :: Variable -> Int -> Int -> [Variable] -> [Value] -> Statements
store2 v n1 n2 xs vs
       =  storeAlloc GCManaged v n1 n2 vs : storePopulate2 v xs vs



mkVar :: HsName -> Variable
mkVar = Variable_Unembedded


arrayValue :: Variable -> Int -> Value
arrayValue a i = Value_Var (Variable_Subs a i)

arrayVariab :: Variable -> Int -> Variable
arrayVariab a i = Variable_Subs a i



neededTags :: EHCOpts -> [GrTag]
neededTags opts
  =  let ns = ehcOptBuiltinNames opts
     in [ GrTag_Hole
        , GrTag_Con (GrTagAnn 0 0) 0 $ mkConTagInfo (mkHNmBase ",0")
        , GrTag_Con (GrTagAnn 0 0) 0 $ mkConTagInfo (ehbnBoolFalse         ns)
        , GrTag_Con (GrTagAnn 0 0) 1 $ mkConTagInfo (ehbnBoolTrue          ns)
        , GrTag_Con (GrTagAnn 2 2) 0 $ mkConTagInfo (ehbnDataListAltCons   ns)
        , GrTag_Con (GrTagAnn 0 2) 1 $ mkConTagInfo (ehbnDataListAltNil    ns)
        , GrTag_Con (GrTagAnn 0 0) 0 $ mkConTagInfo (ehbnDataOrderingAltEQ ns)
        , GrTag_Con (GrTagAnn 0 0) 1 $ mkConTagInfo (ehbnDataOrderingAltGT ns)
        , GrTag_Con (GrTagAnn 0 0) 2 $ mkConTagInfo (ehbnDataOrderingAltLT ns)
        ]     
%%[[98
        ++
        [ GrTag_Con (GrTagAnn 0 0) 0 $ mkConTagInfo (hsnMkModf qual (mkHNmBase "AppendBinaryMode")    Map.empty)
        , GrTag_Con (GrTagAnn 0 0) 1 $ mkConTagInfo (hsnMkModf qual (mkHNmBase "AppendMode")          Map.empty)
        , GrTag_Con (GrTagAnn 0 0) 2 $ mkConTagInfo (hsnMkModf qual (mkHNmBase "ReadBinaryMode")      Map.empty)
        , GrTag_Con (GrTagAnn 0 0) 3 $ mkConTagInfo (hsnMkModf qual (mkHNmBase "ReadMode")            Map.empty)
        , GrTag_Con (GrTagAnn 0 0) 4 $ mkConTagInfo (hsnMkModf qual (mkHNmBase "ReadWriteBinaryMode") Map.empty)
        , GrTag_Con (GrTagAnn 0 0) 5 $ mkConTagInfo (hsnMkModf qual (mkHNmBase "ReadWriteMode")       Map.empty)
        , GrTag_Con (GrTagAnn 0 0) 6 $ mkConTagInfo (hsnMkModf qual (mkHNmBase "WriteBinaryMode")     Map.empty)
        , GrTag_Con (GrTagAnn 0 0) 7 $ mkConTagInfo (hsnMkModf qual (mkHNmBase "WriteMode")           Map.empty)
        ]
        where qual = ["UHC", "IOBase"]
%%]]
    

tagConstants :: EHCOpts -> HptMap -> Map.Map HsName [GrTag] -> Map.Map Int Int -> Set.Set GrTag -> [ConstantInfo]
tagConstants opts hptmap tagsmap aritymap tagset
 = let predef = neededTags opts
       inprog = Set.toAscList (Set.insert GrTag_Unboxed tagset)
   in  zipWith (makeTagInfo opts hptmap tagsmap aritymap) (predef ++ (inprog \\ predef)) [0..]


makeTagInfo :: EHCOpts -> HptMap -> Map.Map HsName [GrTag] -> Map.Map Int Int -> GrTag -> Int -> ConstantInfo
makeTagInfo opts hm tm am tag seqnr
  =    case tag of
         (GrTag_Con a i ti) -> let ar = gtannArity a
                               in  ConstantInfo ('C':hsnShowAlphanumericShort (tagDataConstrNm ti))
                                                seqnr
                                                (max 2 (1+ar))
                                                ar
                                                (ar>0 && hasPointerPayload opts tm (tagDataConstrNm ti))
         (GrTag_PApp n nm)  -> let ar = (fromJust2 ("no arity for PApp " ++ show tag) (Map.lookup (getNr nm) am)) - n
                               in  ConstantInfo ('P':(show n ++ ('_' : hsnShowAlphanumericShort nm)))
                                                seqnr
                                                (max 2 (1+ar))
                                                ar
                                                (ar>0)
         (GrTag_Fun nm)     -> let ar  = fromJust2 ("no arity for Fun " ++ show tag) (Map.lookup (getNr nm) am)
                                   ar2 = maximum0 (ar:(map (finalTagPayloadSize am . fst) (getNodes (getEnvVar hm (getNr nm)))))
                               in  ConstantInfo ('F':hsnShowAlphanumericShort nm)
                                                seqnr
                                                (max 2 (1+ar2))
                                                ar
                                                (ar>0)
         (GrTag_App nm)     -> let ar  = fromJust2 ("no arity for App " ++ show tag) (Map.lookup (getNr nm) am)
                                   ar2 = maximum0 (ar:(map (finalTagPayloadSize am . fst) (getNodes (getEnvVar hm (getNr nm)))))
                               in  ConstantInfo ("Afun_"++hsnShowAlphanumericShort nm)
                                                seqnr
                                                (max 2 (1+ar2))
                                                ar
                                                (ar>0)
         (GrTag_Hole)       ->     ConstantInfo "HOLE"
                                                seqnr
                                                2
                                                1
                                                False
         (GrTag_Unboxed)    ->     ConstantInfo "UNBOXED"
                                                seqnr
                                                2
                                                1
                                                False
         (GrTag_Rec)        ->     error "GrTag_Rec found in ToSilly"
                                            


fromJust2 :: String -> Maybe a -> a
fromJust2 s Nothing  = error s
fromJust2 _ (Just x) = x


finalTagPayloadSize :: Map.Map Int Int -> GrTag -> Int
finalTagPayloadSize _  (GrTag_Con a i _) = gtannArity a
finalTagPayloadSize am (GrTag_PApp n nm)  = maybe  0
                                                   (\a -> a-n)
                                                   (Map.lookup (getNr nm) am)
                                            -- (fromJust2 ("no arity for payload PApp " ++ show nm) (Map.lookup (getNr nm) am)) - n
finalTagPayloadSize _  (GrTag_Unboxed)    = 1
finalTagPayloadSize _  _                  = 0


hasPointerPayload :: EHCOpts -> Map.Map HsName [GrTag] -> HsName -> Bool
hasPointerPayload opts tm nm
  |  nm==hsnPackedString =  False
  |  nm==hsnInt  =  False
  |  nm==hsnChar =  False
%%[[97  
  |  nm==builtinNm opts ehbnWord   = False  
  |  nm==builtinNm opts ehbnInt8   = False  
  |  nm==builtinNm opts ehbnWord8  = False  
  |  nm==builtinNm opts ehbnInt16  = False  
  |  nm==builtinNm opts ehbnWord16 = False  
  |  nm==builtinNm opts ehbnInt32  = False  
  |  nm==builtinNm opts ehbnWord32 = False  
  |  nm==builtinNm opts ehbnFloat  = False  
  |  nm==builtinNm opts ehbnInt64  = False  
  |  nm==builtinNm opts ehbnWord64 = False  
  |  nm==builtinNm opts ehbnDouble = False  
%%]]
%%[[99
  |  nm==builtinNm opts ehbnAddr   = False  
%%]]
  |  otherwise   =  maybe True                 -- The constructor is not a type in the type table, so it is a normal constructor which has pointers as payload.
                          (not . null)         -- The constructor is a type in the type table, which can happen in datatypes like "data Hello = Hello Int". But if for this type there are no constructors, we have a Opaque type, and we should indicate that the constructor has no pointer arguments.
                          (Map.lookup nm tm)


builtinNm :: EHCOpts -> (EHBuiltinNames -> HsName) -> HsName
builtinNm = ehcOptBuiltin




getSilTp hptMap (HsName_Nr{-use: hsnMbNr-} n _)
  =  case getEnvVar hptMap n
     of   (AbsBasic)       -> SilTpWord
          (AbsTags _ )     -> SilTpTag
          (AbsPtr  _ )     -> SilTpPtr
          (AbsPtr0  _ _)   -> SilTpPtr
          (AbsPtr1  _ _)   -> SilTpPtr
          (AbsPtr2  _ _ _) -> SilTpPtr
          (AbsBottom)      -> SilTpUnknown
          (AbsUnion _)     -> SilTpUnion
          _                -> SilTpOther


%%]
