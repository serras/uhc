%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Module itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen coresysf) hs module {%{EH}Ty.ToSysfTy}
%%]
%%[(8 codegen coresysf) hs import(UHC.Util.Utils,{%{EH}Base.HsName.Builtin},{%{EH}Base.Common},{%{EH}Base.TermLike},{%{EH}Opts.Base})
%%]
%%[(8 codegen coresysf) hs import({%{EH}Ty} as T, qualified {%{EH}Core} as C, {%{EH}AbstractCore})
%%]

%%[(8 codegen coresysf) hs import ({%{EH}Gam.Base},{%{EH}Gam.TyKiGam})
%%]
%%[(9 codegen coresysf) hs import ({%{EH}Gam.ClGam})
%%]

%%[(8 codegen coresysf) hs import ({%{EH}FinalEnv})
%%]

%%[(8 codegen coresysf) hs import (qualified Data.Set as Set)
%%]

%%[(8 codegen coresysf) ag import({Ty/AbsSyn},{Ty/CommonAG})
WRAPPER TyAGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% System F generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen coresysf) hs export(ArrowHowDecompose(..),tyArrowInstQuArgsRes)
data ArrowHowDecompose
 = ArrowDecompose_InstOnly      -- only ty instantiation
 | ArrowDecompose_ArgBefore     -- split off arg before
 | ArrowDecompose_ArgAfter      -- split off arg after
 
-- split type + instantation into multiple type args (>=0) + optional 1 arg + 1 res:
-- in other words, peel of type application(s) for Sys F, driven by InstTo
tyArrowInstQuArgsRes
  :: ArrowHowDecompose
     -> [InstTo]			-- how to instantiate quantification, nr of ...
     -> Int					-- nr of impls to drop
     -> C.SysfTy			
     -> ( [C.SysfTyBind]	-- sysf args for quantification
        , [C.SysfTyBind]	-- implicits dropped
        , C.SysfTyBind		-- the argument (if any)
        , C.SysfTy			-- remaining/result type
        )
tyArrowInstQuArgsRes how instToL dropNrImpls t
  = case how of
      ArrowDecompose_InstOnly
        -> (taL,[],mkb hsnWild (appDfltBoundmeta r) $ appDbg "Ty.tyArrowInstQuArgsRes.ArrowDecompose_InstOnly",r)
        where (taL,r) = extr instToL t
      ArrowDecompose_ArgBefore
        -> (taL,[],a,r')
        where (a,r) = unArr dropNrImpls "Ty.tyArrowInstQuArgsRes.ArrowDecompose_ArgBefore" t
              (taL,r') = extr instToL r
      ArrowDecompose_ArgAfter
        -> (taL,[],a,r')
        where (taL,r) = extr instToL t
              (a,r') = unArr dropNrImpls "Ty.tyArrowInstQuArgsRes.ArrowDecompose_ArgAfter" r
  where extr (InstTo_Qu _ _ _ _ : is) t = (a:a',r')
                                        where (a,r)   = unArr 0 "Ty.tyArrowInstQuArgsRes.extr" t
                                              (a',r') = extr is r
        extr _                        t = ([],t)
        unArr ndrop m t
          | ndrop > 0 = unArr (ndrop-1) m r
          | otherwise = (mkb n bm a, r)
          where ((n,bm),a,r) = maybe ((hsnWild,appDfltBoundmeta t),appDbg $ "tyArrowInstQuArgsRes." ++ m,t) id $ appMb1MetaArr t
        mkb n bm a = acoreBind1Asp n [acoreBound1MetaVal bm a]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Ty -> TyCore transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen coresysf) hs export(Ty2Ki,KiFitsIn)
type Ty2Ki = TyKiGam -> Ty -> Ty
type KiFitsIn = UID -> Ty -> Ty -> [InstTo]
%%]

%%[(8 codegen coresysf) hs
-- how to wrap an argument of Lam/Arrow, a bit hackish
data T2THowArg
  = T2TArg_AsIs         -- no wrap, reflects directly the original type, used for matching
  | T2TArg_Seq1         -- wrap as singleton sequence, for type/kind/... Lam/Arrow
  | T2TArg_Seq          -- wrap as sequence, for value Lam/Arrow
  | T2TArg_Seq1'        -- same as T2TArg_Seq1, but only wraps if not done already, and not an arrow
  | T2TArg_Seq'         -- same as T2TArg_Seq, but only wraps if not done already, and not an arrow
%%]

%%[(8 codegen coresysf) hs
argWrap' :: T2THowArg -> (C.SysfTy -> C.SysfTySeq1) -> C.SysfTy -> C.SysfTy
argWrap' T2TArg_AsIs  _  x = x
argWrap' T2TArg_Seq1  sq x = x -- C.Expr_Seq1 $ sq x
argWrap' T2TArg_Seq   sq x = x -- C.Expr_Seq   [sq x]
argWrap' T2TArg_Seq1' sq x = x -- case x of {C.Expr_Seq1 _ -> x ; C.Expr_Arrow _ _ -> x ; _ -> argWrap' T2TArg_Seq1  sq x}
argWrap' T2TArg_Seq'  sq x = x -- case x of {C.Expr_Seq  _ -> x ; C.Expr_Arrow _ _ -> x ; _ -> argWrap' T2TArg_Seq   sq x}

argWrap :: T2THowArg -> C.SysfTy -> C.SysfTy
argWrap how t = argWrap' how id {- C.ExprSeq1_L0Val -} t
%%]

%%[(8 codegen coresysf) hs
data T2TCOpts
  = T2TCOpts
      { t2tcOptQuantvarKi       ::  Bool            -- introduce tyvar bindings for quantified tyvars
      , t2tcOptMkThunk          ::  Bool            -- thunkify value arguments
      , t2tcOptHowArrowArg      ::  T2THowArg       -- how to wrap arrow argument (is on the value level)
      , t2tcOptHowArrowRes      ::  T2THowArg       -- how to wrap arrow result (is on the value level)
      , t2tcOptHowAppArg        ::  T2THowArg       -- how to wrap app argument (is on the type level)
      , t2tcOptTy2Ki            ::  Ty2Ki           -- mapping from type to their corresponding 1 meta level higher type (i.e. kind)
      , t2tcOptKiFitsIn         ::  KiFitsIn        -- fitting 2 kinds
      }

defaultT2TCOpts
  = T2TCOpts
      True True
      T2TArg_Seq T2TArg_Seq' T2TArg_Seq1
      (\_ _ -> Ty_Any)
      (\_ _ _ -> [])
%%]

%%[(8 codegen coresysf) hs
tyToSysfTy' :: T2TCOpts -> ToSysfEnv -> Ty -> C.SysfTy
tyToSysfTy' opts env ty
  = st_Syn_TyAGItf t
  where  t  =  wrap_TyAGItf
                  (sem_TyAGItf  (T.TyAGItf_AGItf ty))
                  (Inh_TyAGItf
                     { opts_Inh_TyAGItf = opts
                     , env_Inh_TyAGItf  = env
                     })
%%]

%%[(8 codegen coresysf) hs export(tyToSysfTy, tyToSysfTyBare, tyToSysfTyBase, tyToSysfTyKi)
-- with all additional annotation
tyToSysfTy :: KiFitsIn -> Ty2Ki -> ToSysfEnv -> Ty -> C.SysfTy
tyToSysfTy fit t2k
  = tyToSysfTy'
      (defaultT2TCOpts
         { t2tcOptTy2Ki         = t2k
         , t2tcOptKiFitsIn      = fit
         })

-- with all additional annotation, no meta level info
tyToSysfTyBase :: ToSysfEnv -> Ty -> C.SysfTy
tyToSysfTyBase = tyToSysfTy' defaultT2TCOpts

-- without TyCore specifics
tyToSysfTyBare :: ToSysfEnv -> Ty -> C.SysfTy
tyToSysfTyBare
  = tyToSysfTy'
      (defaultT2TCOpts
         { t2tcOptMkThunk       = False
         , t2tcOptQuantvarKi    = False
         , t2tcOptHowArrowArg   = T2TArg_AsIs
         , t2tcOptHowArrowRes   = T2TArg_AsIs
         })

-- for kinds
tyToSysfTyKi :: ToSysfEnv -> Ty -> C.SysfTy
tyToSysfTyKi
  = tyToSysfTy'
      (defaultT2TCOpts
         { t2tcOptMkThunk       = False
         , t2tcOptHowArrowArg   = T2TArg_Seq1
         , t2tcOptHowArrowRes   = T2TArg_AsIs -- T2TArg_Seq1'
         })
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Base/builtin defs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen coresysf) hs export(sysftyChar,sysftyInt)
sysftyInt  = tyToSysfTyBase emptyToSysfEnv T.tyInt
sysftyChar = tyToSysfTyBase emptyToSysfEnv T.tyChar
%%]

%%[(8888 codegen coresysf) hs export(kiStar)
kiStar = tyToSysfTyBase T.kiStar
%%]

%%[(8888 codegen coresysf) hs export(tyBuiltinCon)
tyBuiltinCon :: EHCOpts -> (EHBuiltinNames -> HsName) -> C.SysfTy
tyBuiltinCon opts bnmOf = C.Expr_Var (ehcOptBuiltin opts bnmOf)
%%]

%%[(8888 codegen coresysf).tyString hs export(tycString)
tycString opts = tyToSysfTyBase T.tyString
%%]

%%[(1111 codegen coresysf).tyString -8.tyString hs export(tycString)
tycString opts = tyBuiltinCon opts ehbnPrelString
%%]

%%[(9191 codegen coresysf) hs export(tyBool)
tyBool opts = tyBuiltinCon opts ehbnDataBool
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen coresysf)
ATTR
  AllTy TyAGItf
    [ opts: T2TCOpts
      env : ToSysfEnv
    | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Environment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen coresysf)
ATTR AllTy [ ty2ki: {Ty2Ki} | | ]

SEM TyAGItf
  | AGItf       loc         .   ty2ki       =   t2tcOptTy2Ki @lhs.opts
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysF variant of Ty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen coresysf)
ATTR
  Ty TyAGItf
%%[[9
  Pred
%%]]
    [ | | st: {C.SysfTy} ]
%%]

%%[(8 codegen coresysf)
SEM Ty
  | Var         loc         .   stBase      =   appCon $ mkHNm @tv
  | Con         loc         .   stBase      =   appCon @nm
  | Dbg         loc         .   stBase      =   appDbg @info
%%]

%%[(8 codegen coresysf)
SEM Ty
  | Any         loc         .   stBase      =   appDbg "ANY"
  | Ext         loc         .   stBase      =   appDbg "EXT"
%%]

%%[(9 codegen coresysf)
SEM Ty
  | Impls       loc         .   stBase      =   appDbg "IMPLS"
  | Pred        loc         .   stBase      =   @pr.st

SEM Pred
  | Class       loc         .   st          =   case gamLookup @ty.appFunNm (sysfenvClGam @lhs.env) of
                                                  Just clgi -> appConApp (ctagTyNm $ clgiDictTag clgi) (reverse @ty.appRevArgL)
                                                  _         -> @ty.st
  | * - Class   loc         .   st          =   appDbg "PRED"
%%]

%%[(11 codegen coresysf)
SEM Ty
  | Lam         loc         .   stBase      =   appDbg "LAM"
%%]

%%[(8 codegen coresysf)
SEM Ty
  | App         loc         .   st          =   let dflt = {- @sKiArgAppWrap $ -} app1App @func.st (argWrap (t2tcOptHowAppArg @lhs.opts) @arg.st)
                                                    th = if t2tcOptMkThunk @lhs.opts then appNonEvl else id
                                                    wra = argWrap (t2tcOptHowArrowArg @lhs.opts)
                                                    wrr = argWrap (t2tcOptHowArrowRes @lhs.opts)
                                                in  if @isSpineRoot
                                                    then if @appIsArrow && length @appRevArgL == 2
                                                         then app1Arr
                                                                (wra $ th $ @appRevArgL !! 1)
                                                                (wrr      $ @appRevArgL !! 0)
                                                         else if @appIsLikeProd
                                                         then let flds = assocLMapElt th $ rowCanonOrder @recFldL
                                                              in  case @recMbExt of
%%[[8
                                                                    Just _ -> appDbg "EXTREC"
%%][1010
                                                                    Just v -> SysfTy_ExtRec (C.Expr_Var v) (C.Expr_Rec flds)
%%]]
                                                                    _      -> recRec flds -- C.Expr_Node CTagRec flds
                                                         else if @appIsSum
                                                         then let flds = rowCanonOrder @recFldL
                                                              in  recSum flds
                                                         else dflt
                                                    else dflt
  | TBind       loc         .   stBase      =   let dflt = @ty.st
                                                in  if t2tcOptQuantvarKi @lhs.opts && tyquIsForall @qu.self
                                                    then let {- a   = -- Ty_TBind (TyQu_Plain $ tyquMetaLev @qu.self) @tv 
                                                                   -- bndBndIn (\n l -> Ty_TBind (TyQu_Plain l) n) @tv (tyquMetaLev @qu.self)
                                                                   case tyquMetaLev @qu.self of
                                                                     0 -> const (appCon $ mkHNm @tv) -- C.ExprSeq1_L0Bind (mkHNm @tv)
                                                                     1 -> const (appCon $ mkHNm @tv) -- C.ExprSeq1_L1Bind (mkHNm @tv)
                                                             wra = argWrap' (t2tcOptHowArrowArg @lhs.opts) a
                                                             -}
                                                             wra = argWrap  (t2tcOptHowArrowArg @lhs.opts)
                                                             wrr = argWrap  (t2tcOptHowArrowRes @lhs.opts)
                                                         in  bndBndIn @tv (1 + tyquMetaLev @qu.self) (wra $ tyToSysfTyKi @lhs.env @l1) (wrr @ty.st)
                                                    {-
                                                         in  app1Arr
                                                               (wra $ tyToSysfTyKi @l1   )
                                                               (wrr                @ty.st)
                                                    -}
                                                    {-
                                                    else if T.tyquIsExists @qu.self
                                                    then let a = C.ExprSeq1_L0Bind (mkHNm @tv)
                                                             wra = argWrap' T2TArg_Seq1 a
                                                         in  C.Expr_Exists 
                                                               (wra $ tyToSysfTyKi @l1   )
                                                               (                   @ty.st)
                                                    -}
                                                    else dflt -- for now
  | Ann         loc         .   st          =   if @ann.isEmpty
                                                then @ty.st
                                                else {- Ty_Ann @ann.st -} @ty.st
  | * - App Ann
                loc         .   st          =   {- @sKiArgAppWrap -} @stBase
%%]

%%[(8 codegen coresysf)
ATTR TyAnn [ | | isEmpty : Bool]

SEM TyAnn
  | Empty Mono  lhs         .   isEmpty     =   True
  | * - Empty Mono
                lhs         .   isEmpty     =   False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unique seed
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen coresysf)
ATTR AllTy [ | gUniq: UID | ]

SEM AllTyAGItf
  | AGItf       loc         .   gUniq       =   uidStart
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Do a bit of meta level inference (i.e. kind of ty reconstruction)
%%% to get bindings and instantiation stucture,
%%% unfortunately just a replica of ToSysfTy for EH.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Environment:

%%[(8 codegen coresysf)
SEM Ty
  | TBind       ty          .   ty2ki       =   let m g (Ty_Var v _) | v == @tv = @l1
                                                    m g t                       = @lhs.ty2ki g t
                                                in  m
%%]

%%[(8 codegen coresysf)
SEM Ty
  | Con         loc         .   ki          =   @lhs.ty2ki (sysfenvTyKiGam @lhs.env) (appCon @nm)
  | Var         loc         .   ki          =   @lhs.ty2ki (sysfenvTyKiGam @lhs.env) (appCon $ mkHNm @tv)
%%]

Top down ki:

%%[(8 codegen coresysf)
ATTR Ty [ kiTopDown: {Ty} | | ]

SEM TyAGItf
  | AGItf       loc         .   kiTopDown   =   kiStar

SEM Ty
  | App         loc         .   kiArg       =   mkNewTyVar @lUniq_arg
                            .   kiFunc      =   [@kiArg] `appArr` @lhs.kiTopDown
                func        .   kiTopDown   =   @kiFunc
                arg         .   kiTopDown   =   @kiArg
                loc         .   lUniq_arg   :   UNIQUEREF gUniq
%%]

%%[(9 codegen coresysf)
SEM Pred
  | Class Pred
%%[[10
    Lacks
%%]]
%%[[31
    Eq
%%]]
                loc         .   kiTopDown   =   Ty_Any
%%]

Local ski:

%%[(8 codegen coresysf)
SEM Ty
  | Var Con     loc         .   ski         =   tyToSysfTyKi @lhs.env @ki
  | TBind       loc         .   ski         =   @ty.skiBotUp
  | * - Var Con TBind
                loc         .   ski         =   (appDbg "ski" :: C.SysfTy)
%%]

Bottom up ski:

%%[(8 codegen coresysf)
ATTR Ty [ | | skiBotUp: {C.SysfTy} ]

SEM Ty
  | *           lhs         .   skiBotUp    =   @skiKiAppRes
%%]

Instantiation structure for App:

%%[(8 codegen coresysf)
ATTR Ty [ | | appInstToL: {[InstTo]} ]
%%]

%%[(8 codegen coresysf)
SEM Ty
  | Var Con     loc         .   (appInstToLHere,appInstToL)
                                            =   instToSplitQu @fo_fin
  | App         loc         .   (appInstToLHere,appInstToL)
                                            =   instToSplitQu $ drop 1 @func.appInstToL
  | * - Var Con App
                loc         .   appInstToLHere
                                            =   []
                            .   appInstToL  =   []
%%]

Fitting, to extract bindings and instantiation stucture:

%%[(8 codegen coresysf)
SEM Ty
  | Var Con     loc         .   fo_fin      =   t2tcOptKiFitsIn @lhs.opts @lUniq_fo @ki @lhs.kiTopDown
                loc         .   lUniq_fo    :   UNIQUEREF gUniq
%%]

%%[(8 codegen coresysf)
SEM Ty
  | App         loc         .   (skiKiAppArgL,_,skiAppArg,skiKiAppRes)
                                            =   tyArrowInstQuArgsRes ArrowDecompose_ArgBefore @appInstToLHere 0 @func.skiBotUp
  | * - App     loc         .   (skiKiAppArgL,_,_,skiKiAppRes)
                                            =   tyArrowInstQuArgsRes ArrowDecompose_InstOnly @appInstToLHere 0 @ski
%%]

Additional kind arg wrapping

%%[(8888 codegen coresysf)
SEM Ty
  | *           loc         .   sKiArgAppWrap
                                            =   \e -> foldr (flip app1App) e $ {- @tcSubstAppSpine `C.cSubstApp` -} {- map C.tyL0BindToL1Val -} @skiKiAppArgL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utility attr's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Reverse App spine

%%[(8 codegen coresysf)
ATTR Ty [ | | appRevArgL: {[C.SysfTy]} ]
%%]

%%[(8 codegen coresysf)
SEM Ty
  | App         loc         .   appRevArgL  =   @arg.st : @func.appRevArgL
  | * - App     loc         .   appRevArgL  =   []
%%]

Extensible record fields + maybe the extended type

%%[(8 codegen coresysf)
ATTR Ty [ | | recFldL: {AssocL HsName C.SysfTy} ]
ATTR Ty [ | | recMbExt: {Maybe TyVarId} ]
%%]

%%[(8 codegen coresysf)
SEM Ty
  | Ext         loc         .   recFldL     =   (@nm,@extTy.st) : @ty.recFldL
  | App         loc         .   recFldL     =   @arg.recFldL
  | * - Ext App loc         .   recFldL     =   []

SEM Ty
  | Ext         loc         .   recMbExt    =   @ty.recMbExt
  | App         loc         .   recMbExt    =   @arg.recMbExt
  | Var         loc         .   recMbExt    =   Just @tv
  | * - Ext Var App
                loc         .   recMbExt    =   Nothing
%%]


