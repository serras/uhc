%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[doesWhat doclatex
Core AST as Haskell datatype.

Datatype LamInfo holds the implementation info to be exported from a module.
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs module {%{EH}Core} import({%{EH}Base.HsName.Builtin},{%{EH}Base.Common},{%{EH}Base.TermLike},{%{EH}Opts.Base})
%%]

%%[(8 core) hs import({%{EH}AbstractCore}) export(module {%{EH}AbstractCore})
%%]

%%[(8 core) hs import({%{EH}AnaDomain}) export (module {%{EH}AnaDomain})
%%]

%%[(8 core) hs import ({%{EH}Base.Target}(FFIWay(..),TargetFlavor(..))) export(module {%{EH}Base.Target})
%%]

%%[(8 core) hs import(Data.Maybe,Data.Char,Data.List,UHC.Util.Utils,Control.Applicative((<|>)))
%%]

%%[(8 core) hs export(CodeAGItf(..), CModule(..), CExpr(..), MbCExpr, CBind(..), CBound(..), CMetaVal(..), CMetaBind(..), CMetas, CBindL, CBoundL, CPatRest(..), CAlt(..), CAltL, CPat(..), CPatFld(..), CPatFldL) 
%%]

%%[(8 core) hs export(CBindAnn(..), CBindAnnL, CExprAnn(..))
%%]

%%[(8 core) hs export(CImport(..), CImportL)
%%]

%%[(8 core) hs export(CDeclMeta(..), CDeclMetaL, CDataCon(..), CDataConL)
%%]

%%[(8 core) hs import(qualified Data.Map as Map,qualified Data.Set as Set)
%%]

%%[(8 core) hs import({%{EH}Ty})
%%]

%%[(8888 core grin) hs import(qualified {%{EH}CodeGen.ValAccess} as VA)
%%]

%%[(50 core) hs import({%{EH}Module.Merge})
%%]
%%[(50 core) hs import(Data.Array)
%%]
%%[(50 core) hs import(Control.Monad, UHC.Util.Binary, UHC.Util.Serialize)
%%]
%%[(50 core) hs import(Data.Typeable(Typeable), Data.Generics(Data))
%%]

%%[(90 core) hs import({%{EH}Foreign}) export(module {%{EH}Foreign})
%%]

%%[(9999 core) hs import({%{EH}Base.ForceEval})
%%]

%%[(8 core) ag import({Core/AbsSyn})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Derived instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core).derivingShow ag
DERIVING *
  : Show
%%]

%%[(100 core) -8.derivingShow hs
-- | Explicit dummy instances instead of derived ones which not really are used except as context for PP
instance Show CExpr where
  show _ = "CExpr"

instance Show CBound where
  show _ = "CBound"

%%]
instance Show CAlt where
  show _ = "CAlt"

instance Show CBind where
  show _ = "CBind"

instance Show CPat where
  show _ = "CPat"

instance Show CModule where
  show _ = "CModule"


%%[(8 core) ag
DERIVING CImport AllExpr
  : Eq
%%]

%%[(8 core) ag
DERIVING CImport
  : Ord
%%]

%%[(50 core) ag
DERIVING *
  : Typeable, Data
%%]

%%[(50 core) ag
DERIVING CMetaBind
  : Enum
%%]

-- for debug only
%%[(8 core) hs import({%{EH}Base.Debug})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Abstract syntax for encoding case+pattern rewrite info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(RAlt,RPat,RPatConBind,RPatFld)
type RAlt           = RAlt'         CExpr CTy CBind CPatRest
type RPat           = RPat'         CExpr CTy CBind CPatRest
type RPatConBind    = RPatConBind'  CExpr CTy CBind CPatRest
type RPatFld        = RPatFld'      CExpr CTy CBind CPatRest
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Update CModule fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(50 core) hs export(cmodSetImports)
-- | Set imports
cmodSetImports :: [HsName] -> CModule -> CModule
cmodSetImports imp m = m {imports_CModule_Mod = map CImport_Import imp}
%%]]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tuple operator info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(10 core) hs export(cTupLbl)
cTupLbl :: CExpr -> HsName
cTupLbl e
  =  case e of
         CExpr_TupIns _ _ l _ _ -> l
         CExpr_TupUpd _ _ l _ _ -> l
         CExpr_TupDel _ _ l _   -> l
%%]

%%[(10 core) hs export(cTupTag)
cTupTag :: CExpr -> CTag
cTupTag e
  =  case e of
         CExpr_TupIns _ t _ _ _ -> t
         CExpr_TupUpd _ t _ _ _ -> t
         CExpr_TupDel _ t _ _   -> t
%%]

%%[(10 core) hs export(cTupOff)
cTupOff :: CExpr -> CExpr
cTupOff e
  =  case e of
         CExpr_TupIns _ _ _ o _ -> o
         CExpr_TupUpd _ _ _ o _ -> o
         CExpr_TupDel _ _ _ o   -> o
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utility functions for CMeta
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(cmetasDefault)
cmetasDefault :: CMetas
cmetasDefault = (CMetaBind_Plain,CMetaVal_Val)
%%]

%%[(8 core) hs export(cmetasVal)
cmetasVal :: CMetas -> CMetaVal
cmetasVal (_,v) = v
%%]

%%[(8 core) hs export(cmetasMapVal)
cmetasMapVal :: (CMetaVal -> CMetaVal) -> CMetas -> CMetas
cmetasMapVal f (b,v) = (b,f v)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Binding category, per group of bindings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(CBindCateg(..))
data CBindCateg
  = CBindCateg_Rec              -- mutually recursive
  | CBindCateg_Strict           -- strictly evaluated
  | CBindCateg_Plain                -- plain
  | CBindCateg_FFI              -- imported function
%%[[90
  | CBindCateg_FFE              -- exported function (not implemented yet)
%%]]
  deriving (Show,Eq,Enum)
%%]

%%[(50 core) hs
deriving instance Typeable CBindCateg
deriving instance Data CBindCateg
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Context: strictness as required by context
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(EvalCtx(..),evalCtxIsStrict)
data EvalCtx
  = EvalCtx_None         -- nothing known, no strictness required, no thunking
  | EvalCtx_Thunk        -- lazy/thunked representation required
  | EvalCtx_PApp0        -- partial app of lam with 0 params
  | EvalCtx_Eval         -- strictness (thus eval) required
  | EvalCtx_EvalUnbox    -- strictness (thus eval) + unboxing required
  deriving Eq

evalCtxIsStrict:: EvalCtx -> Bool
evalCtxIsStrict EvalCtx_Eval        = True
evalCtxIsStrict EvalCtx_EvalUnbox   = True
evalCtxIsStrict _                   = False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Properties
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(cexprIsLam)
cexprIsLam :: CExpr -> Bool
cexprIsLam (CExpr_Lam _ _) = True
cexprIsLam _               = False
%%]

%%[(8 core) hs export(cbindNm)
cbindNm :: CBind -> HsName
cbindNm (CBind_Bind      n _) = n
-- cbindNm (CBind_FFI _ _ _ n _  ) = n
%%]

%%[(50 core) hs export(cbindAspectMbExpr,cbindExprs)
-- | extract expr for aspect, relevant for later use/analysis/...
cbindAspectMbExpr :: CBound -> Maybe CExpr
cbindAspectMbExpr (CBound_Bind _     e) = Just e
cbindAspectMbExpr (CBound_Val  _ _ _ e) = Just e
cbindAspectMbExpr _                     = Nothing

-- | extract exprs of a binding which are relevant for use/analysis/...
cbindExprs :: CBind -> [CExpr]
cbindExprs (CBind_Bind _ a) = catMaybes $ map cbindAspectMbExpr a
%%]

%%[(9797 core) hs export(cexprMbConst)
cexprMbConst :: CExpr -> Maybe Integer
cexprMbConst e@(CExpr_Int     i) = Just $ toInteger i
cexprMbConst e@(CExpr_Char    c) = Just $ toInteger $ ord c
cexprMbConst e@(CExpr_Integer i) = Just i
cexprMbConst _                   = Nothing
%%]



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Remove duplicate bindings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 core) hs export(cbindLNub)
cbindLNub :: CBindL -> CBindL
cbindLNub = nubBy (\b1 b2 -> cbindNm b1 == cbindNm b2)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Lifting to CMetaVal tupled
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8888 core) hs export(cmetaLift)
cmetaLift :: Functor f => f x -> f (x,CMetaVal)
cmetaLift = fmap2Tuple CMetaVal_Val
%%]

%%[(9999 core) hs export(cmetaLiftDict)
cmetaLiftDict :: Functor f => f x -> f (x,CMetaVal)
cmetaLiftDict = fmap2Tuple CMetaVal_Dict
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(mkCMod,emptyCModule)
mkCMod :: CExpr -> CModule
mkCMod e = CModule_Mod (hsnFromString "") [] [] e -- []

emptyCModule :: CModule
emptyCModule = mkCMod (CExpr_Int 0)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Inspection/deconstruction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(cexprMbVar,cexprVar)
cexprMbVar :: CExpr -> Maybe HsName
cexprMbVar (CExpr_Var r) = Just (acbrefNm r)
cexprMbVar _             = Nothing

cexprVar :: CExpr -> HsName
cexprVar = maybe hsnUnknown id . cexprMbVar
%%]

%%[(8 core) hs export(cexprTupFld)
cexprTupFld :: CExpr -> CExpr
cexprTupFld (CExpr_TupIns _ _ _ _ e) = e
cexprTupFld _                        = panic "Core.cexprTupFld" -- acoreVar hsnUnknown
%%]

%%[(8 core) hs export(cexprIsEvaluated)
cexprIsEvaluated :: CExpr -> Bool
cexprIsEvaluated (CExpr_Int  _) = True
cexprIsEvaluated (CExpr_Char _) = True
cexprIsEvaluated _              = False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Integer construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9797 core) hs export(cinteger)
cinteger :: EHCOpts -> Integer -> CExpr
cinteger opts i = acoreBuiltinApp opts ehbnPackedStringToInteger [CExpr_String $ show $ i]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name extraction (temporary, 20100330)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8888 core) hs export(cpatVarNm) 
cpatVarNm :: CPat -> HsName
cpatVarNm (CPat_Var n) = n
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tags, in general
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8888 core) hs export(caltIntTag) 
cpatConTag :: CPat -> CTag
cpatConTag (CPat_Con    t _ _)  = t
cpatConTag (CPat_Int    _    )  = ctagInt
cpatConTag (CPat_Char   _    )  = ctagChar

cpatIntTag :: CPat -> Int
cpatIntTag (CPat_Con    t _ _)  = ctagTag t
cpatIntTag (CPat_Int    i    )  = i
cpatIntTag (CPat_Char   c    )  = ord c

caltIntTag :: CAlt -> Int
caltIntTag (CAlt_Alt p _) = cpatIntTag p
%%]
caltConTag :: CAlt -> CTag
caltConTag (CAlt_Alt p _) = cpatConTag p


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% List
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

In the following, note the hardcodedness!!!!!

%%[(9999 core) hs export(mkCListSingleton)
mkCListSingleton :: EHCOpts -> CExpr -> CExpr
mkCListSingleton opts e
  = acoreTagTup (ctagCons opts) [e,acoreTagTup (ctagNil opts) []]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Var introduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(CVarIntro(..),emptyCVarIntro)
data CVarIntro
  = CVarIntro
      { cviLev      :: Int      -- lexical level
      , cviMeta     :: CMetaVal -- meta info
      }

emptyCVarIntro :: CVarIntro
emptyCVarIntro
  = CVarIntro cLevExtern CMetaVal_Val
%%]

%%[(8 core) hs export(CVarIntroMp,CVarIntroL,cviLookup)
type CVarIntroMp = Map.Map HsName CVarIntro
type CVarIntroL  = AssocL  HsName CVarIntro

cviLookup :: HsName -> CVarIntroMp -> CVarIntro
cviLookup n m = Map.findWithDefault emptyCVarIntro n m
%%]

%%[(8 core) hs export(cLevModule,cLevExtern)
cLevModule, cLevExtern :: Int
cLevModule = 0
cLevExtern = 0
%%]

%%[(50 core) hs export(cLevIntern)
cLevIntern :: Int
cLevIntern = 1
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Replacement in general
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(CVarRepl(..))
data CVarRepl r
  = CVarRepl
      { cvrRepl     :: r        -- replacement
      , cvrMeta     :: CMetaVal -- meta info
      }
%%]

%%[(8 core) hs export(CVarReplMp)
type CVarReplMp  r = Map.Map HsName (CVarRepl r)
type CVarReplAsc r = AssocL  HsName (CVarRepl r)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Replacement with HsName
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(CVarReplNm,emptyCVarReplNm)
type CVarReplNm = CVarRepl HsName

emptyCVarReplNm :: CVarReplNm
emptyCVarReplNm = CVarRepl hsnUnknown CMetaVal_Val
%%]

%%[(8 core) hs export(CVarReplNmMp,CVarReplNmL)
type CVarReplNmMp = CVarReplMp  HsName
type CVarReplNmL  = CVarReplAsc HsName
%%]

%%[(8 core) hs export(cvrFromCvi)
cvrFromCvi :: CVarIntro -> CVarReplNm
cvrFromCvi i
  = emptyCVarReplNm
      { cvrMeta     = cviMeta i
      }
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Support for transformations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(fvLev,fvsLev)
fvLev :: HsName -> CVarIntroMp -> Int
fvLev n m = cviLev $ cviLookup n m

fvsLev :: CVarIntroMp -> Int -> FvS -> Int
fvsLev lm lDflt fvs = foldr (\n l -> fvLev n lm `max` l) lDflt $ Set.toList $ fvs
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Module merge
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(50 core) hs export(cModMerge)
-- | merge by concatenation
cModMerge :: [CModule] -> CModule
cModMerge mL
  = foldr1 cmb mL
  where get (CExpr_Let c b e) = CExpr_Let c b . get e
        get  _                = id
        cmb (CModule_Mod m1 im1 mt1 e1) (CModule_Mod m2 im2 mt2 e2)
          = CModule_Mod m2 (im1++im2) (mt1++mt2) (get e1 e2)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Map/Database representation of a module
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(50 core) hs export(CDbBindLetInfo)
-- | the binding info required for let bind
type CDbBindLetInfo'  f            = ModDbBindLetInfo'' f  CBindCateg CBind
type CDbBindLetInfo                = CDbBindLetInfo'  []
%%]

%%[(50 core) hs export(CDbBindRef, CDbModuleBindMp)
-- | actual bindings stored in separate array to allow for sharing
type CDbBindArray = ModDbBindArray' CBindCateg CBind

-- | reference into database of bindings, agnostic of name given to it
type CDbBindRef = (Int,Int)

-- | binding map of global names to individual bindings
type CDbModuleBindMp = Map.Map HsName CDbBindRef
%%]

%%[(50 core) hs export(CModuleDatabase(..), emptyCModuleDatabase)
-- | the full module represented in a map/database like format (20101004 AD: to be made into persistent db soon)
data CModuleDatabase
  = CModuleDatabase
      { cmoddbModNm         :: !HsName              -- module name
      , cmoddbBindArr       :: !CDbBindArray        -- bindings
      , cmoddbBindMp        :: !CDbModuleBindMp     -- map of name to bindings
      , cmoddbMainExpr      :: !CExpr               -- the final expr of the module's let expr
      , cmoddbImports       :: !CImportL            -- imports
      , cmoddbMeta          :: !CDeclMetaL          -- meta info/decl
      }

emptyCModuleDatabase :: CModuleDatabase
emptyCModuleDatabase = CModuleDatabase hsnUnknown (array (1,0) []) Map.empty (CExpr_Int 0) [] []
%%]

%%[(50 core) hs export(cmoddbLookup)
cmoddbLookup :: HsName -> CModuleDatabase -> Maybe CDbBindRef
cmoddbLookup n db = Map.lookup n $ cmoddbBindMp db
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysF: Explicit name for SysF type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(SysfTy,SysfTyBind,SysfTyBound,SysfTySeq,SysfTySeq1)
%%[[(8 coresysf)
-- | SysF ty is also a Core term
type SysfTy         = CExpr         -- base ty
type SysfTyBind     = CBind         -- binder
type SysfTyBound    = CBound        -- to be bound by binder
%%][8
-- | If there is no SysF used, just the plain type (used during type check/infer)
type SysfTy         = Ty            -- base ty
type SysfTyBind     = Ty            -- binder
type SysfTyBound    = Ty            -- to be bound by binder
%%]]
type SysfTySeq      = SysfTy            -- sequence
type SysfTySeq1     = SysfTy            -- singleton
%%]

%%[(8 core coresysf) hs export(tyToSysfTyBasePlainCases)
-- | Simplistic (i.e. for simple types) conversion as conversion is mutually recursive with AbstractCore instance
tyToSysfTyBasePlainCases :: Ty -> SysfTy
tyToSysfTyBasePlainCases t
  = panicJust "tyToSysfTyBasePlainCases"
    $     (fmap (appCon . mkHNm) $ tyMbVar t)
      <|> appToApp t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SysF: The type representation used for AbstractCore
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs export(CTy,mkCTy,mkSTy,cty)
-- | In case of SysF isomorphic to Either 'old ty' 'sysf ty', to be chosen at a higher level
%%[[(8 coresysf)
data CTy
  = CTy_Ty      Ty          -- plain old ty
  | CTy_SysF    SysfTy      -- sysf ty
  deriving Show

-- | Make CTy from sysf ty
mkSTy :: SysfTy -> CTy
mkSTy = CTy_SysF
{-# INLINE mkSTy #-}

-- | Make CTy, choosing on the basis of options which one (plain old, or sysf)
mkCTy :: EHCOpts -> Ty -> SysfTy -> CTy
mkCTy o t sf | ehcOptCoreSysF o = CTy_SysF sf
             | otherwise        = CTy_Ty   t

-- | CTy fold            
cty :: (Ty -> x) -> (SysfTy -> x) -> CTy -> x
cty f _ (CTy_Ty   t) = f t
cty _ f (CTy_SysF t) = f t

%%][8
type CTy = Ty

-- | Make CTy, ignoring the second Ty arg, which is a dummy anyway
mkCTy :: EHCOpts -> Ty -> SysfTy -> CTy
mkCTy _ t _ = t
             
-- | Make CTy from sysf ty
mkSTy :: SysfTy -> CTy
mkSTy = id
{-# INLINE mkSTy #-}

-- | CTy fold, using the first 'f'         
cty :: (Ty -> x) -> (SysfTy -> x) -> CTy -> x
cty f _ t = f t

%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% AbstractCore instance
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs
instance AbstractCore CExpr CMetaVal CBind CBound ACoreAppLikeMetaBound CBindCateg CMetaBind CTy CPat CPatRest CPatFld CAlt where
  -- expr
  acore1AppBound   f a                  = CExpr_App f a
  -- acoreLam1Ty a _ e                  = CExpr_Lam (acoreBind1 a) e
  acoreLam1Bind b e                     = CExpr_Lam b e
  acoreTagTyTupBound   tg _ es          = acoreAppBound (CExpr_Tup tg) es
%%[[(8 coresysf)
  acoreBoundVal1CatLevMetasTy _ _ mlev _ (CTy_SysF t) e
                    | mlev > metaLevVal = acoreBound1MetaVal (acoreBoundmeta acbaspkeyDefault mlev CLbl_None) e
%%][8
%%]]
  acoreBoundVal1CatLevMetasTy _ _ _ m _ e
                                        = CBound_Bind m e
  acoreBoundmeta a m l                  = (a,m,l)
  acoreBound1MetaVal (a,m,l) e          = CBound_Val a m l e
%%[[(8 coresysf)
  acoreBoundValTy1CatLev _ _ mlev (CTy_SysF t)
                                        = acoreBound1MetaVal (acoreBoundmeta acbaspkeyDefault mlev CLbl_None) t
  acoreBoundValTy1CatLev _ _ _ (CTy_Ty t)
%%][8
  acoreBoundValTy1CatLev _ _ _ t
%%]]
                                        = CBound_Ty acbaspkeyDefaultTy t
  acoreBind1Asp n as                    = CBind_Bind n as
  acoreBind1CatLevMetasTy bcat n mlev mb t e
                                        = acoreBind1Asp n [acoreBoundValTy1CatLev bcat n (mlev+1) t, acoreBoundVal1CatLevMetasTy bcat n mlev mb t e]
  acoreLetBase                          = CExpr_Let
%%[[(8 coresysf)
  acoreCast (CTy_SysF t) e              = CExpr_Cast e t
  acoreCast _            e              =            e
%%][8
%%]]
  acoreCaseDflt e as d                  = CExpr_Case e as (maybe (acoreVar hsnUnknown) id d)
  acoreVar n                            = CExpr_Var (acoreMkRef n) 
  acoreStringTy _ i                     = CExpr_String i
  acoreCharTy _ i                       = CExpr_Char i
  acoreIntTy _ i                        = CExpr_Int i
  acoreIntTy2 _ i                       = CExpr_Int (fromInteger i)
%%[[8
  acoreUidHole                          = panic "Core.acoreUidHole"
%%][9
  acoreUidHole                          = CExpr_Hole
%%]
%%[[9
  acoreHoleLet                          = CExpr_HoleLet
%%]
  -- acoreDflt                              = 
  acoreExprErr                          = CExpr_Dbg

%%[[(8 coresysf)
  -- arrow
  acorem1Arr                            = CExpr_Arr
%%]]

  -- ty constants
  acoreTyBool o                         = acoreTy2ty o $ appCon (ehcOptBuiltin o ehbnDataBool)
  
  -- ty
  -- acoreTyInt2                            = tyInt
%%[[(8 coresysf)
  acoreTy2ty o x                        = mkCTy o x (tyToSysfTyBasePlainCases x)
%%][8
  acoreTy2ty _                          = id
%%]]

  -- pat
  acorePatVarTy n _                     = CPat_Var n
  acorePatCon                           = CPat_Con
  acorePatIntTy _ i                     = CPat_Int i
  acorePatIntTy2 _ i                    = CPat_Int (fromInteger i)
  acorePatCharTy _ i                    = CPat_Char i
%%[[97
  acorePatBoolExpr                      = CPat_BoolExpr
%%]]
  
  -- patfld
  acorePatFldBind (lbl,off) b           = CPatFld_Fld lbl off b []
  -- acorePatFldTy _ (lbl,off) n            = CPatFld_Fld lbl off n []

  -- patrest
  acorePatRestEmpty                     = CPatRest_Empty
  acorePatRestVar                       = CPatRest_Var

  -- alt
  acoreAlt                              = CAlt_Alt

  -- defaults
  acoreDfltBoundmeta                    = (acbaspkeyDefault,0,CLbl_None)
  acoreMetavalDflt                      = CMetaVal_Val
%%[[9
  acoreMetavalDfltDict                  = CMetaVal_Dict
%%]]
  acoreMetabindDflt                     = CMetaBind_Plain
  acoreTyErr s                          = acoreTy2ty emptyEHCOpts $ Ty_Dbg s
  acoreTyNone                           = acoreTyErr "Core.acoreTyNone"
  acoreTyChar o                         = acoreTy2ty o $ tyChar
  acoreTyInt o                          = acoreTy2ty o $ tyInt
%%[[8
  acoreTyString o                       = acoreTy2ty o $ tyString
%%][11
  acoreTyString o                       = acoreTy2ty o $ tyString o
%%]]
  
  -- bindcateg
  acoreBindcategRec                     = CBindCateg_Rec
  acoreBindcategStrict                  = CBindCateg_Strict
  acoreBindcategPlain                   = CBindCateg_Plain

  -- inspecting
  acoreExprMbApp (CExpr_App f b)        = Just (f,b)
  acoreExprMbApp _                      = Nothing

%%[[(8 coresysf)
  acoreExprMbArr (CExpr_Arr b e)        = Just (b,e)
  acoreExprMbArr _                      = Nothing
%%]]

  acoreExprMbLam (CExpr_Lam b e)        = Just (b,e)
  acoreExprMbLam _                      = Nothing

  acoreExprMbLet (CExpr_Let c b e)      = Just (c,b,e)
  acoreExprMbLet _                      = Nothing

  acoreExprMbVar (CExpr_Var r)          = Just (acbrefNm r)
  acoreExprMbVar _                      = Nothing

  acoreExprMbInt (CExpr_Int i)          = Just (acoreTyErr "Core.acoreExprMbInt",toInteger i)
  acoreExprMbInt _                      = Nothing

  acoreBindcategMbRec CBindCateg_Rec    = Just CBindCateg_Rec
  acoreBindcategMbRec _                 = Nothing

  acoreBindcategMbStrict CBindCateg_Strict  = Just CBindCateg_Strict
  acoreBindcategMbStrict _                  = Nothing

  acorePatMbCon (CPat_Con tg r fs)      = Just (tg,r,fs)
  acorePatMbCon _                       = Nothing

  acorePatMbInt (CPat_Int i)            = Just (acoreTyErr "Core.acorePatMbInt",toInteger i)
  acorePatMbInt _                       = Nothing

  acorePatMbChar (CPat_Char i)          = Just (acoreTyErr "Core.acorePatMbChar",i)
  acorePatMbChar _                      = Nothing

  acoreUnAlt (CAlt_Alt p e)             = (p,e)
  acoreUnPatFld (CPatFld_Fld l o b _)   = ((l,o),b)
  acoreUnBind (CBind_Bind n as)         = (n,as)

  acoreBoundMbVal (CBound_Val a m l e)  = Just ((a,m,l),e)
  acoreBoundMbVal _                     = Nothing

  -- coercion
%%[[8
  acoreCoeArg                           = panic "Core.acoreCoeArg"
  acoreExprIsCoeArg                     = const False
%%][9
  acoreCoeArg                           = CExpr_CoeArg
  acoreExprIsCoeArg                     = (== CExpr_CoeArg)
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Running Core: runtime references
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8888 corerun) hs export(RRef(..))
-- | Identifier references for use during running Core
data RRef
  = RRef_Glb		-- ^ global reference to module and its entry
      { rrefMod		:: !Int		-- ^ module
      , rrefEntry	:: !Int		-- ^ entry inside module
      }
  | RRef_Loc		-- ^ local reference to on stack value
      { rrefLev		:: !Int		-- ^ level
      , rrefEntry	:: !Int		-- ^ entry inside level
      }
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Instances: Binary, Serialize, ForceEval
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(50 core) hs
instance Serialize CModule where
  sput (CModule_Mod   a b c d) = {- sputWord8 0 >> -} sput a >> sput b >> sput c >> sput d
  sget
    = do {- t <- sgetWord8
         case t of
            0 -> -} liftM4 CModule_Mod         sget sget sget sget

instance Serialize CImport where
  sput (CImport_Import a  ) = {- sputWord8 0 >> -} sput a
  sget
    = do {- t <- sgetWord8
         case t of
            0 -> -} liftM   CImport_Import       sget

instance Serialize CDeclMeta where
  sput (CDeclMeta_Data   a b) = {- sputWord8 0 >> -} sput a >> sput b
  sget
    = do {- t <- sgetWord8
         case t of
            0 -> -} liftM2  CDeclMeta_Data         sget sget

instance Serialize CDataCon where
  sput (CDataCon_Con   a b c) = {- sputWord8 0 >> -} sput a >> sput b >> sput c
  sget
    = do {- t <- sgetWord8
         case t of
            0 -> -} liftM3  CDataCon_Con         sget sget sget

instance Serialize CExpr where
  sput (CExpr_Let       a b c       ) = sputWord8  0 >> sput a >> sput b >> sput c
  sput (CExpr_App       a b         ) = sputWord8  1 >> sput a >> sput b
  sput (CExpr_Lam       a b         ) = sputWord8  2 >> sput a >> sput b
  sput (CExpr_Case      a b c       ) = sputWord8  3 >> sput a >> sput b >> sput c
  sput (CExpr_Var       a           ) = sputWord8  4 >> sput a
  sput (CExpr_Int       a           ) = sputWord8  5 >> sput a
  sput (CExpr_Char      a           ) = sputWord8  6 >> sput a
  sput (CExpr_String    a           ) = sputWord8  7 >> sput a
  sput (CExpr_Tup       a           ) = sputWord8  8 >> sput a
  sput (CExpr_TupDel    a b c d     ) = sputWord8  9 >> sput a >> sput b >> sput c >> sput d
  sput (CExpr_TupIns    a b c d e   ) = sputWord8 10 >> sput a >> sput b >> sput c >> sput d >> sput e
  sput (CExpr_TupUpd    a b c d e   ) = sputWord8 11 >> sput a >> sput b >> sput c >> sput d >> sput e
  sput (CExpr_CaseAltFail
                        a b         ) = sputWord8 12 >> sput a >> sput b
  sput (CExpr_Hole      a           ) = sputWord8 13 >> sput a
  sput (CExpr_HoleLet   a b         ) = sputWord8 14 >> sput a >> sput b
  sput (CExpr_ImplsApp  a b         ) = sputWord8 15 >> sput a >> sput b
  sput (CExpr_ImplsLam  a b         ) = sputWord8 16 >> sput a >> sput b
  sput (CExpr_CoeArg                ) = sputWord8 17
%%[[97
  sput (CExpr_Integer   a           ) = sputWord8 18 >> sput a
%%]]
  sput (CExpr_Ann       a b         ) = sputWord8 19 >> sput a >> sput b
  sput (CExpr_FFI       a b c d     ) = sputWord8 20 >> sput a >> sput b >> sput c >> sput d
  sput (CExpr_Dbg       a           ) = sputWord8 21 >> sput a
%%[[(50 coresysf)
  sput (CExpr_Arr       a b         ) = sputWord8 22 >> sput a >> sput b
  sput (CExpr_Cast      a b         ) = sputWord8 23 >> sput a >> sput b
%%]]
  sget
    = do t <- sgetWord8
         case t of
           0  -> liftM3 CExpr_Let           sget sget sget
           1  -> liftM2 CExpr_App           sget sget
           2  -> liftM2 CExpr_Lam           sget sget
           3  -> liftM3 CExpr_Case          sget sget sget
           4  -> liftM  CExpr_Var           sget
           5  -> liftM  CExpr_Int           sget
           6  -> liftM  CExpr_Char          sget
           7  -> liftM  CExpr_String        sget
           8  -> liftM  CExpr_Tup           sget
           9  -> liftM4 CExpr_TupDel        sget sget sget sget
           10 -> liftM5 CExpr_TupIns        sget sget sget sget sget
           11 -> liftM5 CExpr_TupUpd        sget sget sget sget sget
           12 -> liftM2 CExpr_CaseAltFail   sget sget
           13 -> liftM  CExpr_Hole          sget
           14 -> liftM2 CExpr_HoleLet       sget sget
           15 -> liftM2 CExpr_ImplsApp      sget sget
           16 -> liftM2 CExpr_ImplsLam      sget sget
           17 -> return CExpr_CoeArg    
%%[[97
           18 -> liftM  CExpr_Integer       sget
%%]]
           19 -> liftM2 CExpr_Ann           sget sget
           20 -> liftM4 CExpr_FFI           sget sget sget sget
           21 -> liftM  CExpr_Dbg           sget
%%[[(50 coresysf)
           22 -> liftM2 CExpr_Arr           sget sget
           23 -> liftM2 CExpr_Cast          sget sget
%%]]

instance Serialize CMetaVal where
  sput (CMetaVal_Val                ) = sputWord8 0
  sput (CMetaVal_Dict               ) = sputWord8 1
  sput (CMetaVal_DictClass      a   ) = sputWord8 2 >> sput a
  sput (CMetaVal_DictInstance   a   ) = sputWord8 3 >> sput a
  sput (CMetaVal_Track          a   ) = sputWord8 4 >> sput a
  sget
    = do t <- sgetWord8
         case t of
            0 -> return CMetaVal_Val                    
            1 -> return CMetaVal_Dict
            2 -> liftM  CMetaVal_DictClass          sget
            3 -> liftM  CMetaVal_DictInstance       sget
            4 -> liftM  CMetaVal_Track              sget

instance Serialize CExprAnn where
  sput (CExprAnn_Ty    a) = sputWord8 0 >> sput a
  sput (CExprAnn_Coe   a) = sputWord8 1 >> sput a
  sput (CExprAnn_Debug _) = sputWord8 2
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM  CExprAnn_Ty         sget            
            1 -> liftM  CExprAnn_Coe        sget            
            2 -> return (CExprAnn_Debug     "")

instance Serialize CBindAnn where
  sput (CBindAnn_Coe   a) = sputWord8 0 >> sput a
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM  CBindAnn_Coe         sget            

instance Serialize CBound where
  sput (CBound_Bind     a b      ) = sputWord8 0 >> sput a >> sput b
  -- sput (CBound_FFI   a b c d  ) = sputWord8 1 >> sput a >> sput b >> sput c >> sput d
%%[[90
  sput (CBound_FFE      a b c d  ) = sputWord8 2 >> sput a >> sput b >> sput c >> sput d
%%]]
  sput (CBound_RelevTy a b      ) = sputWord8 3 >> sput a >> sput b
  sput (CBound_Meta    a b      ) = sputWord8 4 >> sput a >> sput b
  sput (CBound_Val     a b c d  ) = sputWord8 5 >> sput a >> sput b >> sput c >> sput d
  sput (CBound_Ty      a b      ) = sputWord8 6 >> sput a >> sput b
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM2 CBound_Bind          sget sget
            -- 1 -> liftM4 CBound_FFI           sget sget sget sget
%%[[90           
            2 -> liftM4 CBound_FFE           sget sget sget sget
%%]]
            3 -> liftM2 CBound_RelevTy       sget sget
            4 -> liftM2 CBound_Meta          sget sget
            5 -> liftM4 CBound_Val           sget sget sget sget
            6 -> liftM2 CBound_Ty            sget sget

instance Serialize CBind where
  sput (CBind_Bind a b      ) = {- sputWord8 0 >> -} sput a >> sput b
  sget
    = do {- t <- sgetWord8
         case t of
            0 -> -} liftM2 CBind_Bind          sget sget

instance Serialize CAlt where
  sput (CAlt_Alt   a b      ) = {- sputWord8 0 >> -} sput a >> sput b
  sget
    = do {- t <- sgetWord8
         case t of
            0 -> -} liftM2 CAlt_Alt         sget sget         

instance Serialize CPat where
  sput (CPat_Var       a        ) = sputWord8 0 >> sput a
  sput (CPat_Con       a b c    ) = sputWord8 1 >> sput a >> sput b >> sput c
  sput (CPat_Int       a        ) = sputWord8 2 >> sput a
  sput (CPat_Char      a        ) = sputWord8 3 >> sput a
%%[[97
  sput (CPat_BoolExpr  a        ) = sputWord8 4 >> sput a
%%]]
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM  CPat_Var         sget         
            1 -> liftM3 CPat_Con         sget sget sget      
            2 -> liftM  CPat_Int         sget         
            3 -> liftM  CPat_Char        sget         
%%[[97
            4 -> liftM  CPat_BoolExpr    sget         
%%]]

instance Serialize CPatRest where
  sput (CPatRest_Var   a        ) = sputWord8 0 >> sput a
  sput (CPatRest_Empty          ) = sputWord8 1
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM  CPatRest_Var           sget         
            1 -> return CPatRest_Empty  

instance Serialize CPatFld where
  sput (CPatFld_Fld   a b c d ) = {- sputWord8 0 >> -} sput a >> sput b >> sput c >> sput d
  sget
    = do {- t <- sgetWord8
         case t of
            0 -> -} liftM4 CPatFld_Fld         sget sget sget sget

instance Serialize CBindCateg where
  sput = sputEnum8
  sget = sgetEnum8

instance Serialize CMetaBind where
  sput = sputEnum8
  sget = sgetEnum8
%%]

