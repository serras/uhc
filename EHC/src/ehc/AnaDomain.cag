%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[doesWhat doclatex
Analysis domains
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to AnaDomain
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}AnaDomain} import({%{EH}Base.HsName.Builtin},{%{EH}Base.Common},{%{EH}Opts.Base},{%{EH}VarMp})
%%]

%%[(8 codegen) hs import(qualified Data.Map as Map,qualified Data.Set as Set, Data.List, Data.Maybe)
%%]
%%[(8 codegen) hs import(Control.Monad.State, Control.Applicative)
%%]
%%[(8 codegen) hs import(UHC.Util.Utils)
%%]

%%[(8 codegen) hs export(QualAGItf(..), TyAGItf(..), CoeAGItf(..)) 
%%]
%%[(8 codegen) hs export(AnaEval(..), AnaEvalL, RelevTy(..), RelevTyL, MbRelevTy, RelevQual(..), RelevQualL, RelevCoe(..), RelevCoeL) 
%%]

%%[(50 codegen) hs import(Control.Monad hiding(join), UHC.Util.Serialize, UHC.Util.Control.Monad(liftM6))
%%]
%%[(50 codegen) hs import(Data.Typeable(Typeable), Data.Generics(Data))
%%]

%%[(8 codegen) ag import({AnaDomain/AbsSyn})
DERIVING *
  : Show
%%[[50
  , Typeable, Data
%%]]

DERIVING *
  : Eq, Ord
%%]

-- debug only
%%[(8 codegen) hs import({%{EH}Base.Debug},UHC.Util.Pretty)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional types
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(RQuant(..))
-- | quantifier for RelevTy_Fun
data RQuant
  = RQuant_Forall		-- the usual universal instantiation
  | RQuant_Rec			-- quantified for mutual recursive use, instantiates differently
  | RQuant_None			-- not quantified
  deriving
    ( Eq, Ord, Enum
%%[[50
    , Typeable, Data
%%]]
    )
%%]

%%[(8 codegen) hs
instance Show RQuant where
  show RQuant_Forall 	= "A"
  show RQuant_Rec 		= "R"
  show RQuant_None    	= ""
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Derived types, functions, ...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(RelevQualS)
type RelevQualS = Set.Set RelevQual
%%]

%%[(8 codegen) hs export((<.>))
infixl 3 `RelevCoe_Comp`
infixl 3 <.>

-- | smart variant of RelevCoe_Comp
(<.>) :: RelevCoe -> RelevCoe -> RelevCoe
RelevCoe_Id           <.> r                   = r
l                     <.> RelevCoe_Id         = l
RelevCoe_Eval   ll lr <.> RelevCoe_Eval rl rr
  | lr == rl                                  = RelevCoe_Eval ll rr
RelevCoe_CastTy ll (RelevTy_Ana lr)
                      <.> RelevCoe_Eval rl rr
  | lr == rl                                  = RelevCoe_CastTy ll (RelevTy_Ana rr)
l                     <.> RelevCoe_Comp rl rr = (l <.> rl) `RelevCoe_Comp` rr
RelevCoe_Comp   ll lr <.> r                   = ll `RelevCoe_Comp` (lr <.> r)
l                     <.> r                   = RelevCoe_Comp l r
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Extraction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(relevtyAnaEval)
relevtyAnaEval (RelevTy_Ana e) = e
relevtyAnaEval _               = panic "AnaDomain.relevtyAnaEval"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8888 codegen) hs
data AnaEnv
  = AnaEnv
      { aenvBoundS  :: !UIDS
      }

emptyAnaEnv :: AnaEnv
emptyAnaEnv = AnaEnv Set.empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Lattices (should be in separate module)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(AnaLattice(..))
class AnaLattice a where
  top   :: a
  bot   :: a
  
  isTop :: a -> Bool
  isBot :: a -> Bool
  isVar :: a -> Maybe UID
  
  fresh :: UID -> a
  
  meetl  :: a -> a -> AMS (Maybe a)
  joinl  :: a -> a -> AMS (Maybe a)
  
  -- base <= base
  leBB_l :: a -> a -> AMS (AMSOut a)
  leBB_r :: a -> a -> AMS (AMSOut a)
  leBB_l = leBB
  leBB_r = leBB

  -- base <= base
  leBB :: a -> a -> AMS (AMSOut a)
  leBB = leBB_l

  -- base <= fun, default compares to fun result
  leBF :: a -> [a] -> a -> AMS (AMSOut a)
  leBF b fa fr = leBB b fr
%%]

%%[(8 codegen) hs
-- | wrap action inside var looking up
anaVar
  :: AnaLattice x
     => (UID -> AnaMatchState -> Maybe x)       -- lookup
     -> res                          			-- when vars are equal anyway
     -> (x -> AMS res)                          -- when var found
     -> (x -> x -> AMS res)                     -- when var is not found
     -> UID -> x -> x
     -> AMS res
anaVar lkupVar dflt found notfound v1 a1 a2
  = do { s <- get
       ; let isV2@(~(Just v2)) = isVar a2
       ; if isJust isV2 && v1 == v2
         then return dflt
         else case lkupVar v1 s of
                Just a1' -> found    a1'
                _        -> notfound a1 a2
       }

anaBind
  :: (UID -> x -> RVarMp)
     -> (x -> res)
     -> UID -> x
     -> AMS res
anaBind mkVM mkRes v1 a2
  = do { s <- get
       ; put (amsBind (mkVM v1) a2 s)
       ; return $ mkRes a2
       }
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Lattice instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
instance AnaLattice AnaEval where
  top   = AnaEval_Lazy
  bot   = AnaEval_WHNF

  isTop AnaEval_Lazy = True
  isTop _            = False

  isBot AnaEval_WHNF = True
  isBot _            = False

  isVar (AnaEval_Var v) = Just v
  isVar _               = Nothing

  fresh = AnaEval_Var

  meetl a1@(AnaEval_Var v1) a2              = anaVar amsLookupEval (Just a1) (meetl a2) anaEvalMeet v1 a1 a2
  meetl a1 a2@(AnaEval_Var v2)              = anaVar amsLookupEval (Just a1) (meetl a1) anaEvalMeet v2 a2 a1
  meetl a1 a2                               = anaEvalMeet a1 a2

  joinl a1@(AnaEval_Var v1) a2              = anaVar amsLookupEval (Just a1) (joinl a2) anaEvalJoin v1 a1 a2
  joinl a1 a2@(AnaEval_Var v2)              = anaVar amsLookupEval (Just a1) (joinl a1) anaEvalJoin v2 a2 a1
  joinl a1 a2                               = anaEvalJoin a1 a2
  
  leBB_l a1@(AnaEval_Var v1) a2             = anaVar amsLookupEval (amsoMkOk a1 a1 $ RelevCoe_Eval a1 a1) (flip leBB_l a2)       leBB_r     v1 a1 a2
  leBB_l a1 a2                              = leBB_r a1 a2
  leBB_r a1 a2@(AnaEval_Var v2)             = anaVar amsLookupEval (amsoMkOk a1 a1 $ RelevCoe_Eval a1 a1) (     leBB_r a1) (flip anaEvalLE) v2 a2 a1
  leBB_r a1 a2                              = anaEvalLE a1 a2

%%]
  leBB_l a1@(AnaEval_Var v1) a2             = do ams <- anaVar amsLookupEval (amsoMkOk a1 a1 $ RelevCoe_Eval a1 a1) (flip leBB_l a2)       leBB_r     v1 a1 a2
                                                 s <- get 
                                                 return $ tr "AnaEval.leBB.L" (pp $ show a1 ++ ", " ++ show a2 ++ ", " ++ show ams ++ ", " ++ show s) $ ams
  leBB_l a1 a2                              = leBB_r a1 a2
  leBB_r a1 a2@(AnaEval_Var v2)             = do ams <- anaVar amsLookupEval (amsoMkOk a1 a1 $ RelevCoe_Eval a1 a1) (     leBB_r a1) (flip anaEvalLE) v2 a2 a1
                                                 s <- get 
                                                 return $ tr "AnaEval.leBB.R" (pp $ show a1 ++ ", " ++ show a2 ++ ", " ++ show ams ++ ", " ++ show s) $ ams
  leBB_r a1 a2                              = anaEvalLE a1 a2

  leBB a1@(AnaEval_Var v1) a2               = anaVar amsLookupEval (amsoMkOk a1 a1 $ RelevCoe_Eval a1 a1) (flip leBB a2)       anaEvalLE  v1 a1 a2
  leBB a1 a2@(AnaEval_Var v2)               = anaVar amsLookupEval (amsoMkOk a1 a1 $ RelevCoe_Eval a1 a1) (     leBB a1) (flip anaEvalLE) v2 a2 a1
  leBB a1 a2                                = anaEvalLE a1 a2


%%[8 hs
-- | meet or join for 2 element lattice (only bot+top), nothing in between
anaMeetOrJoin
  :: AnaLattice x
     => (UID -> x -> RVarMp)		-- make var mapping (subst)
     -> Bool						-- is meet (True) or join (False)
     -> x -> x
     -> AMS (Maybe x)
anaMeetOrJoin mkVM isM a1 a2
  = mt False a1 a2
  where mt flip a1 a2
          | isB && isM  = return $ Just a1
          | isB         = return $ Just a2
          | isT && isM  = return $ Just a2
          | isT         = return $ Just a1
          | not flip    = mt True a2 a1
          | isJust m1 && isJust m2
                        = do { s <- get
                             ; let bound = amsBoundS s
                             ;      if not (v1 `Set.member` bound) then bind v1 a2
                               else if not (v2 `Set.member` bound) then bind v2 a1
                               else return Nothing
                             }
          | otherwise   = return Nothing
                        where m1@(~(Just v1)) = isVar a1
                              m2@(~(Just v2)) = isVar a2
                              -- areV = isJust m1 && isJust m2
                              isB  = isBot a1
                              isT  = isTop a1
        bind = anaBind mkVM Just

-- | meet, join, specialized for AnaEval
anaEvalMeet, anaEvalJoin :: AnaEval -> AnaEval -> AMS (Maybe AnaEval)
anaEvalMeet = anaMeetOrJoin rvarmpEvalUnit True
anaEvalJoin = anaMeetOrJoin rvarmpEvalUnit False

anaEvalLE :: AnaEval -> AnaEval -> AMS (AMSOut AnaEval)
anaEvalLE a1 a2
  = le a1 a2
  where le a1@(AnaEval_Var v1) a2@(AnaEval_WHNF  )   = bind  v1 a2                        -- can't get lower than bot
        le a1@(AnaEval_Var v1) a2                    = delay a1 a2                        -- rest is delayed
        le a1@(AnaEval_Lazy  ) a2@(AnaEval_Var v2)   = bind  v2 a1                        -- can't get higher than top
        le a1                  a2@(AnaEval_Var v2)   = delay a1 a2                        -- rest is delayed
        le a1@(AnaEval_WHNF  ) a2@(AnaEval_WHNF  )   = return $ amsoMkOk a1 a2 (RelevCoe_Eval a1 a2)
        le a1@(AnaEval_WHNF  ) a2@(AnaEval_Lazy  )   = coe   a1 a2                        -- forget that it is alreay evaluated
        le a1@(AnaEval_Lazy  ) a2@(AnaEval_Lazy  )   = return $ amsoMkOk a1 a2 (RelevCoe_Eval a1 a2)
        le a1@(AnaEval_Lazy  ) a2@(AnaEval_WHNF  )   = coe' RelevCoe_Cast a1 a2           -- permitted, but not without marking as casting required, according to lattice
        le a1                  a2                    = return $ amsoMkFail -- Ok a1 a2 (RelevCoe_Err "anaEvalLE")

        bind = anaBind rvarmpEvalUnit (\a2 -> amsoMkOk a2 a2 $ RelevCoe_Eval a2 a2)
        
        -- | coerce
        coe' wrap l h = return $ amsoMkOk l h (RelevCoe_Eval l h)
        coe = coe' id
        
        -- | postpone by generating a qualification, to be solved later, or to end up in a signature
        delay l h
          = do { s <- get
               ; put (amsQual (RelevQual_SubEval l h) s)
               ; return $ amsoMkOk l h (RelevCoe_Eval l h)
               }
%%]

%%[8 hs
-- | Only valid for RelevTy_Ana as aggregrate of domains
instance AnaLattice RelevTy where
  top       = RelevTy_Ana top
  bot       = RelevTy_Ana bot

  isTop (RelevTy_Ana a1) = isTop a1
  isBot (RelevTy_Ana a1) = isBot a1
  isVar _                = Nothing
  -- isVar (RelevTy_Ana a1) = do { v1 <- isVar a1 ; return v1 }

  fresh u   = RelevTy_Ana (fresh u1)
            where (_,u1) = mkNewLevUID u

  meetl  (RelevTy_Ana a11) (RelevTy_Ana a21) = liftM (fmap RelevTy_Ana) (meetl  a11 a21)
  meetl  _                 _                 = return Nothing

  joinl  (RelevTy_Ana a11) (RelevTy_Ana a21) = liftM (fmap RelevTy_Ana) (joinl  a11 a21)
  joinl  _                 _                 = return Nothing

  leBB  (RelevTy_Ana a11) (RelevTy_Ana a21) = do { AMSOut l h c True <- leBB a11 a21
                                                 ; return $ amsoMkOk (RelevTy_Ana l) (RelevTy_Ana h) c
                                                 }
  leBB  (RelevTy_Fun _ _ _ a1 r1) (RelevTy_Fun _ _ _ a2 r2)
                                            = do { r_amso <- leBB r1 r2
                                                 ; a_amso <- mapM (uncurry leBB) (zip a2 a1)
                                                 ; return $ amsoMk (RelevTy_Fun  RQuant_None [] [] (map amsoHi  a_amso) (amsoLo  r_amso))
                                                                   (RelevTy_Fun  RQuant_None [] [] (map amsoLo  a_amso) (amsoHi  r_amso))
                                                                   (RelevCoe_Fun                   (map amsoCoe a_amso) (amsoCoe r_amso))
                                                                   (and $ amsoIsOk r_amso : map amsoIsOk a_amso)
                                                 }
  -- others lead to a constraint between t1 and function result, with a coercion between t1 and whole function t2
  -- Note: this has to be delegated to actual AnaDomain...
  {-
  leBB  t1 t2@(RelevTy_Fun _ _ a2 r2)
                                            = do { f_amso <- leBF t1 a2 r2
                                                 ; let t1' = anaMkBotFun (length a2)
                                                 ; return $ AMSOut (RelevTy_Fun  [] [] (map amsoHi  a_amso) (amsoLo  r_amso))
                                                                   (RelevTy_Fun  [] [] (map amsoLo  a_amso) (amsoHi  r_amso))
                                                                   (RelevCoe_Fun       (map amsoCoe a_amso) (amsoCoe r_amso))
                                                 }
  -}
  leBB  _                 _                 = return $ amsoMkFail -- Ok (RelevTy_Err "leBB.lo") (RelevTy_Err "leBB.hi") (RelevCoe_Err "leBB")

  {-
  leBB  (RelevTy_Ana a11) (RelevTy_Ana a21) = do { AMSOut l h c <- leBB a11 a21
                                                 ; return $ AMSOut (RelevTy_Ana l) (RelevTy_Ana h) c
                                                 }
  leBB  _                 _                 = return $ AMSOut (RelevTy_Err "leBB.lo") (RelevTy_Err "leBB.hi") (RelevCoe_Err "leBB")
  -}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Special values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(freshStrict,freshLazy)
-- | bottom only for AnaEval lattice, otherwise fresh
freshStrict :: UID -> RelevTy
freshStrict u
  = case fresh u of
      RelevTy_Ana _ -> RelevTy_Ana bot

-- | top only for AnaEval lattice, otherwise fresh
freshLazy :: UID -> RelevTy
freshLazy u
  = case fresh u of
      RelevTy_Ana _ -> RelevTy_Ana top
%%]

%%[(8888 codegen) hs export(freshFromAnn)
-- | convert from Strictness
freshFromAnn :: UID -> Strictness -> RelevTy
freshFromAnn u s
  = case s of
      Strictness_Strict -> freshStrict u
      _                 -> fresh       u
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(anaMkBotFun)
-- | construct 'worst case' assuming function signature, where we assume function assumes nothing and we cannot assume anything about result, except for the result being bottom (i.e. strict)
anaMkBotFun :: Int -> RelevTy
anaMkBotFun arity = RelevTy_Fun RQuant_None [] [] (replicate arity top) bot
%%]

%%[(8 codegen) hs export(relevCoeUnCompose)
-- | decompose RelevCoe composition in top and below
relevCoeUnCompose :: RelevCoe -> (RelevCoe,[RelevCoe])
relevCoeUnCompose (RelevCoe_Comp l r)
  = (l, u r)
  where u (RelevCoe_Comp l r) = l : u r
        u c                   = [c]
relevCoeUnCompose c = (c, [])
%%]

%%[(8 codegen) hs export(relevCoeToComposeList)
-- | decompose RelevCoe composition in list of subsequently applied coe's
relevCoeToComposeList :: RelevCoe -> [RelevCoe]
relevCoeToComposeList c
  = u [] c
  where u a (RelevCoe_Comp l r) = let a' = u a r in u a' l
        u a c                   = [c] ++ a
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils: subst
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(RVarMpInfo(..))
data RVarMpInfo             -- for all types of Var alternatives an alternative here
  = RVMIEval    AnaEval
%%]

%%[(8 codegen) hs export(rvmiMbEval)
rvmiMbEval :: RVarMpInfo -> Maybe AnaEval
rvmiMbEval (RVMIEval x) = Just x
-- for now, until more alternatives are in it
-- rvmiMbEval _            = Nothing
%%]

%%[(8 codegen) hs export(RVarMp, emptyRVarMp)
type RVarMp  = VarMpStk' UID RVarMpInfo

emptyRVarMp :: RVarMp
emptyRVarMp = emptyVarMpStk
%%]

%%[(8 codegen) hs export(rvarmpEvalUnit)
rvarmpEvalUnit :: UID -> AnaEval -> RVarMp
-- poor mens occurcheck...
-- rvarmpEvalUnit v (AnaEval_Var v2) | v == v2  = emptyRVarMp
rvarmpEvalUnit v i                           = varmpstkUnit v (RVMIEval i)  -- [mkVarMp (Map.fromList [(v,RVMIEval i)])]
%%]

%%[(8 codegen) hs export(rvarmpKeysSet, rvarmpUnions)
-- | renaming
rvarmpKeysSet :: RVarMp -> Set.Set UID
rvarmpKeysSet = varmpstkKeysSet

rvarmpUnions :: [RVarMp] -> RVarMp
rvarmpUnions = varmpstkUnions
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils: matching
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(AnaMatchState(..), AMS, emptyAnaMatchState)
-- | state maintained during matching
data AnaMatchState
  = AnaMatchState
      { amsBoundS           :: !UIDS        -- vars which are already bound
      , amsOuterVarMp       :: !RVarMp      -- as known from outside matching
      , amsLocalVarMp       :: !RVarMp      -- as gathered during a match (1 invocation of runState)
      , amsGathQual         :: !RelevQualS  -- gathered constraints
      }

type AMS    a = State AnaMatchState a

emptyAnaMatchState :: AnaMatchState
emptyAnaMatchState = AnaMatchState Set.empty emptyRVarMp emptyRVarMp Set.empty

instance Show AnaMatchState where
  show x = "AMS " ++ s (amsOuterVarMp x) ++ s (amsLocalVarMp x)
    where s m = show (assocLMapElt rvmiMbEval $ varmpstkToAssocL m)
%%]

%%[(8 codegen) hs export(AMSOut(..),emptyAMSOut,amsoMkOk)
-- | direct (non state) output of matching
data AMSOut a
  = AMSOut
      { amsoLo      :: a
      , amsoHi      :: a
      , amsoCoe     :: RelevCoe
      , amsoIsOk	:: Bool
      }

emptyAMSOut :: AnaLattice a => AMSOut a
emptyAMSOut = AMSOut bot top RelevCoe_Id True

amsoMk :: a -> a -> RelevCoe -> Bool -> AMSOut a
amsoMk l h c ok = AMSOut l h c ok

amsoMkOk :: a -> a -> RelevCoe -> AMSOut a
amsoMkOk l h c = amsoMk l h c True

amsoMkFail :: AnaLattice a => AMSOut a
amsoMkFail = emptyAMSOut {amsoIsOk = False}

instance Show a => Show (AMSOut a) where
  show x = "AMSOut (" ++ show (amsoLo x) ++ " <= " ++ show (amsoHi x) ++ ")"
%%]

%%[(8 codegen) hs
amsBind :: (x -> RVarMp) -> x -> AnaMatchState -> AnaMatchState
amsBind b a s = s {amsLocalVarMp = b a |+> amsLocalVarMp s}

amsQual :: RelevQual -> AnaMatchState -> AnaMatchState
amsQual q s = s {amsGathQual = Set.insert q (amsGathQual s)}
%%]

%%[(8 codegen) hs export(amsLE,amsRunMb)
-- | run leBB
amsLE :: AnaLattice x => RVarMp -> x -> x -> (AMSOut x,AnaMatchState)
amsLE m x1 x2 = runState (leBB x1 x2) (emptyAnaMatchState {amsOuterVarMp = m})

-- | run a Maybe returning AMS
amsRunMb :: AnaMatchState -> AMS (Maybe x) -> Maybe (x,AnaMatchState)
amsRunMb s ams
  = case runState ams s of
      (Just x, s) -> Just (x,s)
      _           -> Nothing
%%]

%%[(8 codegen) hs
-- | Lookup in VarMp's of AnaMatchState
amsLookup :: UID -> AnaMatchState -> Maybe RVarMpInfo
amsLookup i s = varmpLookup i (amsOuterVarMp s) <|> varmpLookup i (amsLocalVarMp s)

amsLookupEval :: UID -> AnaMatchState -> Maybe AnaEval
amsLookupEval i s = do { i <- amsLookup i s ; rvmiMbEval i }
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Instances: Binary, Serialize
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(50 codegen) hs
instance Serialize RQuant where
  sput = sputEnum8
  sget = sgetEnum8

instance Serialize RelevQual where
  sput (RelevQual_SubEval a b        ) = sputWord8 0 >> sput a >> sput b
  -- sput (RelevQual_Alt     a b c d e f) = sputWord8 1 >> sput a >> sput b >> sput c >> sput d >> sput e >> sput f
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM2 RelevQual_SubEval         sget sget
            -- 1 -> liftM6 RelevQual_Alt             sget sget sget sget sget sget

instance Serialize RelevTy where
  sput (RelevTy_Ana   a        ) = sputWord8 0 >> sput a
  sput (RelevTy_Fun   a b c d e) = sputWord8 1 >> sput a >> sput b >> sput c >> sput d >> sput e
  sput (RelevTy_None           ) = sputWord8 2
  sput (RelevTy_Err   a        ) = sputWord8 3 >> sput a
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM  RelevTy_Ana         sget
            1 -> liftM5 RelevTy_Fun         sget sget sget sget sget
            2 -> return RelevTy_None
            3 -> liftM  RelevTy_Err         sget

instance Serialize RelevCoe where
  sput (RelevCoe_Id             ) = sputWord8 0
  sput (RelevCoe_Err     a      ) = sputWord8 1 >> sput a
  sput (RelevCoe_Comp    a b    ) = sputWord8 2 >> sput a >> sput b
  sput (RelevCoe_Fun     a b    ) = sputWord8 3 >> sput a >> sput b
  sput (RelevCoe_Cast    a      ) = sputWord8 4 >> sput a
  sput (RelevCoe_Eval    a b    ) = sputWord8 5 >> sput a >> sput b
  sput (RelevCoe_CastTy  a b    ) = sputWord8 6 >> sput a >> sput b
  sget
    = do t <- sgetWord8
         case t of
            0 -> return RelevCoe_Id
            1 -> liftM  RelevCoe_Err         sget
            2 -> liftM2 RelevCoe_Comp        sget sget
            3 -> liftM2 RelevCoe_Fun         sget sget
            4 -> liftM  RelevCoe_Cast        sget
            5 -> liftM2 RelevCoe_Eval        sget sget
            6 -> liftM2 RelevCoe_CastTy      sget sget

instance Serialize AnaEval where
  sput (AnaEval_Var   a      ) = sputWord8 0 >> sput a
  sput (AnaEval_WHNF         ) = sputWord8 1
  sput (AnaEval_Lazy         ) = sputWord8 2
  sput (AnaEval_Meet  a      ) = sputWord8 3 >> sput a
  sput (AnaEval_Join  a      ) = sputWord8 4 >> sput a
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM  AnaEval_Var         sget
            1 -> return AnaEval_WHNF         
            2 -> return AnaEval_Lazy         
            3 -> liftM  AnaEval_Meet        sget
            4 -> liftM  AnaEval_Join        sget

%%]
