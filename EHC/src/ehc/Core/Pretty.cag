%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[doesWhat doclatex
Note (20120525): lamMp use removed because of cyclic module import
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Core Pretty Printer
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 coreout) hs module {%{EH}Core.Pretty} import(UHC.Util.Pretty,{%{EH}Base.HsName.Builtin},{%{EH}Base.CfgPP},{%{EH}Opts.Base},{%{EH}Base.Common},{%{EH}Ty},{%{EH}Core},{%{EH}Scanner.Common(coreScanOpts)})
%%]
%%[(8 coreout) hs import({%{EH}Ty.Pretty})
%%]

%%[(8 coreout) hs import({%{EH}AnaDomain.Pretty})
%%]
%%[(8888 coreout) hs import({%{EH}LamInfo})
%%]

%%[(8 coreout) hs import(qualified Data.Map as Map,qualified Data.Set as Set)
%%]

%%[(90 coreout) hs import({%{EH}Foreign.Pretty})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 coreout).WRAPPER ag import({Core/AbsSyn},{Core/CommonBindNm},{Core/CommonMetaLev})
WRAPPER
  CodeAGItf CExpr CBound
%%[[(8 coresysf)
  CBind
%%]]
%%[[9
  CMetas
%%]]
%%]

%%[(8 coreout) hs export(ppCModule)
ppCModule :: EHCOpts -> {- LamMp -> -} CModule -> PP_Doc
ppCModule opts {- lamMp -} cmod
  =  let  t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod))
                             (Inh_CodeAGItf
                               { {- lamMp_Inh_CodeAGItf = lamMp
                               , -} opts_Inh_CodeAGItf = opts
                               })
     in   (pp_Syn_CodeAGItf t)

ppCExpr :: CExpr -> PP_Doc
ppCExpr ce
  =  let  t = wrap_CExpr (sem_CExpr ce)
                         (Inh_CExpr
                            { varPPMp_Inh_CExpr = Map.empty
                            -- , lamMp_Inh_CExpr = Map.empty
                            , ppHow_Inh_CExpr = howHor
                            , opts_Inh_CExpr = emptyEHCOpts
                            , mlev_Inh_CExpr = metaLevVal
                            })
     in   (pp_Syn_CExpr t)

ppCBound :: CBound -> PP_Doc
ppCBound ce
  =  let  t = wrap_CBound (sem_CBound ce)
                          (Inh_CBound
                            { varPPMp_Inh_CBound = Map.empty
                            -- , lamMp_Inh_CBound = Map.empty
                            , ppHow_Inh_CBound = howHor
                            , opts_Inh_CBound = emptyEHCOpts
                            , nm_Inh_CBound = hsnUnknown
                            , minMetaLev_Inh_CBound = metaLevVal -- gathMinMetaLev_Syn_CBound t
                            , mlev_Inh_CBound = metaLevVal -- gathMinMetaLev_Syn_CBound t
                            })
     in   (pp_Syn_CBound t)

instance PP CBound where
  pp = ppCBound

instance PP CExpr where
  pp = ppCExpr
%%]

%%[(8 coresysf) hs
ppCBind :: CBind -> PP_Doc
ppCBind ce
  =  let  t = wrap_CBind (sem_CBind ce)
                         (Inh_CBind
                            { varPPMp_Inh_CBind = Map.empty
                            -- , lamMp_Inh_CBind = Map.empty
                            , ppHow_Inh_CBind = howHor
                            , opts_Inh_CBind = emptyEHCOpts
                            , minMetaLev_Inh_CBind = metaLevVal -- gathMinMetaLev_Syn_CBind t
                            , mlev_Inh_CBind = metaLevVal -- gathMinMetaLev_Syn_CBind t
                            })
     in   (pp_Syn_CBind t)


instance PP CBind where
  pp = ppCBind

instance PP CTy where
  pp = cty pp pp
%%]

%%[(8 coreout) hs
ppCNm :: HsName -> PP_Doc
ppCNm = cfgppHsName CfgPP_Core
%%]
ppCNm :: EHCOpts -> HsName -> PP_Doc
ppCNm _ n = fst $ ppHsnEscapeWith '$' (hsnOkChars '$' $ copts) (hsnNotOkStrs copts) n
  where copts = coreScanOpts emptyEHCOpts
ppCNm :: EHCOpts -> HsName -> PP_Doc
ppCNm o n | CoreOpt_PPParseable `elem` ehcOptCoreOpts o = ppHsnNonAlpha coreScanOpts' n
          | otherwise                                   = pp n
          where coreScanOpts' = coreScanOpts emptyEHCOpts

ppMbCNm :: EHCOpts -> Maybe HsName -> PP_Doc
ppMbCNm o = maybe (ppCNm o (hsnFromString "_")) (ppCNm o)

ppManyCNm :: EHCOpts -> [HsName] -> PP_Doc
ppManyCNm o =  ppListSep "" "" " " . map (ppCNm o)


%%[(9 coreout) hs
ppTrack :: Track -> PP_Doc
ppTrack t = text (show t)

ppHole :: UID -> PP_Doc
ppHole i = "<" >|< pp i >|< ">"

ppSemi :: PP x => x -> PP_Doc
ppSemi = (>|< ";")
%%]

%%[(9 coreout) hs
ppOptCMetas :: CMetas -> PP_Doc
ppOptCMetas x
  =  let  t = wrap_CMetas (sem_CMetas x)
                          (Inh_CMetas
                             { {- lamMp_Inh_CMetas = Map.empty
                             , -} opts_Inh_CMetas = emptyEHCOpts
                             , mlev_Inh_CMetas = metaLevVal
                             })
     in   (pp_Syn_CMetas t)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Config
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 coreout) hs
ehcOptDumpMore :: EHCOpts -> Bool
ehcOptDumpMore opts = CoreOpt_DumpAlsoNonParseable `elem` ehcOptCoreOpts opts

alsoMore :: EHCOpts -> (PP_Doc -> PP_Doc) -> PP_Doc -> PP_Doc
alsoMore opts mk
  | ehcOptDumpMore opts = mk
  | otherwise           = id

whenMore :: EHCOpts -> PP_Doc -> PP_Doc
whenMore opts
  | ehcOptDumpMore opts = id
  | otherwise           = const empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Debugging only
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 coreout) hs export(ppCBindL)
ppCBindL :: CBindL -> PP_Doc
ppCBindL
  = ppAssocL
  . map (\b -> case b of
                 CBind_Bind n [CBound_Bind m v] -> (n,v >|< ppOptCMetas m)
                 CBind_Bind n a -> (n, vlist a)
        )
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 coreout) hs

ppSignedInt :: Int -> PP_Doc
ppSignedInt n = " " >#< show n

ppDef :: (PP a, PP b) => a -> b -> PP_Doc
ppDef n v   = n >-< indent 2 v

ppDef' :: (PP a, PP b) => a -> b -> PP_Doc
ppDef' n v   = ppOr (n >-< indent 2 v) (n >#< v)
-- ppDef' n v   = ppDef n v

ppOr :: (PP a, PP b) => a -> b -> PP_Doc
-- ppOr a b   = join (a >//< b)
ppOr a b   = pp a

ppOr' :: (PP a, PP b) => a -> b -> PP_Doc
-- ppOr' a b   = ppOr a b
ppOr' a b   = pp a

ppLit :: String -> String -> PP_Doc
ppLit kind val = "#" >|< kind >|< pp (show val)

ppTag :: CTag -> PP_Doc
ppTag t
  -- = ppCTag' CfgPP_Plain t
  = ppCTag' CfgPP_Core t

ppCurlyList :: (a -> PP_Doc) -> [a] -> PP_Doc
ppCurlyList pL xs = ppListSep "{ " " }" ", " $ map pL xs

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Context: options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 coreout)
ATTR CodeAGItf AllNT [ opts: EHCOpts | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Context: how to pp
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 coreout) hs
type CmbPP = PP_Doc -> PP_Doc -> PP_Doc

data HowPP
  = HowPP
      { howDef      :: CmbPP
      , howAside    :: CmbPP 
      , howList     :: [PP_Doc] -> PP_Doc 
      , howSep      :: PP_Doc -> PP_Doc -> PP_Doc -> [PP_Doc] -> PP_Doc
      }

howVert = HowPP  ppDef  (>-<)  vlist     ppBlock
howHor  = HowPP  (>#<)  (>#<)  ppSpaces  ppListSep
%%]

%%[(8 coreout)
ATTR AllMetaNT AllExpr CModule - AllMeta [ ppHow: HowPP | | ]

SEM CodeAGItf
  | AGItf       loc         .   ppHow       =   howVert

SEM CBound
  | Val         loc         .   ppHow       =   if @mlevHere == @lhs.minMetaLev then @lhs.ppHow else howHor

SEM CExpr
  | Lam         bind        .   ppHow       =   howHor
%%[[(8 coresysf)
  | Cast        ty          .   ppHow       =   howHor
%%]]

SEM CPatFld
  | Fld         bind        .   ppHow       =   howHor
%%]

SEM Expr
  | Inject
                ty          .   ppHow       =   howHor

SEM Pat
  | *           loc         .   ppHow       =   howHor

SEM FldBind
  | Fld         ty          .   ppHow       =   howHor
  | Ty          ki          .   ppHow       =   howHor

SEM ValBind
  | Val         bind        .   ppHow       =   howVert
                l0          .   ppHow       =   howVert

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Context: Lam info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8888 coreout)
ATTR CodeAGItf AllCodeNT [ lamMp: LamMp | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pretty printed code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 coreout) hs
-- | pp a CBound, for internal use here
ppBound :: EHCOpts -> Bool -> Maybe String -> String -> PP_Doc -> PP_Doc
ppBound opts isSingleNoNm mbLev s pv
  = lev $ sep (pp s) pv
  where sep | isSingleNoNm = flip const
            | otherwise    = (>#<)
        lev | ehcOptDumpMore opts = maybe id (>#<) mbLev
            | otherwise           = id
%%]

%%[(8 coreout)
ATTR CodeAGItf AllNT [ | | pp USE {>-<} {empty} : PP_Doc ]
ATTR CPatFldL CBindL CAltL CBoundL CBindAnnL CDataConL CDeclMetaL CImportL [ | | ppL: {[PP_Doc]} ]
ATTR CExpr [ | | lamBodyPP: PP_Doc  lamArgPPL: {[PP_Doc]} ]
ATTR CExpr [ | | appFunPP : PP_Doc  appArgPPL: {[PP_Doc]} ]

SEM CModule
  | Mod         lhs         .   pp          =   ppSemi ("module" >#< ppCNm @moduleNm)
                                                >-< (vlist $ map ppSemi @imports.ppL)
                                                >-< (vlist $ map ppSemi @declMetas.ppL)
                                                -- >-< (if null @declMetas.ppL then empty else ppCurlysSemisBlock @declMetas.ppL)
                                                -- >-< "="
                                                >-< @expr.pp
                                                -- >-< "-- data type tag map:"
                                                -- >-< ppCTagsMp CfgPP_Core @ctagsMp

SEM CDeclMeta
  | Data		lhs			.	pp			=	howDef @lhs.ppHow ("data" >#< ppCNm @tyNm) ("=" >#< ppBlockWithStrings{-H-} "" "" ", " @dataCons.ppL)

SEM CImport
  | Import		lhs			.	pp			=	"import" >#< ppCNm @nm

SEM CDataCon
  | Con			lhs			.	pp			=	ppCNm @conNm >#< "=" >#< ppCurlysCommas [pp @tagNr, pp @arity]

SEM CExpr
  | Int         loc         .   pp          =   ppLit "Int"    (show @int)
  | Char        loc         .   pp          =   ppLit "Char"   [@char]
  | String      loc         .   pp          =   ppLit "String" @str
%%[[97
  | Integer     loc         .   pp          =   ppLit "Integer" (show @integer)
%%]
  | Var         loc         .   pp          =   ppACoreBindRef ppCNm @ref
%%[[(8888 corerun)
  | VarRRef		loc         .   pp          =   pp @ref
%%]]
  | App         loc         .   pp          =   let args = reverse $ map ppParens $ @appArgPPL
                                                    fun  = ppParens @appFunPP
                                                in  howDef @lhs.ppHow fun (foldr1 (howAside @lhs.ppHow) args)
  | Let         loc         .   ppCateg     =   case @categ of
                                                  CBindCateg_Rec     -> pp " rec"
                                                  CBindCateg_Strict  -> pp " !"
                                                  CBindCateg_FFI     -> pp " foreign"
%%[[90
                                                  CBindCateg_FFE     -> pp " foreignexport"
%%]]
                                                  _                  -> empty
                            .   pp          =   howDef @lhs.ppHow ("let" >|< @ppCateg) (ppCurlysSemisBlock @binds.ppL) >#< "in" >-< @body.pp
  | Lam         loc         .   pp          =   howDef @lhs.ppHow ("\\" >|< ppSpaces @lamArgPPL >#< "->") (@lamBodyPP)
  | Case        loc         .   pp          =   "case" >#< @expr.pp >#< "of"
                                                >-< indent 1 (ppCurlysSemisBlock @alts.ppL >-< ppCurlysSemisBlock [howDef @lhs.ppHow (pp "default") @dflt.pp])
  | Tup         loc         .   pp          =   "#Tag" >#< ppTag @tag
  | TupDel      loc         .   pp          =   howDef @lhs.ppHow (ppParens @expr.pp) ("-=" >|< ppCurlysCommas' [ppTag @tag,@offset.pp,ppCNm @nm])
  | TupIns      loc         .   pp          =   howDef @lhs.ppHow (ppParens @expr.pp) (howDef @lhs.ppHow ("+=" >|< ppCurlysCommas' [ppTag @tag,@offset.pp,ppCNm @nm]) (ppParens @fldExpr.pp))
  | TupUpd      loc         .   pp          =   howDef @lhs.ppHow (ppParens @expr.pp) (howDef @lhs.ppHow (":=" >|< ppCurlysCommas' [ppTag @tag,@offset.pp,ppCNm @nm]) (ppParens @fldExpr.pp))
  | CaseAltFail loc         .   pp          =   pp "FAIL" >#< @failReason >-< whenMore @lhs.opts (indent 2 $ ppCurlys @errorExpr.pp)
  | FFI         loc         .   pp          =   ("foreign" >#< ppCurlysCommasBlock [pp (show @callconv),pp (show @safety),@ppent,ppTyWithCfg' CfgPP_Core @ty])
%%[[8
                loc         .   ppent       =   pp (show @impEnt)
%%][90
                loc         .   ppent       =   "\"" >|< @impEnt >|< "\""
%%]]
  | Dbg         loc         .   pp          =   {- whenMore @lhs.opts $ -} ppParens $ "<<DBG:" >#< @info >#< ">>"
%%[[(8 coresysf)
  | Arr         loc         .   pp          =   @bind.pp >#< "->" >#< @body.pp
  | Cast		loc			.	pp			=	howDef @lhs.ppHow (pp "cast") (howAside @lhs.ppHow (ppParens @expr.pp) (ppParens @ty.pp))
%%]]

SEM CExpr
  | Lam         loc         .   lamBodyPP   =   @body.lamBodyPP
                            .   lamArgPPL   =   @bind.pp {- (ppCNm @argNm) -} : @body.lamArgPPL
  | * - Lam     lhs         .   lamBodyPP   =   @pp
                            .   lamArgPPL   =   []

SEM CExpr
  | App         loc         .   appFunPP    =   @func.appFunPP
                            .   appArgPPL   =   (@arg.pp) : @func.appArgPPL
  | * - App     lhs         .   appFunPP    =   @pp
                            .   appArgPPL   =   []

SEM CBind
 | Bind         lhs         .   pp          =   let p [ ] = empty
                                                    p [a] = a
                                                    p as  = ppCurlysSemisBlock as
                                                    par | or [ m | (_,m,_) <- @bindAspects.ppBindInfoL ] = ppParens
                                                        | otherwise                                      = id
                                                    isSingleNoNm = hsnIsWild @nm && length @bindAspects.ppBindInfoL == 1
                                                    def | isSingleNoNm = par                                           val
                                                        | otherwise    = par $ howDef @lhs.ppHow (ppCNm @nm) val
                                                        where val = p $ [ ppBound @lhs.opts isSingleNoNm Nothing s pv | (s,_,pv) <- @bindAspects.ppBindInfoL ] -- ++ (maybe [] (\x -> [pp x]) $ Map.lookup @nm @lhs.lamMp)
                                                in  def

SEM CBound
  | Bind        loc         .   ppBound     =   whenMore @lhs.opts @bindMeta.pp >-< @expr.pp
  | Ty          loc         .   ppBound     =   ppACBaspKeyS @aspectKeyS >#< @tyPP -- pp @relevTy
  | RelevTy     loc         .   ppBound     =   ppACBaspKeyS @aspectKeyS >#< @tyPP -- pp @relevTy
  | Meta        loc         .   ppBound     =   ppACBaspKeyS @aspectKeyS >#< @cmetas.pp
  | Val         loc         .   (ppBound,lev,mustPar)
                                            =   let asp | Set.null @aspectKeyS || ACoreBindAspectKey_Default `Set.member` @aspectKeyS
                                                                                = id
                                                        | otherwise             = \x -> ppACBaspKeyS @aspectKeyS >#< x
                                                    lbl | @lbl == CLbl_None     = id
                                                        | otherwise             = \x -> @lbl >#< "=" >#< x 
                                                in  ({- lev $ -} asp $ lbl @expr.pp
                                                    , "@" ++ show @mlev
                                                    , not $ @mlev == 0 && @lbl == CLbl_None && Set.null @aspectKeyS
                                                    )
%%[[90
  | FFE         loc         .   ppBound     =   "foreignexport" >#< ppCurlysCommasBlock [pp (show @callconv),"\"" >|< @expEnt >|< "\"",@expr.pp {- ppCNm @expNm -},ppTyWithCfg' CfgPP_Core @ty]
%%]]

SEM CBound
  | Val         loc         .   pp          =   ppBound @lhs.opts True (Just @lev) @sep @ppBound
  | * - Val     loc         .   pp          =   @ppBound

SEM CBoundL CBindL CPatFldL CAltL CBindAnnL CDataConL CDeclMetaL CImportL
  | Nil         lhs         .   ppL         =   []
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL

SEM CAlt
  | Alt         lhs         .   pp          =   howDef @lhs.ppHow (@pat.pp >#< "->") (@expr.pp)

SEM CPat
  | Int         lhs         .   pp          =   ppLit "Int"    (show @int)
  | Char        lhs         .   pp          =   ppLit "Char"   [@char]
  | Var         lhs         .   pp          =   ppCNm @pnm
  | Con         lhs         .   pp          =   howDef @lhs.ppHow ("#Tag" >#< ppTag @tag)
                                                      (ppCurly (ppMbPre (>#< "|") @rest.ppMb $ ppCommas' @binds.ppL))

SEM CPatFld
  | Fld         lhs         .   pp          =   whenMore @lhs.opts (ppCurlysCommas' [ppCNm @lbl,@offset.pp {- ,ppCNm @nm -}] >|< "=") >|< @bind.pp
                                                >|< (if null @fldAnns.ppL then empty else ppParensCommas' @fldAnns.ppL)

SEM CPatRest
  | Var         loc         .   pp          =   ppCNm @nm

%%]
  | Undef       lhs         .   pp          =   pp hsnUnknown

  | TupSplit    lhs         .   pp          =   (cpatNmEither ((>|< "@") . pp) (const empty) @pnm)
                                                >|< ppParens (@pat.pp >#< "|">#< pp @tag >|< ":" >|< @offset.pp >|< "=" >|< @fldPat.pp)

%%[(8 coreout)
ATTR CMetaVal [ | | optPP : PP_Doc ]

SEM CMetas
  | Tuple       loc         .   pp          =   ppCurlysCommas [@x1.pp,@x2.pp]

SEM CMetaBind
  | Plain       loc         .   pp          =   pp "BINDPLAIN"
  | Function0   loc         .   pp          =   pp "BINDFUNCTION0"
  | Function1   loc         .   pp          =   pp "BINDFUNCTION1"
  | Apply0      loc         .   pp          =   pp "BINDAPPLY0"

SEM CMetaVal
  | Val         loc         .   pp          =   pp "VAL"
%%[[9
  | Dict        loc         .   pp          =   pp "DICT"
  | DictClass   loc         .   pp          =   pp "DICTCLASS"    >|< ppCurlyList ppTrack @tracks
  | DictInstance loc        .   pp          =   pp "DICTINSTANCE" >|< ppCurlyList ppTrack @tracks
  | Track        loc        .   pp          =   pp "TRACK"        >|< ppCurlys (show @track)
%%]]

SEM CMetaVal
  | Val         loc         .   optPP       =   empty
  | * - Val     loc         .   optPP       =   " :" >#< @pp

%%]

%%[(8 coreout)
SEM CExpr
  | Ann         loc         .   pp          =   alsoMore @lhs.opts (\x -> ppParens (x >#< @ann.pp)) @expr.pp

SEM CExprAnn
  | Ty          loc         .   pp          =   "::" >#< ppTyWithCfg' CfgPP_Plain @ty
  | Coe         loc         .   pp          =   "~" >#< ppRelevCoe @lhs.varPPMp @coe
  | Debug       loc         .   pp          =   ppCmt $ pp @info

SEM CBindAnn
  | Coe         loc         .   pp          =   "~" >#< ppRelevCoe @lhs.varPPMp @coe
%%]

%%[(9 coreout)
SEM CExpr
  | Hole        loc         .   pp          =   ppHole @uid
  | HoleLet     loc         .   pp          =   "let --" >#< ppHole @bindsUid >-< howDef @lhs.ppHow (pp "in") @body.pp
  | CoeArg      loc         .   pp          =   pp "<_>"
  | ImplsApp    loc         .   pp          =   howDef @lhs.ppHow (@func.pp >#< "-- Impl") (ppHole @uid)
  | ImplsLam    loc         .   pp          =   howDef @lhs.ppHow ("\\" >|< ppHole @uid >#< "-- Impl") ("->" >#< @body.pp)

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% PP + separator for optional use in CBind
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 coreout) hs
type PPBindInfo
  = ( String                -- separator
    , Bool                  -- outside parenthesization required
    , PP_Doc                -- actual payload
    )
%%]

%%[(8 coreout)
ATTR AllBound [ | | ppBindInfoL USE {++} {[]}: {[PPBindInfo]} ]

SEM CBound
  | * - Val     loc         .   mustPar     =   False

SEM CBound
  | Bind        loc         .   sep         =   "="
  | Ty          loc         .   sep         =   "::"
  | RelevTy     loc         .   sep         =   "::R"
  | Meta        loc         .   sep         =   "::M"
  | Val         loc         .   sep         =   (if @mlevHere == @lhs.minMetaLev then "=" else "::") ++ (if @mlevHere > @lhs.mlev then @lev else "")
%%[[90
  | FFE         loc         .   sep         =   "="
%%]]

SEM CBound
  | *           lhs         .   ppBindInfoL =   [(@sep,@mustPar,@ppBound)]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% List, Maybe of ...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 coreout)
ATTR CPatRest [ | | ppMb: {Maybe PP_Doc} ]

SEM CPatRest
  | Var         lhs         .   ppMb        =   Just @pp
  | * - Var		lhs			.	ppMb		=	Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% UID mapping
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 coreout)
ATTR AllExprBase [ varPPMp: VarPPMp | | ]

SEM CModule
  | Mod         expr        .   varPPMp     =   Map.empty
%%]

%%[(8 coreout)
ATTR AllBound [ | | gathVarPPMp USE {`Map.union`} {Map.empty}: VarPPMp ]

SEM CBound
  | RelevTy     (loc.tyPP,lhs.gathVarPPMp)  =   ppRelevTy Map.empty @relevTy        -- circular when given desired @lhs.varPPMp
  | Ty          loc         .   tyPP        =   ppTyWithCfg' CfgPP_Core @ty

SEM CBind
  | Bind        bindAspects .   varPPMp     =   Map.union @bindAspects.gathVarPPMp @lhs.varPPMp
%%]

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% AG type signatures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 coreout)
SEM *
  | *           loc         .   tyPP        :   PP_Doc
%%]
