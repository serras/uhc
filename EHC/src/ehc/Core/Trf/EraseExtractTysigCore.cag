%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Erase type info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}Core.Trf.EraseExtractTysigCore} import({%{EH}Base.HsName.Builtin},{%{EH}Base.Common},{%{EH}Opts},{%{EH}Core},{%{EH}Ty})
%%]

%%[(8 codegen) hs import({%{EH}AbstractCore})
%%]
%%[(8 codegen) hs import({%{EH}LamInfo})
%%]
%%[(8 codegen) hs import({%{EH}Core.BindExtract})
%%]

%%[(8 codegen) hs import(Data.Maybe, qualified Data.Map as Map, qualified Data.Set as Set)
%%]

%%[(8 codegen).WRAPPER ag import({Core/AbsSyn},{Core/CommonBindNm},{Core/CommonLamInfo},{Core/CommonGathLamInfo},{Core/CommonBindExtract})
WRAPPER CodeAGItf
%%]

%%[(99 codegen)
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(cmodTrfEraseExtractTysigCore, cmodTrfEraseTyCore)
cmodTrfEraseExtractTysigCore
  :: EHCOpts
     -> CModule
     -> ( CModule
        , LamMp
        )
cmodTrfEraseExtractTysigCore opts cmod
  = ( cTrf_Syn_CodeAGItf t
    , gathLamMp_Syn_CodeAGItf t
    )
  where t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod))
                           (Inh_CodeAGItf
                             { opts_Inh_CodeAGItf = opts
                             , lamMp_Inh_CodeAGItf = Map.empty
                             })

cmodTrfEraseTyCore
  :: EHCOpts
     -> CModule
     -> ( CModule
        -- , LamMp
        )
cmodTrfEraseTyCore opts cmod = fst $ cmodTrfEraseExtractTysigCore opts cmod
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllCodeNT CodeAGItf [ opts: EHCOpts | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gathering LamInfo, providing hook for Core/CommonLamInfo
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
SEM CodeAGItf
  | AGItf       loc         .   howUnionGathLamInfo
                                                =   id
%%]

%%[(8 codegen)
SEM CodeAGItf
  | AGItf       loc         .   howMergeLamInfo =   (\(LamInfo {laminfoBindAspMp=m}) i -> i {laminfoBindAspMp = m `Map.union` laminfoBindAspMp i})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Newly bound LamInfo
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
SEM CBound
  | Ty          loc         .   bindLamL        =   [ (Set.union acbaspkeyTy @aspectKeyS, LamInfoBindAsp_Ty @ty) ]
  | Bind        loc         .   bindLamL        =   [] -- [ (acbaspkeyDefaultCore, LamInfoBindAsp_Core metaLevVal @expr.cTrf) ]
%%[[(8 coresysf)
  | Val         loc         .   bindLamL        =   if ehcOptCoreSysF @lhs.opts && @mlev >= metaLevTy
                                                    then [(Set.union (acbaspkeySysfTy @mlev) @aspectKeyS, LamInfoBindAsp_Core @mlev @expr.cTrf)]
                                                    else []
%%]]
  | Ty Bind
%%[[(8 coresysf)
    Val
%%]]
                lhs         .   bindLamMp       =   Map.singleton @lhs.nm (emptyLamInfo {laminfoBindAspMp = Map.fromList @bindLamL})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BoundExtract interfacing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
SEM CBound
  | *           loc         .   boundval        =   @cTrf

SEM CExpr
  | Let         binds       .   boundsel        =   boundSelMetaLev0
  | Lam         bind        .   boundsel        =   boundSelMetaLev01
  | App         arg         .   boundsel        =   boundSelMetaLev0
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllBind [ | | cBindL USE {++} {[]}: {[CBind]} ]

SEM CBind
  | Bind        loc         .   cBindL          =   if null @bindAspects.selvalYesL then [] else [@cTrf]
%%]

%%[(8 codegen)
ATTR AllNT [ | | cTrf: SELF ]
ATTR CodeAGItf [ | | cTrf: CModule ]
%%]

%%[(8 codegen)
SEM CExpr
  | App         lhs         .   cTrf            =   if null @arg.selvalYesL  then @func.cTrf else @cTrf
  | Lam         lhs         .   cTrf            =   if null @bind.selvalYesL
                                                    then if null @bind.selvalNoL
                                                         then @cTrf                                                 -- already erased, take that
                                                         else @body.cTrf                                            -- has meta stuff, then erase fully
                                                    else CExpr_Lam (CBind_Bind @argNm @bind.selvalNoL) @body.cTrf   -- indeed termlevel, but include meta stuff only
  | Let         lhs         .   cTrf            =   if null @binds.cBindL then @body.cTrf else CExpr_Let @categ @binds.cBindL @body.cTrf
%%[[(8 coresysf)
  | Cast		lhs			.	cTrf			=	@expr.cTrf
%%]]

SEM CBind
  | Bind        loc         .   cTrf            =   CBind_Bind @nm @bindAspects.selvalYesL

%%]
