%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]


Some bindings are floated to the module level:
* lambdas
* CAFs that are "closurable"
We assume that the moved bindings have no free variables.
This is ensured by previous transformations:
* LamGlobalAsArg (for lambdas)
* CAFGlobalAsArg (for closurable CAFs)

Lambda bindings always float up all the way to the module level.
CAF bindings may be intercepted on their way up if they encounter a *strict* Let.
The meaning of a "closurable" CAF binding is defined in CommonFloat.

20100914 AD:
The following invariants are and must be maintained:
* keep order of defs intact, that is. 'define before use'. In particular nested defs must end before (!) the def they are lifted from
* keep mutual recursiveness (mutrec), that is nested non-mutrec is implicitly mutrec when inside a mutrec def, so they must end up in the same mutrec binding group.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Float lambdas to global level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}Core.Trf.FloatToGlobal} import(UHC.Util.Utils,qualified UHC.Util.FastSeq as Seq)
%%]

%%[(8 codegen) hs import({%{EH}Base.HsName.Builtin},{%{EH}Base.Common},{%{EH}Core},{%{EH}Ty})
%%]

%%[(8 codegen) hs import(Data.Maybe, qualified Data.Set as Set, qualified Data.Map as Map, Data.List(partition) )
%%]

%%[(8 codegen) hs import({%{EH}AbstractCore})
%%]

-- for debug
%%[(8 codegen) hs import({%{EH}Base.Debug},UHC.Util.Pretty)
%%]
%%[(8 codegen) hs import(Debug.Trace)
%%]

%%[(8 codegen).WRAPPER ag import({Core/AbsSyn},{Core/Trf/CommonFv},{Core/CommonLev},{Core/CommonLevAlt},{Core/CommonLevLamPer1Lam},{Core/CommonLevLet},{Core/CommonPred},{Core/CommonCtxtPred},{Core/CommonBindNm},{Core/Trf/CommonFloat})
WRAPPER CodeAGItf
%%]

%%[(99 codegen)
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(cmodTrfFloatToGlobal)
cmodTrfFloatToGlobal :: CModule -> CModule
cmodTrfFloatToGlobal cmod
  =  let  t = wrap_CodeAGItf  (sem_CodeAGItf (CodeAGItf_AGItf cmod))
                              (Inh_CodeAGItf)
     in   cTrf_Syn_CodeAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The bindings in a binding list are partitioned into three sequences:
* bindings to a lambda-expression
* bindings to a "large" CAF (Let, Case, or TupDel/-Ins/-Upd expression)
* bindings to a "small" CAF (App, Var, Int, Char, String, Tup expression, and FFI/FFE binding)

In a Let-expression, some of these are kept as the bindings to be Let,
others grouped together, labelled with the @categ of the Let, and floated upwards.
What is passed upwards, and what is consumed, depends on the situation:

  IN CASE OF:               FLOATED UPWARDS:                                   KEPT HERE:
* Let at the module-level:  nothing                                            everything
* in a strict Let:          the lambda bindings                                all CAF bindings
* in other Let bindings:    the lambda bindings and large CAF bindings         small CAF bindings             

Groups of bindings floated upwards are inserted when a particular Let is encountered:
* Let at the module-level   always
* Let at lower level:       


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is expr an instance? Based on meta info.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 codegen)
ATTR AllBind AllExprOnly   [ isLocalInInstance : {Bool} | | ]
ATTR CMetaVal CMetas  [ | | isInstance : {Bool} ]

SEM CMetaVal
  | DictInstance        lhs         .   isInstance          =   True
  | * - DictInstance    lhs         .   isInstance          =   False

SEM CBound
  | Bind                expr        .   isLocalInInstance   =   -- trace ("Bind " ++ show @nm ++ " passes " ++ show @bindMeta.isInstance)  $
                                                                @bindMeta.isInstance || @lhs.isLocalInInstance
  
  
SEM CExpr
  | Let                 body        .   isLocalInInstance   =   -- trace ("Let passes to body " ++ show @lhs.isLocalInInstance)  $
                                                                @lhs.isLocalInInstance
                        binds       .   isLocalInInstance   =   -- trace ("Let passes to binds " ++ show @lhs.isLocalInInstance)  $
                                                                @lhs.isLocalInInstance
  | * - Let             loc         .   isLocalInInstance   =   False

SEM CAlt
  | Alt                 expr        .   isLocalInInstance   =   False

SEM CModule
  | Mod                 expr        .   isLocalInInstance   =   False

SEM CPatFld
  | Fld                 offset      .   isLocalInInstance   =   False
                        bind        .   isLocalInInstance   =   False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% The various sets of bindings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllBind   [ | | cLamBinds, 
                     cLargeCAFBinds, 
                     cSmallCAFBinds   USE {`Seq.union`} {Seq.empty}: {Seq.FastSeq CBind}                          ]


SEM CBound
  | Bind        loc . cBindTrf          =   acoreBind1Asp1 @lhs.nm @cTrf
                lhs . ( cLamBinds
                      , cLargeCAFBinds
                      , cSmallCAFBinds
                      )                 =   if isJust @expr.mbLam
                                            then ( Seq.singleton @cBindTrf
                                                 , Seq.empty
                                                 , Seq.empty
                                                 )
                                            else if @loc.isClosurableBind
%%[[9
                                                    || @lhs.isLocalInInstance
%%]]
                                            then ( Seq.empty
                                                 , Seq.singleton @cBindTrf
                                                 , Seq.empty
                                                 )
                                            else ( Seq.empty
                                                 , Seq.empty
                                                 , Seq.singleton @cBindTrf
                                                 )
  -- | FFI
%%[[90
  | FFE
                lhs . cSmallCAFBinds    =   Seq.singleton (acoreBind1Asp1 @lhs.nm @cTrf)
%%]]

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Floated binding groups
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllCodeNT [ | | cFloatedBindGrps USE {`Seq.union`} {Seq.empty}: {Seq.FastSeq (CBindCateg,Seq.FastSeq CBind)} ]

SEM CExpr
  | Let         lhs . cFloatedBindGrps  =   if @isGlobal
                                            then Seq.empty
                                            else @loc.bindingGroupsToFloat
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Sorting out what should be floated
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
SEM CExpr
  | Let         loc.( bindingsToKeep
                    , bindingsToFloat
                    )                   =   if @isGlobal
                                            then  ( @binds.cLargeCAFBinds `Seq.union` @binds.cSmallCAFBinds `Seq.union` @binds.cLamBinds
                                                  , Seq.empty
                                                  )
                                            else if @categ == CBindCateg_Strict 
                                            then  ( @binds.cLargeCAFBinds `Seq.union` @binds.cSmallCAFBinds
                                                  , @binds.cLamBinds
                                                  )
                                            else  ( @binds.cSmallCAFBinds
                                                  , @binds.cLamBinds `Seq.union` @binds.cLargeCAFBinds
                                                  )


SEM CExpr
  | Let         loc.bindingGroupsToCertainlyInsert
                                        =   if @isGlobal
                                            then -- merge inner floating binds if a recursive group; by definition no strict defs are floated, plain defs safely can be recursive
                                                 case @categ of
                                                   CBindCateg_Rec -> Seq.singleton (@categ, (flatten $ Seq.map snd @binds.cFloatedBindGrps) `Seq.union` @loc.bindingsToKeep)
                                                   _              -> @binds.cFloatedBindGrps `Seq.union` Seq.singleton (@categ, @loc.bindingsToKeep)
                                            else Seq.singleton (@categ, @loc.bindingsToKeep)

SEM CExpr
  | Let         loc.bindingGroupsToPossiblyFloat
                                        =   if @isGlobal
                                            then Seq.empty
                                            else (Seq.singleton (@categ, @loc.bindingsToFloat) `Seq.union` @binds.cFloatedBindGrps `Seq.union` @body.cFloatedBindGrps)

SEM CExpr
  | Let         loc.( bindingGroupsToInsert
                    , bindingGroupsToFloat
                    )                   =   move (@loc.bindingGroupsToCertainlyInsert, @loc.bindingGroupsToPossiblyFloat)

%%]

%%[(8 codegen) hs
flatten :: Seq.FastSeq (Seq.FastSeq a) -> Seq.FastSeq a
flatten = Seq.unions . Seq.toList
%%]

%%[(8 codegen) hs
move insflt@(ins,flt)
  = insflt
%%]
move insflt@(ins,flt)
  =  let (g1,g2) = partition p flt
     in  case g1 of
              [] -> insflt
              _  -> move (ins++g1, g2)
     where p f = False    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% The actual transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR CodeAGItf [ | | cTrf: CModule ]
ATTR AllNT [ | | cTrf: SELF ]
%%]

%%[(8 codegen)
SEM CExpr
  | Let         lhs . cTrf              =   foldr (\(c,b) r -> acoreLet c (Seq.toList b) r) @body.cTrf
                                            $ Seq.toList @loc.bindingGroupsToInsert
%%]
