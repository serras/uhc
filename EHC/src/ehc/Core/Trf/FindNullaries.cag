%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]


%%[(8 codegen wholeprogAnal) hs module {%{EH}Core.Trf.FindNullaries} export(cmodTrfFindNullaries)
%%]
%%[(8 codegen wholeprogAnal) hs import(Data.Maybe, qualified Data.Set as Set, qualified Data.Map as Map)
%%]
%%[(8 codegen wholeprogAnal) hs import(UHC.Util.Utils,qualified UHC.Util.FastSeq as Seq,{%{EH}Base.Common},{%{EH}Core},{%{EH}Ty})
%%]
%%[(8 codegen wholeprogAnal) hs import({%{EH}AbstractCore})
%%]

-- for debug
%%[(8 codegen wholeprogAnal) hs import({%{EH}Base.Debug},UHC.Util.Pretty)
%%]
%%[(8 codegen wholeprogAnal) hs import(Debug.Trace)
%%]

%%[(8 codegen wholeprogAnal).WRAPPER ag import({Core/AbsSyn},{Core/CommonLev},{Core/CommonLevAlt},{Core/CommonLevLamPer1Lam},{Core/CommonLevLet},{Core/CommonCtxtPred},{Core/CommonBindNm})
WRAPPER CodeAGItf
%%]

%%[(99 codegen wholeprogAnal)
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen wholeprogAnal) hs
cmodTrfFindNullaries :: CModule -> CModule
cmodTrfFindNullaries cmod
  =  let  t = wrap_CodeAGItf  (sem_CodeAGItf (CodeAGItf_AGItf cmod))
                              (Inh_CodeAGItf)
     in   cTrf_Syn_CodeAGItf t
%%]

%%[(8 codegen wholeprogAnal)
ATTR CodeAGItf [ | | cTrf: CModule ]
ATTR AllCodeNT [ | | cTrf: SELF    ]
%%]

%%[(8 codegen wholeprogAnal)

SEM CBound
  | Bind        lhs.cTrf  =  if  @lhs.lev == cLevModule+1
                             then let (metabind, metaval) = @bindMeta.cTrf
                                      newmetabind = case @expr.whatBelow of
                                                       ExprIsLam _ -> CMetaBind_Function1
                                                       _           -> CMetaBind_Function0
                                  in  CBound_Bind (newmetabind, metaval) @expr.cTrf
                             else @loc.cTrf

SEM CBindL
  | Cons        lhs.cTrf  =  case @hd.cTrf of
                               CBind_Bind nm asp@[CBound_Bind (CMetaBind_Function0,metaval) expr]
                                 -> let nm1 = hsnPrefix "fun0~" nm
                                        b1  = CBind_Bind nm1 asp
                                        b2  = CBind_Bind nm  [CBound_Bind (CMetaBind_Apply0,    metaval) (acoreVar nm1)]
                                    in  b1 : b2 : @tl.cTrf
                               -- CBind_Bind nm [CBound_FFI c s i (Ty_Con t)]
                               -- 20100828 AD: is this still necessary, now FFI is just a normal lambda/expr
                               CBind_Bind nm asp@[CBound_Bind m (CExpr_FFI c s i (Ty_Con t))]
                                 -> let nm1 = hsnPrefix "fun0~" nm
                                        b1  = CBind_Bind nm1 asp
                                        b2  = CBind_Bind nm  [CBound_Bind (CMetaBind_Apply0, CMetaVal_Val) (acoreVar nm1)]
                                    in  b1 : b2 : @tl.cTrf
                               _ -> @loc.cTrf



%%]
