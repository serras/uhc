%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

Pass all free variables of let bound lambda expressions explicitly.
Later, these expressions can then be lifted globally.


For example:
f is a let-bound lambda expression that uses a (more) global variable g

   let g = ...            
in let f = \x -> ...g...  
in ...f...

The transformation introduces an additional formal parameter e to the lambda expression
and passes the global variable g as an actual parameter to all uses of f:

   let g = ...            
in let f = \e x -> ...e...  
in ...f g...




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Globals as args
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}Core.Trf.LamGlobalAsArg} import(UHC.Util.Utils,Data.Maybe,qualified Data.Set as Set,Data.List,qualified Data.Map as Map)
%%]

%%[(8 codegen) hs import({%{EH}Base.HsName.Builtin},{%{EH}Base.Common},{%{EH}Core},{%{EH}Ty})
%%]

%%[(8 codegen) hs import({%{EH}Core.Utils})
%%]

%%[(8 codegen) hs import({%{EH}AbstractCore})
%%]

-- for debug
%%[(8 codegen) hs import({%{EH}Base.Debug},UHC.Util.Pretty)
%%]
%%[(8 codegen) hs import(Debug.Trace)
%%]

%%[(8 codegen).WRAPPER ag import({Core/AbsSyn},{Core/CommonLev},{Core/CommonLevAlt},{Core/CommonLevLamPer1Lam},{Core/CommonCtxtPred},{Core/CommonBindNm},{Core/Trf/CommonFv},{Core/Trf/CommonLev},{Core/Trf/CommonGlobalAsArg})
WRAPPER CodeAGItf
%%]

We have cycles, but they are there by design:

*** UU.AG warning  ***
problem  : Direct circular dependency pattern for inherited attribute levMp
            and synthesized attribute levOfMp of nonterminal CBindL
pattern  : see help
help     : The following attributes formed the cycle:
           CExpr.Let, inherited attribute binds.levMp ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 9, column 35))
           CBindL.Cons, inherited attribute lhs.levMp
           CBindL.Cons, inherited attribute hd.levMp ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 1, column 18))
           CBind.Bind, inherited attribute lhs.levMp
           CBind.Bind, inherited attribute expr.levMp ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 1, column 18))
           CExpr.App, inherited attribute lhs.levMp
           CExpr.App, inherited attribute arg.levMp ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 1, column 18))
           CExpr.Case, inherited attribute lhs.levMp
           CExpr.Case, inherited attribute dflt.levMp ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 1, column 18))
           CExpr.HoleLet, inherited attribute lhs.levMp
           CExpr.HoleLet, inherited attribute body.levMp ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 1, column 18))
           CExpr.ImplsApp, inherited attribute lhs.levMp
           CExpr.ImplsApp, inherited attribute func.levMp ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 1, column 18))
           CExpr.ImplsLam, inherited attribute lhs.levMp
           CExpr.ImplsLam, inherited attribute body.levMp ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 1, column 18))
           CExpr.Lam, inherited attribute lhs.levMp
           CExpr.Lam, local attribute levOf ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 45, column 33))
           CExpr.Lam, synthesized attribute lhs.levOf ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 36, column 22))
           CExpr.ImplsLam, synthesized attribute body.levOf
           CExpr.ImplsLam, synthesized attribute lhs.levOf ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 36, column 22))
           CExpr.ImplsApp, synthesized attribute func.levOf
           CExpr.ImplsApp, synthesized attribute lhs.levOf ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 36, column 22))
           CExpr.HoleLet, synthesized attribute body.levOf
           CExpr.HoleLet, synthesized attribute lhs.levOf ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 36, column 22))
           CExpr.Case, synthesized attribute dflt.levOf
           CExpr.Case, local attribute levOf ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 41, column 33))
           CExpr.Case, synthesized attribute lhs.levOf ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 36, column 22))
           CExpr.App, synthesized attribute arg.levOf
           CExpr.App, local attribute levOf ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 40, column 33))
           CExpr.App, synthesized attribute lhs.levOf ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 36, column 22))
           CBind.Bind, synthesized attribute expr.levOf
           CBind.Bind, synthesized attribute lhs.levOfMp ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 54, column 33))
           CBindL.Cons, synthesized attribute hd.levOfMp
           CBindL.Cons, synthesized attribute lhs.levOfMp ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 51, column 20))
           CExpr.Let, synthesized attribute binds.levOfMp
           CExpr.Let, inherited attribute binds.levMp ("build/9/lib-ehc/EH9//Core/Trf/CommonLev.ag"(line 9, column 35))

%%[(9 codegen)
PRAGMA nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(cmodTrfLamGlobalAsArg)
cmodTrfLamGlobalAsArg :: CModule -> CModule
cmodTrfLamGlobalAsArg cmod
  =  let  t = wrap_CodeAGItf  (sem_CodeAGItf (CodeAGItf_AGItf cmod))
                              (Inh_CodeAGItf)
     in   cTrf_Syn_CodeAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unique
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllCodeNT [ | gUniq: Int | ]

SEM CodeAGItf
  | AGItf       module      .   gUniq       =   0

SEM CBound
  | Bind        expr        .   gUniq       =   @lhs.gUniq + Map.size @argMpNew

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Free var of lams for which arg lifting is done
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllCodeNT [ lamFvSMp: FvSMp | | ]

SEM CodeAGItf
  | AGItf       module      .   lamFvSMp    =   Map.empty

SEM CExpr
  | Let         loc         .   lamFvSMp    =   (let  start varS = fvsClosure @binds.bindLamS @lhs.lamS varS @lhs.lamFvSMp @binds.fvSMp
                                                 in   case @categ of
                                                        CBindCateg_Rec
                                                          ->  fvsTransClosure lm m
                                                          where (m,lm)  = start (@lhs.varS `Set.union` @binds.bindVarS)
                                                        _ ->  m
                                                          where (m,_)   = start @lhs.varS
                                                )
                                                `Map.union` @lhs.lamFvSMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Mapping of argument names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllCodeNT [ argMp: CVarReplNmMp | | ]

SEM CodeAGItf
  | AGItf       module      .   argMp       =   Map.empty

SEM CBound
  | Bind        expr        .   argMp       =   @argMpNew `Map.union` @lhs.argMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Passing info between aspects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
%%[[8
type AspBindLamArgInfo = LamArgMp
%%][9
type AspBindLamArgInfo = (LamArgMp,Env)
%%]]
%%]

%%[(8 codegen)
ATTR AllBound   [ aspBindLamArgMp: {ACoreBindAspMp AspBindLamArgInfo} | | gathAspBindLamArgMp USE {`Map.union`} {Map.empty}: {ACoreBindAspMp AspBindLamArgInfo} ]

SEM CBind
  | Bind		loc			.	aspBindLamArgMp
  											=	@bindAspects.gathAspBindLamArgMp

SEM CBound
  | Bind  		lhs			.	gathAspBindLamArgMp
  											=	Map.singleton acbaspkeyDefault
  											                  ( @expr.bindLamArgMp
%%[[9
  											                  , @expr.envUp
%%]]
  											                  )

SEM CExpr
  | App			arg			.	aspBindLamArgMp
  											=	Map.empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Adding parameters to lam call sites
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
type LamArgMp = Map.Map HsName CVarIntroL
%%]

%%[(8 codegen)
ATTR AllBind CExpr [ | | bindLamArgMp USE {`Map.union`} {Map.empty}: LamArgMp ]
ATTR AllMetaVal [ bindLamArgMp: LamArgMp | | ]

SEM CBound
  | Meta  		cmetas  	.	( bindLamArgMp
%%[[9
                                , envFinal
%%]]
                                ) 			=  	panicJust "LamGlobalAsArg.CBound.Meta.aspBindLamArgMp" $ Map.lookup acbaspkeyDefault @lhs.aspBindLamArgMp
%%]

%%[(8 codegen)
ATTR AllCodeNT [ lamArgMp: LamArgMp | | ]

SEM CodeAGItf
  | AGItf       module      .   lamArgMp    =   Map.empty

SEM CExpr
  | Let         loc         .   lamArgMp    =   @binds.bindLamArgMp `Map.union` @lhs.lamArgMp
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Finding instance annotations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 codegen)
ATTR CMetaVal CMetas [ | | isInstance: {Bool} ]

SEM CMetaVal
  | DictInstance    lhs.isInstance = True
  | *-DictInstance  lhs.isInstance = False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllNT [ | | cTrf: SELF ]
ATTR CodeAGItf [ | | cTrf: CModule ]

SEM CBound
  | Bind        loc         .   (argNewL,argMpNew,bindLamArgMp)
                                            =   if {- @isLiftable && not @isGlobal -} isJust @expr.mbLam
                                                then  let  argLevL = fvLAsArg @lhs.introCVarIntroMp $ panicJust "LamGlobalAsArg.CBind.Bind.argLevL" $ Map.lookup @lhs.nm $ @lhs.lamFvSMp
                                                           (argOL,argNL,argONMp) = fvLArgRepl @lhs.gUniq $ argLevL
                                                      in   (argNL, argONMp, @lhs.nm `Map.singleton` argOL)
                                                else  ([],Map.empty, Map.empty)
%%]


%%[(8 codegen)
SEM CBound
%%[[8
  | Bind        lhs         .   cTrf        =   acoreBoundVal1Cat CBindCateg_Plain @lhs.nm $ acoreLam (assocLKeys @argNewL) @expr.cTrf
%%][9
  | Bind        lhs         .   cTrf        =   --trace ("use of global: " ++ show @lhs.nm ++ " uses " ++ show @bindLamArgMp ++ "\n"
                                                --      ++ (if @bindMeta.isInstance then ("instance " ++ show @lhs.nm ++ " finds " ++ show @expr.bindLamArgMp ++ "\n") else "")
                                                --      ) $
                                                (acoreBoundVal1Metas @lhs.nm @bindMeta.cTrf $ acoreLam [(n) | (n,cvi) <- @argNewL] @expr.cTrf)
                bindMeta    . bindLamArgMp  =  @expr.bindLamArgMp
%%]]
%%]




%%[(8 codegen)

SEM CExpr
  | Var         lhs         .   cTrf        =   let  r n = fvVarRepl @lhs.argMp n
                                                     v1 = r @nm
%%[[8
                                                     mk as = acoreApp v1 $ [r a | (a,_) <- as]
%%][9
                                                     mk as = acoreApp v1 $ [(r a) | (a,cvi) <- as]
%%]]
                                                     v2 = maybe v1 mk $ Map.lookup @nm $ @lhs.lamArgMp
                                                in   v2
%%]


%%[(9 codegen)

{

type Env = Map.Map HsName Track

metaExtendTrack :: LamArgMp -> Env -> Track -> Track
metaExtendTrack mp env (TrackVarApply nm ps) = let r = Map.lookup nm mp
                                                   xs = maybe [] assocLKeys r
                                                   ts = map (\x -> Map.findWithDefault (TrackVarApply x []) x env) xs
                                               in  -- trace (show nm ++ " extended with " ++ show ts) $
                                                         (TrackVarApply nm (ts++ps))
metaExtendTrack _ _ t = t

}

ATTR AllExprOnly CBound [ mbCtxCount:{Maybe Int} isDictClass:{Bool} | | ]

SEM CModule
  | Mod  expr.mbCtxCount = Nothing
         expr.isDictClass = False

SEM CBoundL
  | Cons hd.mbCtxCount = Nothing
         hd.isDictClass = False

%%[[90
SEM CBound
  | FFE  expr.mbCtxCount = Nothing
         expr.isDictClass = False
%%]]

SEM CAlt
  | Alt  expr.mbCtxCount = Nothing
         expr.isDictClass = False
  
SEM CPatFld
  | Fld  offset.mbCtxCount = Nothing
         offset.isDictClass = False

SEM CBound
  | Bind  expr.mbCtxCount = if @bindMeta.isDictInstance
                            then Just 0
                            else Nothing
          expr.isDictClass = @bindMeta.isDictClass
  | Val   expr.mbCtxCount = Nothing						-- TBD
          expr.isDictClass = False						-- TBD

SEM CExpr
  | Lam   body.mbCtxCount = do { n <- @lhs.mbCtxCount
                               ; return (n+1)
                               }
  | Let   body.mbCtxCount = Nothing
          body.isDictClass = False


ATTR CMetaVal CMetas [ | | isDictClass:Bool isDictInstance:Bool ]

SEM CMetaVal
  | DictClass      lhs.isDictClass    = True
  | *-DictClass    lhs.isDictClass    = False
  | DictInstance   lhs.isDictInstance = True
  | *-DictInstance lhs.isDictInstance = False



ATTR CMetas CMetaVal [ | | mbTrack : {Maybe Track} ]
ATTR CMetas CMetaVal [ envFinal:Env  | | ]


SEM CMetaVal
  | Track          lhs.mbTrack  =  Just @track
  | *-Track        lhs.mbTrack  =  Nothing

SEM CBound
  | Bind  bindMeta.envFinal = @expr.envUp


ATTR AllBind CExpr [ | | envUp USE {`Map.union`} {Map.empty} : Env ]

SEM CBound
  | Bind   lhs.envUp  =  maybe (Map.empty)
                               (\t -> Map.singleton @lhs.nm t)
                               @bindMeta.mbTrack

SEM CExpr
  | Let    lhs.envUp = Map.union @binds.envUp @body.envUp
  | Lam    lhs.envUp = maybe (if @lhs.isDictClass
                              then Map.insert @argNm TrackSelf @body.envUp
                              else @body.envUp
                             )
                             (\n -> Map.insert @argNm (TrackCtx n) @body.envUp)
                             @lhs.mbCtxCount
  | *-Let
      Lam  lhs.envUp = Map.empty


 SEM CMetaVal
   |  DictClass      lhs.cTrf = CMetaVal_DictClass    (map (metaExtendTrack @lhs.bindLamArgMp @lhs.envFinal) @tracks)
   |  DictInstance   lhs.cTrf = CMetaVal_DictInstance (map (metaExtendTrack @lhs.bindLamArgMp @lhs.envFinal) @tracks)

%%]
