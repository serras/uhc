%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fully lazy code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[doesWhat doclatex
The full lazy transformation gives names to argument subexpressions of an application.
The purpose is to end up with bindings which (later) directly correspond to a CAF or a closure.
For that to work, all arguments of an application closure must themselves be bound to names, i.e. be closures themselves.
%%]

%%[(8 codegen) hs module {%{EH}Core.Trf.ANormal} import({%{EH}Base.Common},{%{EH}Ty},{%{EH}Base.HsName.Builtin}) export(cmodTrfANormal)
%%]

%%[(8 codegen) hs import(Data.Maybe,qualified Data.Set as Set, Data.List as List, qualified Data.Map as Map)
%%]
%%[(8 codegen) hs import(qualified UHC.Util.FastSeq as Seq)
%%]

%%[(8 codegen) hs import({%{EH}AbstractCore},{%{EH}Core})
%%]

%%[(8 codegen) hs import({%{EH}Base.Debug})
%%]

%%[(8 codegen).WRAPPER ag import({Core/AbsSyn},{Core/CommonLev},{Core/CommonLevAlt},{Core/CommonLevLamPer1Lam},{Core/CommonCtxtPred},{Core/CommonBindNm},{Core/Trf/CommonFv},{Core/Trf/CommonLev})
WRAPPER CodeAGItf
%%]


We have cycles, but they are there by design:

*** UU.AG warning  ***
problem  : Direct circular dependency pattern for inherited attribute cvarIntroMp
            and synthesized attribute levOfMp of nonterminal CBindL
pattern  : see help
help     : The following attributes formed the cycle:
           CExpr.Let, inherited attribute binds.levMp ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 9, column 35))
           CBindL.Cons, inherited attribute lhs.levMp
           CBindL.Cons, inherited attribute hd.levMp ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 1, column 18))
           CBind.Bind, inherited attribute lhs.levMp
           CBind.Bind, inherited attribute expr.levMp ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 1, column 18))
           CExpr.App, inherited attribute lhs.levMp
           CExpr.App, inherited attribute arg.levMp ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 1, column 18))
           CExpr.Case, inherited attribute lhs.levMp
           CExpr.Case, inherited attribute dflt.levMp ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 1, column 18))
           CExpr.Lam, inherited attribute lhs.levMp
           CExpr.Lam, local attribute levOf ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 45, column 33))
           CExpr.Lam, synthesized attribute lhs.levOf ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 36, column 22))
           CExpr.Case, synthesized attribute dflt.levOf
           CExpr.Case, local attribute levOf ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 41, column 33))
           CExpr.Case, synthesized attribute lhs.levOf ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 36, column 22))
           CExpr.App, synthesized attribute arg.levOf
           CExpr.App, local attribute levOf ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 40, column 33))
           CExpr.App, synthesized attribute lhs.levOf ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 36, column 22))
           CBind.Bind, synthesized attribute expr.levOf
           CBind.Bind, synthesized attribute lhs.levOfMp ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 54, column 33))
           CBindL.Cons, synthesized attribute hd.levOfMp
           CBindL.Cons, synthesized attribute lhs.levOfMp ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 51, column 20))
           CExpr.Let, synthesized attribute binds.levOfMp
           CExpr.Let, inherited attribute binds.levMp ("build/8/lib-ehc/EH8//Core/Trf/CommonLev.ag"(line 9, column 35))

%%[(8 codegen)
PRAGMA nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
cmodTrfANormal :: HsName -> UID -> CModule -> CModule
cmodTrfANormal modNm uniq cmod
  =  let  t = wrap_CodeAGItf  (sem_CodeAGItf (CodeAGItf_AGItf cmod))
                              (Inh_CodeAGItf
                                 { gUniq_Inh_CodeAGItf = uniq
%%[[50
                                 , modNm_Inh_CodeAGItf = modNm
%%]]
                                 })
     in   cTrf_Syn_CodeAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Module name, required for unique global names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(50 codegen)
ATTR AllCodeNT CodeAGItf [ modNm: HsName | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unique
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllCodeNT [ | gUniq: UID | ]
ATTR CodeAGItf [ gUniq: UID | | ]

SEM CExpr
  | App         (func.gUniq,loc.lUniq)      =   mkNewUID @lhs.gUniq
  | Lam         (body.gUniq,loc.lUniq,loc.lUniq2)
                                            =   mkNewLevUID2 @lhs.gUniq
  | Let         (binds.gUniq,loc.lUniq)     =   mkNewUID @lhs.gUniq
  | Case TupDel TupIns TupUpd
                (expr.gUniq,loc.lUniq)      =   mkNewUID @lhs.gUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gathering let's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
type LevBindSq = Seq.FastSeq (Int,(CBindCateg,CBindL))

levBindSplit :: Int -> LevBindSq -> (LevBindSq,LevBindSq)
levBindSplit lev b
  =  let (b1,b2) = partition (\(l,_) -> l >= lev) $ Seq.toList b
     in  (Seq.fromList b1,Seq.fromList b2)
%%]

%%[(8 codegen)
ATTR AllCodeNT [ | | levBindSq USE {Seq.:++:} {Seq.empty}: LevBindSq ]
ATTR AllBind [ | | bindL USE {++} {[]}: {AssocL Int CBind} ]

SEM CExpr
  | App         lhs         .   levBindSq   =   @arg.levBindSq Seq.:++: @func.levBindSq Seq.:++: @levBindSq
  | Case        lhs         .   levBindSq   =   @expr.levBindSq Seq.:++: @alts.levBindSq Seq.:++: @dflt.levBindSq Seq.:++: @levBindSq
  | TupDel      lhs         .   levBindSq   =   @expr.levBindSq Seq.:++: @offset.levBindSq Seq.:++: @levBindSq
  | TupIns TupUpd
                lhs         .   levBindSq   =   @expr.levBindSq Seq.:++: @offset.levBindSq Seq.:++: @fldExpr.levBindSq Seq.:++: @levBindSq
  | Let         (loc.hereBindSq,loc.remBindSq)
                                            =   let ((hl,_):_) = @binds.bindL
                                                    b1  = @binds.levBindSq
                                                    b2  = Seq.singleton (@strLev hl,(@categ,assocLElts @binds.bindL))
                                                    b12 = Seq.singleton (@maxBindLev,(CBindCateg_Rec,concat $ List.map (\(_,(_,b)) -> b) $ Seq.toList $ (b1 Seq.:++: b2)))
                                                    b3  = @body.levBindSq
                                                    b   = case @categ of 
                                                            CBindCateg_Rec -> b12 Seq.:++: b3
                                                            _              -> b1  Seq.:++: b2 Seq.:++: b3
                                                in  (b,Seq.empty)
                lhs         .   levBindSq   =   @remBindSq Seq.:++: @levBindSq
  | Lam         loc         .   (hereBindSq,remBindSq)
                                            =   (@body.levBindSq,Seq.empty) -- levBindSplit @lev @body.levBindSq
                lhs         .   levBindSq   =   @remBindSq Seq.:++: @levBindSq

SEM CBound
  | Bind        lhs         .   bindL       =   [(@expr.levOf,acoreBind1Asp1 @lhs.nm @cTrf)]
  -- | FFI
%%[[90
  | FFE
                lhs         .   bindL       =   [(cLevModule,acoreBind1Asp1 @lhs.nm @cTrf)]
%%]]

SEM CAlt
  | Alt         (loc.hereBindSq,lhs.levBindSq)
                                            =   (@expr.levBindSq,Seq.empty)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Allow trf?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
data AppTop = AppYesLet | AppNoLet deriving (Eq,Ord)
data LamTop = LamYesLet | LamNoLet deriving (Eq,Ord)
%%]

%%[(8 codegen)
ATTR AllExprOnly CBound [ appTrfIsOk: AppTop | | ]

SEM CModule
  | Mod         expr        .   appTrfIsOk  =   AppYesLet

SEM CBound
  | Bind
%%[[90
    FFE
%%]]
  				expr        .   appTrfIsOk  =   AppNoLet

SEM CPatFld
  | Fld         offset      .   appTrfIsOk  =   AppYesLet

SEM CExpr
  | App         func        .   appTrfIsOk  =   AppNoLet
                arg         .   appTrfIsOk  =   AppYesLet
  | TupIns TupUpd TupDel
                loc         .   appTrfIsOk  =   AppYesLet
  | Lam Let     body        .   appTrfIsOk  =   AppNoLet
  | * - App Lam Let TupIns TupUpd TupDel Ann CaseAltFail
                loc         .   appTrfIsOk  =   AppYesLet

SEM CAlt
  | Alt         expr        .   appTrfIsOk  =   AppYesLet

SEM CBoundL
  | Cons        hd          .   appTrfIsOk  =   AppNoLet
%%]

%%[(8 codegen)
ATTR AllExprOnly CBound [ lamTrfIsOk: LamTop | | ]

SEM CModule
  | Mod         expr        .   lamTrfIsOk  =   LamYesLet

SEM CBound
  | Bind
%%[[90
    FFE
%%]]
  				expr        .   lamTrfIsOk  =   LamNoLet

SEM CPatFld
  | Fld         offset      .   lamTrfIsOk  =   LamNoLet

SEM CExpr
  | TupIns TupUpd
                fldExpr     .   lamTrfIsOk  =   LamYesLet
  | Lam         body        .   lamTrfIsOk  =   LamNoLet
  | * - Lam TupIns TupUpd Ann CaseAltFail
                loc         .   lamTrfIsOk  =   LamYesLet

SEM CAlt
  | Alt         expr        .   lamTrfIsOk  =   LamYesLet

SEM CBoundL
  | Cons        hd          .   lamTrfIsOk  =   LamNoLet
%%]

%%[(8 codegen)
ATTR AllExprOnly CBound [ letTrfIsOk: Bool | | ]

SEM CModule
  | Mod         expr        .   letTrfIsOk  =   False

SEM CBound
  | Bind
%%[[90
    FFE
%%]]
  				expr        .   letTrfIsOk  =   False

SEM CPatFld
  | Fld         offset      .   letTrfIsOk  =   True

SEM CExpr
  | TupIns TupUpd
                fldExpr     .   letTrfIsOk  =   True
  | App         loc         .   letTrfIsOk  =   True
  | * - App TupIns TupUpd Ann CaseAltFail
                loc         .   letTrfIsOk  =   False

SEM CAlt
  | Alt         expr        .   letTrfIsOk  =   False

SEM CBoundL
  | Cons        hd          .   letTrfIsOk  =   False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name of introduced binding
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
SEM CExpr
  | App Lam Case TupDel TupIns TupUpd Let
                loc         .   trNm        =   
%%[[50
                                                hsnQualUniqify @lhs.modNm $
%%]]
                                                uidHNm @lUniq
  | Lam         loc         .   trNm2       =   
%%[[50
                                                hsnQualUniqify @lhs.modNm $
%%]]
                                                uidHNm @lUniq2

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
mkTrf :: Bool -> Int -> Int -> HsName -> CExpr -> (CExpr,LevBindSq)
mkTrf cond outerLev hereLev n e
  =  if cond
     then (acoreVar n,Seq.singleton (hereLev,(CBindCateg_Plain,[acoreBind1 n e])))
     else (e,Seq.empty)
%%]

%%[(8 codegen) hs
mkLetTrf' :: LevBindSq -> CExpr -> (Bool,CExpr)
mkLetTrf' bs ce
  =  let  l = Seq.toList bs
     in   (not (List.null l),foldr (\(_,(c,b)) e -> acoreLet c b e) ce l)

mkLetTrf :: LevBindSq -> CExpr -> CExpr
mkLetTrf bs ce = snd (mkLetTrf' bs ce)
%%]

%%[(8 codegen)
ATTR AllNT [ | | cTrf: SELF ]
ATTR CodeAGItf [ | | cTrf: CModule ]

SEM CAlt
  | Alt         lhs         .   cTrf        =   CAlt_Alt @pat.cTrf (mkLetTrf @hereBindSq @expr.cTrf)

SEM CExpr
  | TupIns TupUpd TupDel
                loc         .   trfIsOk     =   @lhs.appTrfIsOk == AppYesLet && @lhs.isTopTup
  | App Case    loc         .   trfIsOk     =   @lhs.appTrfIsOk == AppYesLet && @lhs.isTopApp
  | Lam         loc         .   trfIsOk     =   @lhs.lamTrfIsOk == LamYesLet
  | Let         loc         .   trfIsOk     =   @lhs.letTrfIsOk
%%]

%%[(8 codegen)
SEM CExpr
  | TupIns TupUpd TupDel
                (lhs.cTrf,loc.levBindSq)    =   mkTrf @trfIsOk @lhs.lev @levOf @trNm @cTrf
  | App Case    (lhs.cTrf,loc.levBindSq)    =   mkTrf @trfIsOk @lhs.lev @levOf @trNm @cTrf
  | Lam         (lhs.cTrf,loc.levBindSq)    =   let mkTLB = mkTrf @trfIsOk @lhs.lev @levOf @trNm
                                                          . acoreLam1 @argNm
                                                          . mkLetTrf @hereBindSq
                                                in  if cexprIsLam @body.cTrf && not (List.null (Seq.toList @hereBindSq))
                                                    then mkTLB (CExpr_Let CBindCateg_Plain [acoreBind1Cat CBindCateg_Plain @trNm2 @body.cTrf] (acoreVar @trNm2))
                                                    else mkTLB @body.cTrf
  | Let         (lhs.cTrf,loc.levBindSq)    =   mkTrf @trfIsOk @lhs.lev @levOf @trNm $ mkLetTrf @hereBindSq @body.cTrf
%%]


