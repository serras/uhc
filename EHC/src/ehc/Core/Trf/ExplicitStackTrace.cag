%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Add explicit stack trace
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[doesWhat doclatex
Add an explicit stack trace as described by \textit{Finding the needle: stack traces for GHC}, Haskell Symposium 2009, Allwood et.al.

For now, differences are:
\begin{itemize}
\item Do it globally, for all modules, thereby losing sharing for CAFs.
\end{itemize}

Note: currently this trf is placed after renaming identifiers to unique names. It therefore must maintain the unique naming invariant.
However, ideally, this trf should be placed before that, but this currently breaks.

%%]

%%[(99 codegen) hs module {%{EH}Core.Trf.ExplicitStackTrace}
%%]
%%[(99 codegen) hs import({%{EH}Base.HsName.Builtin},{%{EH}Base.Common},{%{EH}Opts},{%{EH}Core},{%{EH}Ty},{%{EH}LamInfo})
%%]

%%[(99 codegen) hs import({%{EH}AbstractCore})
%%]

%%[(99 codegen) hs import(Data.Maybe, qualified Data.Map as Map)
%%]

%%[(99 codegen).WRAPPER ag import({Core/AbsSyn},{Core/CommonLev},{Core/CommonLevAlt},{Core/CommonLevLamPer1Lam},{Core/CommonLevLet},{Core/CommonCtxtPred},{Core/CommonBindNm},{Core/CommonLamInfo},{Core/CommonGathLamInfo})
WRAPPER CodeAGItf
%%]

%%[(99 codegen)
PRAGMA nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(99 codegen) hs export(cmodTrfExplicitStackTrace)
cmodTrfExplicitStackTrace :: EHCOpts -> LamMp -> CModule -> (CModule,LamMp)
cmodTrfExplicitStackTrace opts lamMp cmod
  =  let  t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod))
                             (Inh_CodeAGItf
                               { opts_Inh_CodeAGItf = opts
                               , lamMp_Inh_CodeAGItf = lamMp
                               })
     in   ( cTrf_Syn_CodeAGItf t
          , debugLamMp_Syn_CodeAGItf t `Map.union`
            gathLamMp_Syn_CodeAGItf  t
            -- [ | (n,) <- debugLamMp_Syn_CodeAGItf t ]
          )
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(99 codegen)
ATTR AllCodeNT CodeAGItf [ opts: EHCOpts | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gathering LamInfo, providing hook for Core/CommonLamInfo
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(99 codegen)
SEM CodeAGItf
  | AGItf       loc         .	howUnionGathLamInfo
  												=	Map.union @gathLamMp
%%]

%%[(99 codegen)
SEM CodeAGItf
  | AGItf       loc         .   howMergeLamInfo =   (\(LamInfo {laminfoStackTrace=t}) i -> i {laminfoStackTrace=t})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Binding candidates for tracing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(99 codegen)
ATTR CExpr [ | | isTraceCandidate: Bool ]
ATTR CExpr [ | | traceCandidateLamArgs: {[HsName]}
                 traceCandidateLamBody: CExpr
           ]

SEM CExpr
  | Lam         lhs         .   isTraceCandidate
                                            =   True
                            .   traceCandidateLamArgs
                                            =   @argNm : @body.traceCandidateLamArgs
                            .   traceCandidateLamBody
                                            =   @body.traceCandidateLamBody
  | * - Lam     lhs         .   isTraceCandidate
                                            =   False
                            .   traceCandidateLamArgs
                                            =   []
                            .   traceCandidateLamBody
                                            =   @cTrf

SEM CBound
  | Bind        loc         .   isTraceCandidate
                                            =   @lhs.isGlobal || @expr.isTraceCandidate
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Being in context which provides stack trace
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(99 codegen)
ATTR AllExpr AllBind [ mbInStackTraceCtxt: {Maybe HsName} | | ]

SEM CModule
  | Mod         loc         .   mbInStackTraceCtxt
                                            =   Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Newly bound LamInfo
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Only stack trace info is gathered, and assumed to propagate correctly.

%%[(99 codegen) hs
mbStackTrace :: EHCOpts -> Bool -> HsName -> StackTraceInfo
mbStackTrace opts isCand nm
  | isCand && ehcOptTargetFlavor opts == TargetFlavor_Debug
              = StackTraceInfo_HasStackTraceEquiv (hsnSuffix nm "-$explstacktraced")
  | otherwise = StackTraceInfo_None
%%]

%%[(99 codegen)
SEM CBound
  | Bind        (loc.mbStackTrace,lhs.bindLamMp)
                                            =   let mbt = mbStackTrace @lhs.opts @isTraceCandidate @lhs.nm
                                                in  (mbt,Map.singleton @lhs.nm (emptyLamInfo {laminfoStackTrace = mbt}))
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Local name of stacktrace
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

See note on need of keeping names unique above.

%%[(99 codegen)
ATTR AllCodeNT [ | uniq: Int | ]

SEM CodeAGItf
  | AGItf       loc         .   uniq        =   0

SEM CBound
  | Bind        loc         .   uniq        =   @lhs.uniq + 1
                            .   nmStackTrace=   mkHNm $ "_$" ++ show @lhs.uniq ++ "_stacktrace"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(99 codegen)
ATTR AllBind [ | | bindCTrfL USE {++} {[]}: {[CBind]} ]

SEM CBound
  | Bind        (loc.bindCTrfL,loc.mbInStackTraceCtxt,loc.newLamMp)
                                            =   case @mbStackTrace of
                                                  StackTraceInfo_HasStackTraceEquiv dbNm | @isTraceCandidate
                                                    -> ( [ acoreBind1Cat CBindCateg_Plain dbNm (acoreLam1 @nmStackTrace @expr.cTrf) 
                                                         , acoreBind1MetasTy @lhs.nm @bindMeta.cTrf (acoreTyErr "ExplicitStackTrace.CBound.Bind")
                                                           $ acoreLam   @expr.traceCandidateLamArgs
                                                           $ acoreApp   (acoreVar dbNm)
                                                                        ( acoreVar (ehcOptBuiltin @lhs.opts ehbnDataListAltNil)
                                                                        : map acoreVar @expr.traceCandidateLamArgs
                                                                        )
                                                         ]
                                                       , Just @nmStackTrace
                                                       , Map.fromList
                                                           [ (dbNm, emptyLamInfo {laminfoStackTrace = StackTraceInfo_IsStackTraceEquiv @lhs.nm})
                                                           ]
                                                       )
                                                  _ -> ([acoreBind1Asp1 @lhs.nm @cTrf], @lhs.mbInStackTraceCtxt, Map.empty)
  | * - Bind    loc         .   bindCTrfL   =   [acoreBind1Asp1 @lhs.nm @cTrf]
%%]

%%[(99 codegen)
ATTR AllNT [ | | cTrf: SELF ]
ATTR CodeAGItf [ | | cTrf: CModule ]

SEM CExpr
  | Let         lhs         .   cTrf        =   CExpr_Let @categ @binds.bindCTrfL @body.cTrf
  | Var         lhs         .   cTrf        =   case Map.lookup @nm @lhs.lamMp of
                                                  Just (LamInfo {laminfoStackTrace=StackTraceInfo_HasStackTraceEquiv dbNm})
                                                    -> case @lhs.mbInStackTraceCtxt of
                                                         Just stTrNm
                                                           -> acore1App (acoreVar dbNm)
                                                                        (acoreApp (acoreVar hsnStackTracePush) [acoreBuiltinString @lhs.opts (show @nm), acoreVar stTrNm])
                                                         _ -> @cTrf
                                                  _ -> @cTrf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gathering newly introduced bindings to LamInfo
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(99 codegen)
ATTR
  AllCodeNT
  CodeAGItf
    [ | | debugLamMp USE {`Map.union`} {Map.empty}: LamMp ]

SEM CBound
  | Bind        lhs         .   debugLamMp
                                            =   @newLamMp `Map.union` @expr.debugLamMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional type signatures for AG
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(99 codegen)
SEM CBind
  | *           loc         .   cTrf        :   CBind

SEM CBound
  | *           loc         .   cTrf        :   CBound
%%]

