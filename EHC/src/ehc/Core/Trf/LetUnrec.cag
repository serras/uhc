%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fully lazy code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}Core.Trf.LetUnrec} import({%{EH}Base.Common},{%{EH}Base.HsName.Builtin},{%{EH}Core},{%{EH}Ty}) export(cmodTrfLetUnrec)
%%]

%%[(8 codegen) hs import({%{EH}AbstractCore})
%%]

%%[(8 codegen) hs import({%{EH}Base.Debug},UHC.Util.Utils(scc))
%%]

%%[(8 codegen) hs import(Data.Maybe,qualified Data.Map as Map, qualified Data.Set as Set)
%%]

%%[(8 codegen).WRAPPER ag import({Core/AbsSyn},{Core/CommonLev},{Core/CommonLevAlt},{Core/CommonLevLamPer1Lam},{Core/CommonBindNm},{Core/Trf/CommonFv})
WRAPPER CodeAGItf
%%]

%%[(99 codegen)
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
cmodTrfLetUnrec :: CModule -> CModule
cmodTrfLetUnrec cmod
  =  let  t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod)) Inh_CodeAGItf
     in   cTrf_Syn_CodeAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllNT [ | | cTrf: SELF ]
ATTR CodeAGItf [ | | cTrf: CModule ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Usage (assumption: unique names)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
type UseMp = Map.Map HsName [HsName]

useMpComb :: UseMp -> UseMp -> UseMp
useMpComb = Map.unionWith (++)
%%]

%%[(8 codegen)
ATTR AllCodeNT [ inNmL: {[HsName]} | | useMp USE {`useMpComb`} {Map.empty}: UseMp ]

SEM CodeAGItf
  | AGItf       module      .   inNmL       =   []

SEM CExpr
  | Var         lhs         .   useMp       =   Map.fromList (zip @lhs.inNmL (repeat [@nm]))
  | Let         lhs         .   useMp       =   @remUseMp `useMpComb` @body.useMp
{-
  | Lam			lhs			.	useMp		=	Map.delete @arg @body.useMp

SEM CAlt
  | Alt			lhs			.	useMp		=	foldr Map.delete @expr.useMp @pat.nmL
-}

SEM CBound
  | Bind        expr        .   inNmL       =   @lhs.nm : @lhs.inNmL
                lhs         .   useMp       =   (@lhs.nm `Map.singleton` []) `useMpComb` @expr.useMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Bound id's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
type BindMp = Map.Map HsName (CExpr,CMetas)
%%]

%%[(8 codegen)
ATTR AllBind [ | | bindMp USE {`Map.union`} {Map.empty}: BindMp ]

SEM CBound
  | Bind        lhs         .   bindMp      =   @lhs.nm `Map.singleton` (@expr.cTrf,@bindMeta.cTrf)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Finding SCC's, constructing transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
SEM CExpr
  | Let         loc         .   (remUseMp,cTrf)
                                            =   if @categ == CBindCateg_Rec
                                                then  let  h = Map.filterWithKey (\k e -> k `Map.member` @binds.bindMp) @binds.useMp
                                                           o = scc . Map.toList $ h
                                                           mk c ns b = acoreLet c [ acoreBind1MetasTy n m (acoreTyErr "LetUnrec.CExpr.Let") e | n <- ns, (e,m) <- maybeToList (Map.lookup n @binds.bindMp) ] b
                                                           t = foldr (\bs b
                                                                         -> case bs of
                                                                               [n] | n `elem` Map.findWithDefault [] n h
                                                                                                -> mk CBindCateg_Rec bs b
                                                                                   | otherwise  -> mk CBindCateg_Plain bs b
                                                                               _                -> mk CBindCateg_Rec bs b
                                                                     )
                                                                     @body.cTrf o
                                                      in   (@binds.useMp `Map.difference` h,t)
                                                else  (@binds.useMp,CExpr_Let @categ @binds.cTrf @body.cTrf)
%%]

