%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Globals as args
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Similar to Trf/LamGlobalAsArg, but for CAFs.
Assumes:
- lambdas are already treated by Trf/LamGlobalAsArg, so no free vars of lambdas need to be taken care of.

%%[(8 codegen) hs module {%{EH}Core.Trf.CAFGlobalAsArg} import(UHC.Util.Utils,Data.Maybe,qualified Data.Set as Set,Data.List,qualified Data.Map as Map,{%{EH}Base.Common},{%{EH}Core},{%{EH}Ty}) export(cmodTrfCAFGlobalAsArg)
%%]

%%[(8 codegen) hs import({%{EH}Base.HsName.Builtin},{%{EH}Core.Utils})
%%]

%%[(8 codegen) hs import({%{EH}AbstractCore})
%%]


%%[(8 codegen) hs import(qualified UHC.Util.FastSeq as Seq)
%%]

-- for debug
%%[(8 codegen) hs import({%{EH}Base.Debug},UHC.Util.Pretty)
%%]
%%[(8 codegen) hs import(Debug.Trace)
%%]

%%[(8 codegen).WRAPPER ag import({Core/AbsSyn},{Core/CommonLev},{Core/CommonLevAlt},{Core/CommonLevLamPer1Lam},{Core/CommonCtxtPred},{Core/CommonBindNm},{Core/Trf/CommonFv},{Core/Trf/CommonLev},{Core/Trf/CommonGlobalAsArg},{Core/Trf/CommonFloat})
WRAPPER CodeAGItf
%%]

%%[(9 codegen)
PRAGMA nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
cmodTrfCAFGlobalAsArg :: CModule -> CModule
cmodTrfCAFGlobalAsArg cmod
  =  let  t = wrap_CodeAGItf  (sem_CodeAGItf (CodeAGItf_AGItf cmod))
                              (Inh_CodeAGItf)
     in   cTrf_Syn_CodeAGItf t
%%]

%%[(8 codegen)
ATTR AllNT [ | | cTrf: SELF ]
ATTR CodeAGItf [ | | cTrf: CModule ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unique
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllCodeNT [ | gUniq: Int | ]

SEM CodeAGItf
  | AGItf       module      .   gUniq       =   0

SEM CBound
  | Bind        loc         .   lUniq1      =   @lhs.gUniq
                            .   lUniq2      =   @lUniq1 + 1
                expr        .   gUniq       =   @lUniq2 + Map.size @argMpNew

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Free var of CAFs for which arg lifting is done
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllCodeNT [ fvSCafMp: FvSMp | | ]

SEM CodeAGItf
  | AGItf       module      .   fvSCafMp    =   Map.empty

SEM CExpr
  | Let         loc         .   fvSCafMp    =   (let  start varS = fvsClosure @binds.bindVarS Set.empty varS @lhs.fvSCafMp @binds.fvSMp
                                                 in   case @categ of
                                                        CBindCateg_Rec
                                                          ->  fvsTransClosure lm m
                                                          where (m,lm)  = start (@lhs.varS `Set.union` @binds.bindVarS)
                                                        _ ->  m
                                                          where (m,_)   = start @lhs.varS
                                                )
                                                `Map.union` @lhs.fvSCafMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Mapping of argument names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllCodeNT [ argMp: CVarReplNmMp | | ]

SEM CodeAGItf
  | AGItf       module      .   argMp       =   Map.empty

SEM CBound
  | Bind        expr        .   argMp       =   @argMpNew `Map.union` @lhs.argMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
SEM CBound
  | Bind        loc         .   (argOldL,argNewL,argMpNew)
                                            =   if @loc.isClosurableBind
                                                then  let  mbvs      = Map.lookup @lhs.nm @lhs.fvSCafMp
                                                           vs        = panicJust ("CAFGlobalAsArg.CBind.Bind.argLevL: " ++ show @lhs.nm ++ " not found in " ++ show @lhs.fvSCafMp) mbvs  -- maybe Set.empty id mbvs
                                                           argLevL   = fvLAsArg @lhs.introCVarIntroMp vs
                                                      in   fvLArgRepl @lUniq2 argLevL
                                                else  ([], [], Map.empty)
%%]

%%[(8 codegen)
ATTR AllBind   [ | | varBindSq USE {`Seq.union`} {Seq.empty}: {Seq.Seq CBind}
                     lamBindSq USE {`Seq.union`} {Seq.empty}: {Seq.Seq CBind}
               ]

SEM CBound
  | Bind        loc         .   nmLam       =   mkFvNm @lUniq1 @lhs.nm
                            .   cTrfVar     =   acoreBind1MetasTy @lhs.nm @bindMeta.cTrf (acoreTyErr "CAFGlobalAsArg.CBound.Bind.cTrfVar")
                                                $ acoreApp (acoreVar @nmLam)
                                                $ map (\(n,cvi) -> (fvVarRepl @lhs.argMp n)) @argOldL
                            .   cTrfLam     =   acoreBind1CatTy CBindCateg_Plain @nmLam (acoreTyErr "CAFGlobalAsArg.CBound.Bind.cTrfLam")
                                                $ acoreLam [(n) | (n,cvi) <- @argNewL] @expr.cTrf
                lhs         .   (varBindSq,lamBindSq)
                                            =   if null @argNewL
                                                then (Seq.singleton (acoreBind1Asp1 @lhs.nm @cTrf   ) , Seq.empty             )
                                                else (Seq.singleton                         @cTrfVar  , Seq.singleton @cTrfLam)
  -- | FFI
%%[[90
  | FFE
                lhs         .   varBindSq   =   Seq.singleton (acoreBind1Asp1 @lhs.nm @cTrf)
%%]]

SEM CExpr
  | Var         lhs         .   cTrf        =   fvVarRepl @lhs.argMp @nm
  | Let         lhs         .   cTrf        =   acoreLet CBindCateg_Plain (Seq.toList @binds.lamBindSq)
                                                $ acoreLet @categ (Seq.toList @binds.varBindSq)
                                                $ @body.cTrf
%%]
