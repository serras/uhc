%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Used module names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(50 codegen) hs module {%{EH}Core.UsedModNms} import(qualified Data.Set as Set,Data.Maybe)
%%]

%%[(50 codegen) hs import({%{EH}Base.Common},{%{EH}Base.HsName.Builtin},{%{EH}Core},{%{EH}Ty})
%%]

%%[(50 codegen).WRAPPER ag import({Core/AbsSyn},{Core/CommonBindNm})
WRAPPER CodeAGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(50 codegen) hs export(cmodUsedModNms)
cmodUsedModNms
  :: CModule
     -> ( HsNameS		-- usedModNmS
        , HsNameS		-- introducedModNmS
        )
cmodUsedModNms m
  = ( usedModNmS_Syn_CodeAGItf t
    , introducedModNmS_Syn_CodeAGItf t
    )
  where t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf m)) Inh_CodeAGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Util
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(50 codegen) hs
collapseToModNm :: HsNameS -> HsNameS
collapseToModNm = Set.unions . Set.toList . Set.map (Set.fromList . maybeToList . hsnQualifier)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Used module names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

It is necessary to gather used modules because of re-exporting there may be references to modules which are not imported explicitly.

%%[(50 codegen)
ATTR AllCodeNT [ | | usedNmS USE {`Set.union`} {Set.empty}: HsNameS ]
ATTR CodeAGItf [ | | usedModNmS: HsNameS ]
%%]

20090127: The gathering is not yet complete...

%%[(50 codegen)
SEM CExpr
  | Var         lhs         .   usedNmS                 =   Set.singleton @nm 
  | Lam         lhs         .   usedNmS                 =   Set.delete @argNm @body.usedNmS
  | Let         loc         .   usedNmSInBinds          =   case @categ of
                                                                CBindCateg_Rec  -> @binds.usedNmS `Set.difference` @binds.introducedNmS
                                                                _               -> @binds.usedNmS
                            .   usedNmSInBody           =   @body.usedNmS `Set.difference` @binds.introducedNmS
                lhs         .   usedNmS                 =   @usedNmSInBinds `Set.union` @usedNmSInBody
{-
-}

SEM CAlt
  | Alt         lhs			.	usedNmS     			=   @expr.usedNmS `Set.difference` Set.fromList @pat.fldNmL

SEM CodeAGItf
  | AGItf       lhs         .   usedModNmS  			=   collapseToModNm $ @module.usedNmS `Set.difference` @module.introducedNmS
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Extract all module names of globally introduced identifers
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(50 codegen)
ATTR CModule CExpr AllBindOnly [ | | introducedNmS USE {`Set.union`} {Set.empty} : {HsNameS} ]
ATTR CodeAGItf [ | | introducedModNmS: {HsNameS} ]

SEM CBind
  | Bind        lhs         .   introducedNmS      		=   Set.singleton @nm

SEM CodeAGItf
  | AGItf       lhs         .   introducedModNmS  		=   collapseToModNm @module.introducedNmS

%%]

