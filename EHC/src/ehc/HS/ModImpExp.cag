%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell interface to module import/export info extraction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%[50 hs module {%{EH}HS.ModImpExp} import({%{EH}Base.HsName.Builtin},{%{EH}Base.Common}, {%{EH}Opts}, {%{EH}HS}, {%{EH}Gam.Full}, {%{EH}NameAspect})
%%]

%%[50 hs export(Inh_AGItf(..),Syn_AGItf(..),sem_AGItf,wrap_AGItf)
%%]

%%[50 hs import(qualified Data.Set as Set,qualified Data.Map as Map,Data.Maybe)
%%]

%%[50 hs import(qualified UHC.Util.Rel as Rel,{%{EH}Module.ImportExport})
%%]

%%[97 hs import({%{EH}Base.Debug} as Debug, UHC.Util.Pretty)
%%]

%%[99 hs import ({%{EH}Base.Target})
%%]
%%[99 hs import(qualified {%{EH}Base.Pragma} as Pragma)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Import of all separate aspects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[50 ag import({HS/AbsSyn},{HS/NameLevel},{HS/NameDef},{HS/Module},{HS/Uniq})
WRAPPER AGItf
%%]

%%[99 ag import({HS/Pragmas})
%%]

%%[99
PRAGMA strictcase
PRAGMA novisit nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[50
ATTR AGItf AllModuleDeclaration AllExpression [ opts: EHCOpts | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Top level instance names, to be propagated to next phase -- a hack :-(
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[50
ATTR AllNT [ | topInstanceNmL: {[HsName]} | ]

SEM Declaration
    | Class Instance InstanceUseImplicitly
        lhs             .   topInstanceNmL
                                        =   @instancename : @lhs.topInstanceNmL

SEM AGItf
    | AGItf
        loc             .   topInstanceNmL
                                        =   []
%%]

%%[91
SEM Deriving
    | Deriving
        lhs             .   topInstanceNmL
                                        =   @instancename : @lhs.topInstanceNmL
%%]

%%[50
SEM Declaration
    | Class Instance InstanceUseImplicitly
        loc             .   mbPrevInstancename
                                        =   Nothing
%%]

%%[91
SEM Deriving
    | Deriving
        loc             .   mbPrevInstancename
                                        =   Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Does 'main' exists? -- also a hack :-(
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[50
ATTR
  AGItf AllTopLevel AllDeclarationPlain AllFunctionBinding LeftHandSide Pattern Patterns
    [ | | mainValExists USE {||} {False}: Bool ]
%%]

%%[50
SEM LeftHandSide
    | Function
        loc             .   mainValExists
        								=   @name == hsnMain


SEM Pattern
    | Variable
        loc             .   mainValExists
        								=   @name == hsnMain
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Dummy def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[99
SEM Declaration
    | Class
        loc             .   generDerivInfoL
                                        =   []
%%]
