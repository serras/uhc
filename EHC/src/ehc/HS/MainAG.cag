%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell interface to AG generated code for compiler
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%[1 hs module {%{EH}HS.MainAG}
%%]

%%[1 hs import(Data.Char,Data.Maybe,Data.List as List,qualified Data.Map as Map,UHC.Util.Pretty,{%{EH}Base.Common},{%{EH}Base.TermLike},{%{EH}Base.HsName.Builtin},{%{EH}Opts},{%{EH}Gam.Full},{%{EH}Error},{%{EH}Error.Pretty}, {%{EH}HS}, {%{EH}NameAspect}, UHC.Util.DependencyGraph)
%%]

%%[1 hs import(qualified UHC.Util.FastSeq as Seq,UHC.Util.Utils)
%%]

%%[1 hs import(qualified {%{EH}EH} as EH)
%%]

%%[1 hs export(Inh_AGItf(..),Syn_AGItf(..),sem_AGItf,wrap_AGItf)
%%]

%%[3 hs import(qualified Data.Set as Set)
%%]

%%[4 hs import({%{EH}Ty}(tyQu_Forall,tyQu_Exists))
%%]

%%[8 hs export(tyGam2IdDefOccGam,kiGam2IdDefOccGam)
%%]

%%[8 hs import ({%{EH}Base.Target})
%%]

%%[9 hs export(clGam2IdDefOccGam)
%%]

%%[9 hs import({%{EH}Gam.ClGam})
%%]

%%[50 hs import(qualified UHC.Util.Rel as Rel,{%{EH}Module.ImportExport})
%%]

%%[90 hs import({%{EH}Foreign},{%{EH}Foreign.Parser})
%%]

%%[97 hs import(Data.Ratio,{%{EH}Scanner.Common(floatDenot2NomDenom,intDenot2Integer)})
%%]

%%[97 hs import({%{EH}Base.Debug} as Debug)
%%]

%%[99 hs import(qualified {%{EH}Base.Pragma} as Pragma)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Import of all separate aspects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 ag import({HS/AbsSyn},{HS/ToEH},{HS/Fixity},{HS/Pretty},{HS/GatherError},{HS/ExtraChecks},{HS/NameLevel},{HS/NameDef},{HS/NameAnalysis},{HS/Uniq})
WRAPPER AGItf
%%]

%%[99 ag import({HS/Pragmas})
%%]

%%[3
PRAGMA novisit nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1
ATTR AGItf AllNT [ opts: EHCOpts | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tying together gam's, combining with imported info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[50
ATTR AGItf Module Body [ modEntToOrig: ModEntRngMp | | gathIdGam: IdDefOccGam ]
%%]

%%[50
SEM Body
    | Body
        lhs             .   gathIdGam   =   {- idDefOccGamStrip 
                                              $ -}
                                                @declarations.idDefOccGam
                                                `gamUnion`
                                                assocLToGam [ (o {ioccNm = hsnSetQual @lhs.moduleNm (ioccNm o)},d)
                                                            | (o,d) <- gamToAssocL @lhs.idGam
                                                            , n <- Map.findWithDefault [] o @lhs.modEntToOrig
                                                            ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Misc: Kind internal info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6
ATTR Kind [ | | conNm: Name ]

SEM Kind
    | Constructor
        lhs         .   conNm       =   @name
    | * - Constructor
        lhs         .   conNm       =   hsnUnknown
%%]

%%[6
ATTR AllKind [ | | freeTvarS USE {`Set.union`} {Set.empty}: HsNameS ]

SEM Kind
    | Variable
        lhs         .   freeTvarS   =   Set.singleton @name
    | Forall
        lhs         .   freeTvarS   =   @kind.freeTvarS `Set.difference` Set.fromList @kindvariables
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Misc: Type internal info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[3
ATTR
  AllType
%%[[9
  AllContextItem
%%]]
%%[[12
  AllContextedPattern
%%]]
    [ | | freeTvarS USE {`Set.union`} {Set.empty}: HsNameS ]

SEM Type
    | Variable NamedWildcard
        lhs         .   freeTvarS   =   Set.singleton @name
%%[[4
    | Forall Exists
        lhs         .   freeTvarS   =   @type.freeTvarS `Set.difference` Set.fromList @typevariables
%%]]
%%]

%%[10
SEM ContextItem
%%[[13
    | Forall
        lhs         .   freeTvarS   =   @context.freeTvarS `Set.difference` Set.fromList @typevariables
%%]]
%%[[10
    | RowLacksLabel
        lhs         .   freeTvarS   =   Set.singleton @rowvariable
%%]]
%%]

%%[9
ATTR Type [ | | mbRefConNm: {Maybe Name} ]

SEM Type
    | Constructor
        lhs         .   mbRefConNm  =   Just @refname
    | * - Constructor
        lhs         .   mbRefConNm  =   Nothing
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Info required to determine whether type application is actually a type context prefix
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
data TypeConFixedMeaning
  = TyConIsOther
  | TyConIsPrArrow
%%[[31
  | TyConIsEqTilde
%%]]
  deriving Eq
%%]

%%[9
ATTR Type [ | | tyConIs: TypeConFixedMeaning ]

SEM Type
    | Constructor
        loc         .   tyConIs     =   if      hsnIsPrArrow @name then TyConIsPrArrow
%%[[31
                                        else if hsnIsEqTilde @name then TyConIsEqTilde
%%]]
                                        else                            TyConIsOther
    | NormalApplication
        lhs         .   tyConIs     =  	@function.tyConIs
    | * - Constructor NormalApplication Annotate
        lhs         .   tyConIs     =   TyConIsOther
%%]

%%[9
ATTR Types Type AllRowTypeUpdate [ isAsPred: Bool | | ]

SEM Type
    | InfixApplication
        leftType    .   isAsPred    =   @lhs.isAsPred || @operator.tyConIs == TyConIsPrArrow
    | NormalApplication
        arguments   .   isAsPred    =   False
 	| * - InfixApplication NormalApplication Parenthesized Annotate RowRecUpdate InfixApplicationChainTop
%%[[11
 	      TupleConstructor
%%]]
 		loc			.	isAsPred	=	False

SEM Constructor
    | Constructor Infix
%%[[31
      GADTFunction
%%]]
        loc         .   isAsPred    =   False

SEM FieldDeclaration
    | FieldDeclaration
        loc         .   isAsPred    =   False

SEM Declaration
    | Instance
        loc         .   isAsPred    =   True -- False -- True
    | * - Instance
        loc         .   isAsPred    =   False

SEM MaybeType Pattern Expression
    | *
        loc         .   isAsPred    =   False

SEM ContextItem
    | Class
%%[[31
      Equal
%%]]
        loc         .   isAsPred    =   False

SEM LeftHandSide
    | Typed
        loc         .   isAsPred    =   False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generate either a plain type variable or a wildcard
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
ATTR
  Type MaybeType
%%[[7
  AllRowTypeUpdate
%%]]
    [ doGenVarWild: Bool | | ]

SEM LeftHandSide
    | Typed
        loc         .   doGenVarWild=   True

SEM Types
    | Cons
        loc         .   doGenVarWild=   False

SEM Pattern
    | Typed
        loc         .   doGenVarWild=   False

SEM Expression
    | Typed
        loc         .   doGenVarWild=   False

SEM Declaration
    | *
        loc         .   doGenVarWild=   False

SEM Constructor
    | Constructor Infix
%%[[31
      GADTFunction
%%]]
        loc         .   doGenVarWild=   False

SEM FieldDeclaration
    | FieldDeclaration
        loc         .   doGenVarWild=   False
%%]

%%[31
SEM ContextItem
    | Equal
        loc         .   doGenVarWild=   False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data decl has fields?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllConstructor [ | | hasFlds USE {||} {False}: Bool ]

SEM Constructor
    | Record
        lhs         .   hasFlds     =   True
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is toplevel mod? Is main mod?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[50
ATTR AllModule AGItf [ isTopMod : Bool | | ]
ATTR AllModule       [ isMainMod: Bool | | ]
%%]

%%[50
SEM AGItf
    | AGItf
        loc         .   isMainMod   =   @module.mainValExists
%%]

%%[99
-- to keep uuagc happy with a not-used dummy value
SEM Declaration
    | Module
        loc         .   isMainMod   =   False
                    .   isTopMod    =   False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is a pattern just a binding, or really inspecting something?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2
ATTR Pattern [ | | isVar: Bool ]
%%]

%%[2
SEM Pattern
    | Variable
        lhs         .   isVar       =   True
    | * - Variable As Parenthesized Annotate
%%[[4
          Typed
%%]]
%%[[8
          Irrefutable Bang
%%]]
        lhs         .   isVar       =   False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Must rhs of pattern binding be enforced to be monomorphic?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2
ATTR RightHandSide AllGuardedExpression [ mustBeMono: Bool | | ]
%%]

%%[2
SEM Declaration
    | PatternBinding
        righthandside   .   mustBeMono  =   not @pattern.isVar

SEM FunctionBinding
    | FunctionBinding
        righthandside   .   mustBeMono  =   False
%%]

%%[5
SEM Alternative
    | Alternative
        righthandside   .   mustBeMono  =   False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Top level instance names, propagated from prev phase -- a hack :-(
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[50 hs
extrTopInstanceNm :: [HsName] -> (Maybe HsName,[HsName])
extrTopInstanceNm nms
  = case nms of
      (n:t) -> (Just n,t)
      _     -> (Nothing,[])
%%]

%%[50
ATTR AllNT [ | topInstanceNmL: {[HsName]} | ]
ATTR AGItf [ topInstanceNmL: {[HsName]} | | ]

SEM Declaration
    | Class Instance InstanceUseImplicitly
        (loc.mbPrevInstancename,lhs.topInstanceNmL)
                                        =   extrTopInstanceNm @lhs.topInstanceNmL
%%]

%%[91
SEM Deriving
    | Deriving
        (loc.mbPrevInstancename,lhs.topInstanceNmL)
                                        =   extrTopInstanceNm @lhs.topInstanceNmL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Distribution of pragmas
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[99
ATTR Body AllDeclaration AllExpression [ pragmas: {Set.Set Pragma.Pragma} | | ]

SEM Module
    | Module
        body            .   pragmas     =   @fileHeaderPragmas

SEM Body
    | Body
        loc             .   pragmas     =   @declarations.gathPragmas `Set.union` @lhs.pragmas
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Distribution of info derived from pragmas: class derivables
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Assumption:
The DERIVABLE pragma occurs in the same module as the class + generic definitions,
so it does not participate in name analysis etc, and we brutally qualify the involved names.

%%[99
ATTR AllDeclaration AllExpression [ generDerivMp: {Map.Map HsName [(HsName,HsName)]} | | ]

SEM Body
    | Body
        declarations    .   generDerivMp=   let nm n = hsnSetLevQual @lhs.nmLev @lhs.moduleNm n
                                            in  Map.unionsWith (++)
                                                    [ Map.singleton (nm clNm) [(nm fldNm,nm dfltNm)]
                                                    | (Pragma.Pragma_Derivable clNm fldNm dfltNm) <- Set.toList @pragmas
                                                    ]

SEM Declaration
    | Class
        loc             .   generDerivInfoL
                                        =   Map.findWithDefault [] @classrefname @lhs.generDerivMp
%%]

%%[9999
-- to keep uuagc happy with a not-used dummy value
SEM Module
    | Module
        loc             .   generDerivMp=   Map.empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Foreign entities
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM Declaration
    | ForeignImport
%%[[8
        loc         .   ent         =   maybe (show @name) id @importname
%%][90
        loc         .   nmForParse 	=	maybe "" id @importname
                    . 	(ent,entErrs)
                                    =   parseForeignEnt ForeignDirection_Import @callconvention (Just $ show @name) @nmForParse
%%]]
%%]
