%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Introduce weird constructs in TyCore.
%%%
%%% These constructs would not be created by Haskell, but might be the result of
%%% transformations.
%%%
%%% All are valid TyCore expressions.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi) hs module {%{EH}TyCore.Trf.IntroduceWeirdConstructs}
%%]

%%[(8 codegen tycore tauphi) hs import({%{EH}AbstractCore})
%%]
 
%%[(8 codegen tycore tauphi) hs import({%{EH}Base.HsName.Builtin},{%{EH}Opts},{%{EH}Base.Common})
%%]

%%[(8 codegen tycore tauphi) hs import(Data.Maybe)
%%]

%%[(8 codegen tycore tauphi) hs import({%{EH}TyCore})
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapping
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi).WRAPPER ag import({TyCore/AbsSyn})
WRAPPER AGItf
%%]

%%[(8 codegen tycore tauphi)
PRAGMA nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi).tcmodTrfIntroduceWeirdConstructs hs
cmodTrfIntroduceWeirdConstructs :: Module -> Module
cmodTrfIntroduceWeirdConstructs tcmod
  =  let  t = wrap_AGItf (sem_AGItf (AGItf_AGItf tcmod)) Inh_AGItf
     in   cTrf_Syn_AGItf t
%%]

%%[(8 codegen tycore tauphi)
ATTR AGItf [ | | cTrf : Module ]
ATTR AllCodeNT
  [
    atTopLevel : {Bool}
  |
  |
    cTrf : SELF
  ]

SEM AGItf
  | AGItf       lhs         .   cTrf        =   @module.cTrf
                module      .   atTopLevel  =   True

SEM ValBindL
  | Cons
                lhs         .   cTrf        =   if @lhs.atTopLevel
                                                then dummy ++ @cTrf
                                                else @cTrf
                loc         .   atTopLevel  =   False

{
dummy :: [ValBind]
dummy =
  [
    ValBind_Val
      (eseq [bind "three" int])
      Nothing
      0
      (eseq [val $ Expr_Int 3 int])

  , ValBind_Val
      (eseq [ bind "foo1" (seqInt `arr` eseq [val char, val char] `arr` seqInt)
            ])
      Nothing
      0
      (eseq [val (Expr_Lam
                    (eseq [bind "x" int])
                    (Expr_Lam
                      (eseq [bind "c" char, bind "d" char])
                      (single $ var "x")))
            ])

  , ValBind_Val
      (eseq [ bind "foo2" (seqInt `arr` eseq [val char, val char] `arr` seqInt `arr` seqInt)
            ])
      Nothing
      0
      (eseq [val (Expr_Lam
                    (eseq [bind "x" int])
                    (Expr_Let
                       ValBindCateg_Plain
                       [ ValBind_Val
                           (eseq [bind "y" int])
                           Nothing
                           0
                           (eseq [val $ Expr_Int 3 int])
                       ]
                       (Expr_Lam
                         (eseq [bind "c" char, bind "d" char])
                         (Expr_Lam (eseq [bind "y" int]) (single $ var "x")))))
            ])

  , ValBind_Val
      (eseq [ bind "foo3" (seqInt `arr` seqInt)
            , bind "foo4" (seqInt `arr` seqChar `arr` seqInt)
            ])
      Nothing
      0
      (eseq [ val $ Expr_Lam (eseq [bind "x" int]) (single $ var "x")
            , val $ Expr_Lam (eseq [bind "x" int]) (Expr_Lam (eseq [bind "y" char]) (single $ var "x"))
            ])

  , ValBind_Val
      (eseq [ bind "foo5" $ Expr_Lazy (seqInt `arr` seqChar `arr` seqInt)
            ])
      Nothing
      0
      (eseq [ val $ Expr_Delay $ Expr_Lam (eseq [bind "x" int]) (Expr_Lam (eseq [bind "y" char]) (single $ var "x"))
            ])

  , ValBind_Val
      (eseq [ bind "foo6" $ lazy (eseq [val int, val char]) `arr` seqInt
            ])
      Nothing
      0
      (eseq [val (Expr_Lam
                    (eseq [bind "x" (Expr_Lazy (eseq [val int, val char]))])
                    (Expr_Let
                       ValBindCateg_Plain
                       [ ValBind_Val
                           (eseq [bind "y" int, bind "z" char])
                           Nothing
                           0
                           (Expr_Force $ var "x")
                       ]
                       (single $ var "y")))
            ])

  , ValBind_Val
      (eseq [ bind "foo8" $ eseq [ val $ Expr_Lazy (seqInt `arr` seqChar `arr` seqInt) ] `arr` seqInt
            ])
      Nothing
      0
      (eseq [ val $ Expr_Lam (eseq [bind "f" $ Expr_Lazy (seqInt `arr` seqChar `arr` seqInt)]) (single $ Expr_Int 4 int)
            ])

  , ValBind_Val
      (eseq [ bind "foo9a" $ (lazy $ strict int) `arr` seqChar `arr` seqInt
            ])
      Nothing
      0
      (eseq [ val $ Expr_Lam (eseq [bind "x" $ Expr_Lazy (strict int)]) (Expr_Let ValBindCateg_Plain [] $ Expr_Lam (eseq [bind "y" char]) (Expr_Force $ var "x"))
            ])

  , ValBind_Val
      (eseq [ bind "foo9b" $ (eseq [val $ Expr_Lazy (strict int), val char]) `arr` seqInt `arr` (lazy $ eseq [val $ strict char]) `arr` seqInt
            ])
      Nothing
      0
      (eseq [ val $ Expr_Lam (eseq [bind "ax" $ Expr_Lazy (strict int), bind "bx" char])
                             (Expr_Lam (eseq [bind "ay" int])
                                       (Expr_Let ValBindCateg_Plain [] $ Expr_Lam (eseq [bind "az" $ Expr_Lazy (eseq [val $ strict char])]) (Expr_Force $ var "ax")))
            ])

  , ValBind_Val
      (eseq [ bind "foo9" $ (lazy $ strict int) `arr` seqChar `arr` seqInt
            ])
      Nothing
      0
      (eseq [ val $ Expr_Lam (eseq [bind "x" $ Expr_Lazy (strict int)]) (Expr_Lam (eseq [bind "y" char]) (Expr_Force $ var "x"))
            ])

  , ValBind_Val
      (eseq [ bind "foo10" (lazy (eseq [val $ strict int, val $ strict char]) `arr` seqInt)
            , bind "bar10" (lazy (eseq [val $ strict int, val $ char]) `arr` seqInt)
            ])
      Nothing
      0
      (eseq [ val (Expr_Lam
                    (eseq [bind "x" $ Expr_Lazy (eseq [val $ strict int, val $ strict char])])
                    (var "bar10" `Expr_App` eseq [val $ var "x"]))
            , val (Expr_Lam
                    (eseq [bind "x" $ Expr_Lazy (eseq [val $ strict int, val $ char])])
                    (single (Expr_Int 4 int)))
            ])

  , ValBind_Val
      (eseq [ bind "foo10a" (lazy (eseq [val $ strict int, val $ strict char]) `arr` seqChar `arr` seqInt)
            , bind "bar10a" (lazy (eseq [val $ strict int, val $ char]) `arr` seqInt)
            ])
      Nothing
      0
      (eseq [ val (Expr_Lam
                    (eseq [bind "x" $ Expr_Lazy (eseq [val $ strict int, val $ strict char])])
                    (Expr_Lam (eseq [bind "c" char])
                      (var "bar10a" `Expr_App` (eseq [val $ Expr_Delay $ force $ var "x"]))))
            , val (Expr_Lam
                    (eseq [bind "x" $ Expr_Lazy (eseq [val $ strict int, val $ char])])
                    (single (Expr_Int 4 int)))
            ])

  , ValBind_Val
      (eseq [ bind "foo11" (eseq [val $ Expr_Lazy (eseq [val $ strict int]), val char] `arr` seqInt)
            ])
      Nothing
      0
      (eseq [ val (Expr_Lam
                    (eseq [bind "x" $ Expr_Lazy (eseq [val $ strict int]), bind "y" char])
                    (Expr_Force $ var "x"))
            ])

  , ValBind_Val
      (eseq [ bind "foo11a" (eseq [val $ Expr_Lazy (eseq [val $ int]), val char] `arr` seqInt)
            ])
      Nothing
      0
      (eseq [ val (Expr_Lam
                    (eseq [bind "x" $ Expr_Lazy (eseq [val $ int]), bind "y" char])
                    (Expr_Force $ var "x"))
            ])

  , ValBind_Val
      (eseq [ bind "foo12" (eseq [val $ Expr_Lazy (eseq [val $ strict int, val $ strict char]), val int] `arr` seqInt)
            ])
      Nothing
      0
      (eseq [ val (Expr_Lam
                    (eseq [bind "x" $ Expr_Lazy (eseq [val $ strict int, val $ strict char]), bind "y" int])
                    (single $ var "y"))
            ])

  , ValBind_Val
      (eseq [ bind "foo13" (eseq [ val $ Expr_Lazy (eseq [val $ strict int, val $ char])
                                 , val $ Expr_Lazy (eseq [val $ strict char, val $ strict char])
                                 ]
                                    `arr` seqInt
                                        `arr` seqInt)
            ])
      Nothing
      0
      (eseq [ val (Expr_Lam (eseq [ bind "x" $ Expr_Lazy (eseq [val $ strict int, val $ char])
                                  ,  bind "y" $ Expr_Lazy (eseq [val $ strict char, val $ strict char])
                                  ])
                                  (Expr_Lam (eseq [ bind "z" int])
                                           (single $ Expr_Int 2 int)
                                  )
                  )
            ])

  , ValBind_Val
      (eseq [ bind "foo14" (eseq [ val $ Expr_Lazy (eseq [val $ strict int, val $ strict char])
                                 , val $ Expr_Lazy (eseq [val $ strict char, val $ strict char])
                                 ]
                                    `arr` seqInt `arr` seqInt)
            ])
      Nothing
      0
      (eseq [ val (Expr_Lam
                    (eseq [ bind "x" $ Expr_Lazy (eseq [val $ strict int, val $ strict char])
                          , bind "y" $ Expr_Lazy (eseq [val $ strict char, val $ strict char])
                          ])
                    (Expr_Lam (eseq [ bind "z" int])
                              (single $ var "z")))
            ])
  ]
  where
    int  = var "Int"
    char = var "Char"
    seqInt  = eseq [val int]
    seqChar = eseq [val char]
    strict  = Expr_Ann (ExprAnn_Strictness Strictness_Strict)

    single e   = eseq [val e]
    force e    = Expr_Force e
    lazy ty    = single $ Expr_Lazy ty
    val e      = ExprSeq1_L0Val e
    var nm     = Expr_Var $ mkHNm nm
    eseq es    = Expr_Seq es
    bind nm ty = ExprSeq1_L0Bind (mkHNm nm) ty

infixr 5 `arr`

arr :: Expr -> Expr -> Expr
arr = Expr_Arrow
}
%%]

