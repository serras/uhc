%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Optimize TyCore based on strictness annotations
%%%
%%% Note, this transformation:
%%%  - Requires explicit Lazy/Delay/Force constructs
%%%  - Be careful when printing Seq attributes, using unsafe operation such as Debug.Trace,
%%%    these attributes can be defined circularly, forcing it unsafe can cause infinite loops
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi) hs module {%{EH}TyCore.Trf.OptimizeStrictness2of2}
%%]

%%[(8 codegen tycore tauphi) hs import({%{EH}TyCore.Trf.Common})
%%]

%%[(8 codegen tycore tauphi) hs import({%{EH}AbstractCore})
%%]
 
%%[(8 codegen tycore tauphi) hs import({%{EH}Base.HsName.Builtin},{%{EH}Opts},{%{EH}Base.Common})
%%]

%%[(8 codegen tycore tauphi) hs import(Control.Applicative)
%%]

%%[(8 codegen tycore tauphi) hs import(Data.Maybe, Data.Monoid, Data.List)
%%]

%%[(8 codegen tycore tauphi) hs import(qualified Data.Map as Map)
%%]

%%[(8 codegen tycore tauphi) hs import({%{EH}TyCore})
%%]

%%[(8 codegen tycore tauphi) hs import(UHC.Util.Utils)
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapping
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi).WRAPPER ag import({TyCore/Trf/ConstructTypeEnvironment})
WRAPPER AGItf
%%]

%%[(8 codegen tycore tauphi)
PRAGMA nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi).tcmodTrfOptimizeStrictness2of2 hs
cmodTrfOptimizeStrictness2of2 :: Module -> Module
cmodTrfOptimizeStrictness2of2 tcmod
  = let  t = wrap_AGItf (sem_AGItf (AGItf_AGItf tcmod)) Inh_AGItf
    in   cTrf_Syn_AGItf t
%%]

%%[(8 codegen tycore tauphi)
ATTR AGItf [ | | cTrf : Module ]

SEM AGItf
  | AGItf       lhs         .   cTrf        =   @module.cTrf
%%]

%%[(8 codegen tycore tauphi)
ATTR AllCodeNT
  [
  |
  | cTrf    : SELF
    wrapper : SELF
  ]
ATTR AllExpr
  [ newParams   : {Map.Map HsName (Maybe ValBind, [ExprSeq1])}
  |
  |
  ]
ATTR Expr
  [
  |
  |
    mbVarNm    USE {<|>} {Nothing} : {Maybe HsName}
    appArgs    USE {++}  {[]}      : {[Expr]}
    wrapperArgs                    : {[Expr]}
  ]
ATTR AllExprBase
  [
    workWrapSeq : {Seq WorkWrap}
    workWrap    : {WorkWrap}
    bindType    : {BindType}
    lamArgsSeq  : {Seq [[Expr]]}
    lamArgs     : {[[Expr]]}
    workerNmSeq : {Seq HsName}
    workerNm    : {HsName}
  |
  |
    workWrap    USE {|||}       {Ignored}   : {WorkWrap}
    workWrapSeq USE {`mappend`} {mempty}    : {Seq WorkWrap}
    lamArgsSeq  USE {`mappend`} {mempty}    : {Seq [[Expr]]}
    lamArgs                                 : {[[Expr]]}
    wrapperSeq  USE {`mappend`} {mempty}    : {Seq Expr}
    workerNmSeq USE {`mappend`} {mempty}    : {Seq HsName}
  ]


SEM Module
  | Mod         loc         .   newParams   =   panic $ "TyCore.Trf.OptimizeStrictness1of2: Mod.*.newParams not initialized"

-- Worker/Wrapper
SEM ExprSeq1L
  | Cons
                lhs         .   cTrf        =   if @lhs.bindType == NoBind
                                                then @cTrf
                                                else case head @lhs.workWrapSeq of
                                                       UpdatedWrapper -> @hd.wrapper : @tl.cTrf
                                                       _              -> @hd.cTrf    : @tl.cTrf
                            .   workWrapSeq =   @hd.workWrap : @tl.workWrapSeq
                hd
                            .   workWrap    =   head @lhs.workWrapSeq
                            .   workerNm    =   head @lhs.workerNmSeq
                            .   bindType    =   NoBind
                tl
                            .   workWrapSeq =   tail @lhs.workWrapSeq
                            .   workerNmSeq =   tail @lhs.workerNmSeq

SEM ExprSeq1
  | L0Val
                l0          .   newParams   =   strictParams @l0.wrapperArgs
  | L0Bind L1Bind L2Bind
                lhs         .   workerNmSeq =   [@workerNm]
                loc         .   workWrap    =   case (@isWorker, @isWrapper) of
                                                  (False, True) -> UpdatedWrapper
                                                  (_,     _)    -> Ignored
                            .   workerNm    =   hsnFromString (show @nm ++ "_worker")
                            .   isWorker    =   "_worker" `isSuffixOf` show @nm
                            .   isWrapper   =   hsnFromString (show @nm ++ "_worker") `Map.member` @lhs.tyEnv
                            .   hasWorker   =   any (\x -> length x > 1) @lhs.lamArgs


SEM ValBind
  | Val
                bind        .   bindType    =   NameTypeBind
                            .   lamArgsSeq  =   @lamArgsSeq
                            .   workWrapSeq =   @bind.workWrapSeq
                            --  Dummy data
                            .   lamArgs     =   []

                l0          .   bindType    =   BodyBind
                            .   lamArgsSeq  =   @lamArgsSeq
                            .   workWrapSeq =   @bind.workWrapSeq
                            .   workerNmSeq =   @bind.workerNmSeq

                bindMeta    .   bindType    =   NoBind
                loc         .   lamArgsSeq  =   @l0.lamArgsSeq ++ repeat [] -- example: let [x, y] = dup [3]

                            -- Initialize attributes, to prevent warnings
                bind        .   workWrap    =   @err "bind.workWrap"
                            .   workerNmSeq =   @err "bind.workerNmSeq"
                            .   workerNm    =   @err "bind.workerNm"
                l0          .   workerNm    =   @err "l0.workerNm"
                bindMeta    .   workerNm    =   @err "bindMeta.workerNm"
                loc         .   err         =   \s -> panic $ "TyCore.Trf.OptimizeStrictness1of2: ValBind." ++ s ++ " not initialized"

SEM Expr
  | Let
                lhs         .   lamArgs     =   [] : @body.lamArgs
  | Lam
                lhs         .   lamArgs     =   list (\xs xss -> (@arg.cTrf : xs) : xss) [[@arg.cTrf]] @res.lamArgs
                lhs         .   wrapperArgs =   @arg.copy : @res.wrapperArgs
  | * - Lam Let
                lhs         .   lamArgs     =   []
                lhs         .   wrapperArgs =   []

SEM Expr
  | App
                lhs         .   wrapper     =   if @func.mbVarNm == Just @lhs.workerNm
                                                then updatedWrapperApp @lhs.workerNm @appArgs @lhs.newParams
                                                else @wrapper
                loc         .   appArgs     =   @func.appArgs ++ [@arg.copy]
  | Var
                lhs         .   mbVarNm     =   Just @nm

  -- Code below not correct, removes annotations that shouldn't have
  | Ann
                lhs         .   wrapper     =   if @ann.cTrf == ExprAnn_Strictness Strictness_Strict
                                                then @expr.wrapper
                                                else @wrapper

{
strictParams :: [Expr] -> Map.Map HsName (Maybe ValBind, [ExprSeq1])
strictParams args = Map.unions $ map (Map.unions . map argNms . unSeqs) args
  where
    argNms (ExprSeq1_L0Bind nm   e) = argNms' ExprSeq1_L0Bind ExprSeq1_L0Val nm e
    argNms (ExprSeq1_L1Bind nm e)   = argNms' ExprSeq1_L1Bind ExprSeq1_L1Val nm e
    argNms (ExprSeq1_L2Bind nm e)   = argNms' ExprSeq1_L2Bind ExprSeq1_L2Val nm e
    argNms _                        = Map.empty

    argNms' eb ev nm e = case (argElem e) of
                        (b, es')  -> Map.singleton nm $ ( if b then Just $ ValBind_Val (Expr_Seq $ zipWith (\x e' -> eb (mkHNm $ show nm ++ "_" ++ show x) e') [0..] es') Nothing 0 (Expr_Force $ Expr_Var nm) else Nothing
                                                        , zipWith (\x _ -> ev (Expr_Var $ if b then mkHNm (show nm ++ "_" ++ show x) else nm)) [0..] es')

    argElem (Expr_Lazy (Expr_Seq es))
      | all (ExprAnn_Strictness Strictness_Strict `elem`) (map annsSeq1 es) = (True, map (unStrict . exprSeq1ToExpr) es)
    argElem (Expr_Lazy e)
      | ExprAnn_Strictness Strictness_Strict `elem` anns e                  = let (_, x) = argElem e in (True, x)
    argElem (Expr_Ann (ExprAnn_Strictness Strictness_Strict) e)             = let (_, x) = argElem e in (True, x)
    argElem e = (False, [e])

anns :: Ty -> [ExprAnn]
anns (Expr_Lazy e)  = anns e
anns (Expr_Ann a e) = a : anns e
anns _              = []

annsSeq1 :: ExprSeq1 -> [ExprAnn]
annsSeq1 (ExprSeq1_L0Val e  )    = anns e
annsSeq1 (ExprSeq1_L0LblVal _ e) = anns e
annsSeq1 (ExprSeq1_L0TagVal _ e) = anns e
annsSeq1 (ExprSeq1_L0Bind _   e) = anns e
annsSeq1 (ExprSeq1_L1Val e)      = anns e
annsSeq1 (ExprSeq1_L1Bind _ e)   = anns e
annsSeq1 (ExprSeq1_L2Val e)      = anns e
annsSeq1 (ExprSeq1_L2Bind _ e)   = anns e

unStrict :: Expr -> Expr
unStrict (Expr_Seq es)                                       = Expr_Seq $ map (argMap unStrict) es
unStrict (Expr_Lazy (Expr_Seq es))
  | all (ExprAnn_Strictness Strictness_Strict `elem`) (map annsSeq1 es) = Expr_Seq $ map (argMap unStrict) es
unStrict (Expr_Lazy e)
  | ExprAnn_Strictness Strictness_Strict `elem` anns e                  = unStrict e
unStrict (Expr_Ann (ExprAnn_Strictness Strictness_Strict) e)            = unStrict e
unStrict e                                                   = e

argMap :: (Expr -> Expr) -> ExprSeq1 -> ExprSeq1
argMap f (ExprSeq1_L0Val e  )     = ExprSeq1_L0Val (f e)
argMap f (ExprSeq1_L0LblVal nm e) = ExprSeq1_L0LblVal nm (f e)
argMap f (ExprSeq1_L0TagVal t e)  = ExprSeq1_L0TagVal t (f e)
argMap f (ExprSeq1_L0Bind nm   e) = ExprSeq1_L0Bind nm (f e)
argMap f (ExprSeq1_L1Val e)       = ExprSeq1_L1Val (f e)
argMap f (ExprSeq1_L1Bind nm e)   = ExprSeq1_L1Bind nm (f e)
argMap f (ExprSeq1_L2Val e)       = ExprSeq1_L2Val (f e)
argMap f (ExprSeq1_L2Bind nm e)   = ExprSeq1_L2Bind nm (f e)

updatedWrapperApp :: HsName -> [Expr] -> Map.Map HsName (Maybe ValBind, [ExprSeq1]) -> Expr
updatedWrapperApp nm args pmEnv =
  (if null binds then id else Expr_Let ValBindCateg_Plain binds)
  $ foldl Expr_App (Expr_Var nm) (map (Expr_Seq . concatMap arg . unSeqs) args)
  where
    binds = concatMap (concatMap bnd . unSeqs) args

    bnd (ExprSeq1_L0Val (Expr_Delay (Expr_Force (Expr_Var nm)))  ) = bnd' nm
    bnd (ExprSeq1_L0Val (Expr_Force (Expr_Var nm))  )              = bnd' nm
    bnd (ExprSeq1_L0Val (Expr_Var nm)  )                           = bnd' nm
    bnd (ExprSeq1_L1Val (Expr_Var nm))                             = bnd' nm
    bnd (ExprSeq1_L2Val (Expr_Var nm))                             = bnd' nm

    bnd' nm = maybeToList $ fst $ fromJust $ Map.lookup nm pmEnv

    arg (ExprSeq1_L0Val (Expr_Delay (Expr_Force (Expr_Var nm)))  ) = arg' nm
    arg (ExprSeq1_L0Val (Expr_Force (Expr_Var nm))  )              = arg' nm
    arg (ExprSeq1_L0Val (Expr_Var nm)  )                           = arg' nm
    arg (ExprSeq1_L1Val (Expr_Var nm))                             = arg' nm
    arg (ExprSeq1_L2Val (Expr_Var nm))                             = arg' nm

    arg' nm = snd $ fromJust $ Map.lookup nm pmEnv
}
%%]

