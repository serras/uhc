%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Optimize TyCore based on strictness annotations
%%%
%%% Note, this transformation:
%%%  - Requires explicit Lazy/Delay/Force constructs
%%%  - Be careful when printing Seq attributes, using unsafe operation such as Debug.Trace,
%%%    these attributes can be defined circularly, forcing it unsafe can cause infinite loops
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi) hs module {%{EH}TyCore.Trf.OptimizeStrictness1of2}
%%]

%%[(8 codegen tycore tauphi) hs import({%{EH}TyCore.Trf.Common})
%%]

%%[(8 codegen tycore tauphi) hs import({%{EH}AbstractCore})
%%]
 
%%[(8 codegen tycore tauphi) hs import({%{EH}Base.HsName.Builtin},{%{EH}Opts},{%{EH}Base.Common})
%%]

%%[(8 codegen tycore tauphi) hs import(Control.Applicative)
%%]

%%[(8 codegen tycore tauphi) hs import(Data.Maybe, Data.Monoid, Data.List)
%%]

%%[(8 codegen tycore tauphi) hs import(qualified Data.Map as Map)
%%]

%%[(8 codegen tycore tauphi) hs import({%{EH}TyCore})
%%]

%%[(8 codegen tycore tauphi) hs import(UHC.Util.Utils)
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapping
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi).WRAPPER ag import({TyCore/Trf/ConstructTypeEnvironment})
WRAPPER AGItf
%%]

%%[(8 codegen tycore tauphi)
PRAGMA nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi).tcmodTrfOptimizeStrictness hs
cmodTrfOptimizeStrictness1of2 :: Module -> Module
cmodTrfOptimizeStrictness1of2 tcmod
  =  let  t = wrap_AGItf (sem_AGItf (AGItf_AGItf tcmod)) Inh_AGItf
     in   cTrf_Syn_AGItf t
%%]

%%[(8 codegen tycore tauphi)
ATTR AGItf [ | | cTrf : Module ]

SEM AGItf
  | AGItf       lhs         .   cTrf        =   @module.cTrf
%%]

%%[(8 codegen tycore tauphi)
ATTR AllCodeNT
  [
  |
  | cTrf        : SELF
  ]
ATTR AllExpr
  [ newParams   : {Map.Map HsName Expr}
  |
  |
    arrTail     : SELF
    worker      : SELF
    wrapper     : SELF
  ]
ATTR Expr
  [
  |
  |
    mbVarNm    USE {<|>} {Nothing} : {Maybe HsName}
    arrArgs     : {[Expr]}
    workerArgs  : {[Expr]}
  ]
ATTR AllExprBase
  [
    workWrapSeq : {Seq WorkWrap}
    workWrap    : {WorkWrap}
    bindType    : {BindType}
    curBindType : {BindType}
    lamArgsSeq  : {Seq [[Expr]]}
    lamArgs     : {[[Expr]]}
    workerNmSeq : {Seq HsName}
    workerNm    : {HsName}
  |
  |
    workWrap    USE {|||}       {Ignored}   : {WorkWrap}
    workWrapSeq USE {`mappend`} {mempty}    : {Seq WorkWrap}
    lamArgsSeq  USE {`mappend`} {mempty}    : {Seq [[Expr]]}
    lamArgs                                 : {[[Expr]]}
    workerSeq   USE {`mappend`} {mempty}    : {Seq ExprSeq1}
    wrapperSeq  USE {`mappend`} {mempty}    : {Seq Expr}
    workerNmSeq USE {`mappend`} {mempty}    : {Seq HsName}
  ]


SEM Module
  | Mod         loc         .   newParams   =   Map.empty


-- Worker/Wrapper
SEM ExprSeq1L
  | Cons
                lhs         .   cTrf        =   if @lhs.bindType == NoBind
                                                then @cTrf
                                                else case head @lhs.workWrapSeq of
                                                       Introduced     -> @hd.worker  : @hd.wrapper : @tl.cTrf
                                                       UpdatedWorker  -> @hd.worker  : @tl.cTrf
                                                       _              -> @hd.cTrf    : @tl.cTrf
                            .   workWrapSeq =   @hd.workWrap : @tl.workWrapSeq
                            .   lamArgsSeq  =   @hd.lamArgs : @tl.lamArgsSeq
                            .   workerSeq   =   @hd.worker : @tl.workerSeq
                hd
                            .   workWrap    =   head @lhs.workWrapSeq
                            .   lamArgs     =   head @lhs.lamArgsSeq
                            .   bindType    =   NoBind
                            .   workerNm    =   head @lhs.workerNmSeq
                tl
                            .   lamArgsSeq  =   tail @lhs.lamArgsSeq
                            .   workWrapSeq =   tail @lhs.workWrapSeq
                            .   workerNmSeq =   tail @lhs.workerNmSeq

SEM ExprSeq1
  | L0Val
                lhs         .   worker      =   ExprSeq1_L0Val (workerBody @l0.workerArgs @l0.worker)
                lhs         .   wrapper     =   if @lhs.curBindType == BodyBind
                                                then ExprSeq1_L0Val (newWrapperBody @lhs.workerNm @lhs.lamArgs)
                                                else @cTrf
                l0          .   newParams   =   strictParams @l0.workerArgs `Map.union` @lhs.newParams
  | L0Bind
                lhs         .   worker      =   ExprSeq1_L0Bind @workerNm (workerType @l1.arrArgs @l1.arrTail)
  | L1Bind
                lhs         .   worker      =   ExprSeq1_L1Bind @workerNm (workerType @l2.arrArgs @l2.arrTail)
  | L2Bind
                lhs         .   worker      =   ExprSeq1_L2Bind @workerNm (workerType @l3.arrArgs @l3.arrTail)
  | L0Bind L1Bind L2Bind
                lhs         .   workerNmSeq =   [@workerNm]
                loc         .   workWrap    =   case (@isWorker, @isWrapper, @hasWorker) of
                                                  (False, False, True) -> Introduced
                                                  (True,  False, True) -> UpdatedWorker
                                                  (_,     _,     _)    -> Ignored
                            .   workerNm    =   bool (mkHNm (show @nm ++ "_worker")) @nm @isWorker
                            .   isWorker    =   "_worker" `isSuffixOf` show @nm
                            .   isWrapper   =   hsnFromString (show @nm ++ "_worker") `Map.member` @lhs.tyEnv
                            .   hasWorker   =   hasWorker (concat @lhs.lamArgs)


SEM ValBind
  | Val
                lhs         .   cTrf        =   @cTrf
                bind        .   bindType    =   NameTypeBind
                            .   curBindType =   NameTypeBind
                            .   lamArgsSeq  =   @lamArgsSeq
                            .   workWrapSeq =   @bind.workWrapSeq
                            --  Dummy data
                            .   lamArgs     =   []

                l0          .   bindType    =   BodyBind
                            .   curBindType =   BodyBind
                            .   lamArgsSeq  =   @lamArgsSeq
                            .   workWrapSeq =   @bind.workWrapSeq
                            .   workerNmSeq =   @bind.workerNmSeq

                bindMeta    .   bindType    =   NoBind
                            .   curBindType =   NoBind
                loc         .   lamArgsSeq  =   @l0.lamArgsSeq ++ repeat [] -- example: let [x, y] = dup [3]

                            -- Initialize attributes, to prevent warnings
                bind        .   workWrap    =   @err "bind.workWrap"
                            .   workerNmSeq =   @err "bind.workerNmSeq"
                            .   workerNm    =   @err "bind.workerNm"
                l0          .   workerNm    =   @err "l0.workerNm"
                bindMeta    .   workerNm    =   @err "bindMeta.workerNm"
                loc         .   err         =   \s -> panic $ "TyCore.Trf.OptimizeStrictness1of2: ValBind." ++ s ++ " not initialized"

SEM Expr
  | Let
                lhs         .   lamArgs     =   [] : @body.lamArgs
  | Lam
                lhs         .   lamArgs     =   list (\xs xss -> (@arg.cTrf : xs) : xss) [[@arg.cTrf]] @res.lamArgs
  | * - Lam Let
                lhs         .   lamArgs     =   []


SEM Expr
  | Let
                lhs         .   worker      =   Expr_Let @categ @vbinds.cTrf (workerBody @body.workerArgs @body.worker)
  | Lam
                lhs         .   workerArgs  =   @arg.copy : @res.workerArgs
                            .   worker      =   @res.worker
  | Arrow
                lhs         .   arrArgs     =   @arg.copy : @res.arrArgs
                            .   arrTail     =   @res.arrTail
  | * - Lam Arrow
                lhs         .   workerArgs  =   []
                            .   arrArgs     =   []
  | Force
                lhs         .   worker      =   maybe @worker (\nm -> fromMaybe @worker (Map.lookup nm @lhs.newParams)) @expr.mbVarNm
  | Var
                lhs         .   mbVarNm     =   Just @nm
                            .   worker      =   fromMaybe @worker (Expr_Delay `fmap` Map.lookup @nm @lhs.newParams)


{
strictParams :: [Expr] -> Map.Map HsName Expr
strictParams args = Map.unions $ map (Map.unions . map argNms . unSeqs) args
  where
    argNms (ExprSeq1_L0Bind nm   e) = argNms' ExprSeq1_L0Val nm e
    argNms (ExprSeq1_L1Bind nm e)   = argNms' ExprSeq1_L1Val nm e
    argNms (ExprSeq1_L2Bind nm e)   = argNms' ExprSeq1_L2Val nm e
    argNms _                        = Map.empty

    argNms' ev nm e = case (argElem e) of
                        (b, [e']) -> if b then Map.singleton nm $ Expr_Seq [ev (Expr_Var nm)]
                                          else Map.empty
                        (b, es')  -> if b then Map.singleton nm $ Expr_Seq $ zipWith (\x _ -> ev (Expr_Var $ mkHNm (show nm ++ "_" ++ show x))) [0..] es'
                                          else Map.empty

    argElem (Expr_Lazy (Expr_Seq es))
      | all (ExprAnn_Strictness Strictness_Strict `elem`) (map annsSeq1 es) = (True, map (unStrict . exprSeq1ToExpr) es)
    argElem (Expr_Lazy e)
      | ExprAnn_Strictness Strictness_Strict `elem` anns e                  = let (_, x) = argElem e in (True, x)
    argElem (Expr_Ann (ExprAnn_Strictness Strictness_Strict) e)             = let (_, x) = argElem e in (True, x)
    argElem e = (False, [e])


hasWorker :: [Expr] -> Bool
hasWorker es = any hasStrict $ concatMap seqToList es
  where
    hasStrict (Expr_Lazy (Expr_Seq es)) = all (ExprAnn_Strictness Strictness_Strict `elem`) (map annsSeq1 es)
    hasStrict (Expr_Lazy e)             = ExprAnn_Strictness Strictness_Strict `elem` anns e
    hasStrict _                         = False

anns :: Ty -> [ExprAnn]
anns (Expr_Lazy e)  = anns e
anns (Expr_Ann a e) = a : anns e
anns _              = []

annsSeq1 :: ExprSeq1 -> [ExprAnn]
annsSeq1 (ExprSeq1_L0Val e  )    = anns e
annsSeq1 (ExprSeq1_L0LblVal _ e) = anns e
annsSeq1 (ExprSeq1_L0TagVal _ e) = anns e
annsSeq1 (ExprSeq1_L0Bind _   e) = anns e
annsSeq1 (ExprSeq1_L1Val e)      = anns e
annsSeq1 (ExprSeq1_L1Bind _ e)   = anns e
annsSeq1 (ExprSeq1_L2Val e)      = anns e
annsSeq1 (ExprSeq1_L2Bind _ e)   = anns e

unStrict :: Expr -> Expr
unStrict (Expr_Seq es)                                       = Expr_Seq $ map (argMap unStrict) es
unStrict (Expr_Lazy (Expr_Seq es))
  | all (ExprAnn_Strictness Strictness_Strict `elem`) (map annsSeq1 es) = Expr_Seq $ map (argMap unStrict) es
unStrict (Expr_Lazy e)
  | ExprAnn_Strictness Strictness_Strict `elem` anns e                  = unStrict e
unStrict (Expr_Ann (ExprAnn_Strictness Strictness_Strict) e)            = unStrict e
unStrict e                                                   = e

argMap :: (Expr -> Expr) -> ExprSeq1 -> ExprSeq1
argMap f (ExprSeq1_L0Val e  )     = ExprSeq1_L0Val (f e)  
argMap f (ExprSeq1_L0LblVal nm e) = ExprSeq1_L0LblVal nm (f e)
argMap f (ExprSeq1_L0TagVal t e)  = ExprSeq1_L0TagVal t (f e)
argMap f (ExprSeq1_L0Bind nm   e) = ExprSeq1_L0Bind nm (f e)
argMap f (ExprSeq1_L1Val e)       = ExprSeq1_L1Val (f e)
argMap f (ExprSeq1_L1Bind nm e)   = ExprSeq1_L1Bind nm (f e)
argMap f (ExprSeq1_L2Val e)       = ExprSeq1_L2Val (f e)
argMap f (ExprSeq1_L2Bind nm e)   = ExprSeq1_L2Bind nm (f e)


workerType :: [Expr] -> Expr -> Expr
workerType args res = foldr Expr_Arrow res (map (Expr_Seq . concatMap (concatSeq . argMap unStrict) . unSeqs) args)
  where
    concatSeq :: ExprSeq1 -> [ExprSeq1]
    concatSeq (ExprSeq1_L0Val (Expr_Seq es)  ) = es
    concatSeq (ExprSeq1_L1Val (Expr_Seq es))   = es
    concatSeq (ExprSeq1_L2Val (Expr_Seq es))   = es
    concatSeq e                                = [e]

workerBody :: [Expr] -> Expr -> Expr
workerBody args body = foldr Expr_Lam body newArgs
  where
    newArgs = map (Expr_Seq . concatMap newArg . unSeqs) args
    newArg (ExprSeq1_L0Bind nm   e) = case (argElem e) of
                                        [e'] -> [ExprSeq1_L0Bind nm e']
                                        es'  -> zipWith (\x e' -> ExprSeq1_L0Bind (mkHNm (show nm ++ "_" ++ show x)) e') [0..] es'
    newArg (ExprSeq1_L1Bind nm e)   = [ExprSeq1_L1Bind nm e]
    newArg (ExprSeq1_L2Bind nm e)   = [ExprSeq1_L2Bind nm e]
    newArg e                        = [e]

    argElem (Expr_Lazy (Expr_Seq es))
      | all (ExprAnn_Strictness Strictness_Strict `elem`) (map annsSeq1 es) = map (unStrict . exprSeq1ToExpr) es -- [Expr_Seq (map (argMap unStrict) es)]
    argElem (Expr_Lazy e)
      | ExprAnn_Strictness Strictness_Strict `elem` anns e                  = argElem e
    argElem (Expr_Ann (ExprAnn_Strictness Strictness_Strict) e)             = argElem e
    argElem e = [e]

newWrapperType :: [Expr] -> Expr -> Expr
newWrapperType args res = foldr Expr_Arrow res $ map rmStrict args

newWrapperBody :: HsName -> [[Expr]] -> Expr
newWrapperBody nm argss = foldr Expr_Lam body args
  where
    body :: Expr
    body = foldl Expr_App (Expr_Var nm) (map (Expr_Seq . map argSeq . unSeqs) args)

    args :: [Expr]
    args = concat argss

    argSeq :: ExprSeq1 -> ExprSeq1
    argSeq (ExprSeq1_L0Bind nm   _) = ExprSeq1_L0Val (Expr_Delay $ Expr_Force $ Expr_Var nm)
    argSeq (ExprSeq1_L1Bind nm _)   = ExprSeq1_L1Val (Expr_Delay $ Expr_Force $ Expr_Var nm)
    argSeq (ExprSeq1_L2Bind nm _)   = ExprSeq1_L2Val (Expr_Delay $ Expr_Force $ Expr_Var nm)
    argSeq e                        = e


rmStrict :: Ty -> Ty
rmStrict = rmAnn $ ExprAnn_Strictness Strictness_Strict

rmAnn :: ExprAnn -> Expr -> Expr
rmAnn ann (Expr_Seq ss) = Expr_Seq (map (argMap $ rmAnn ann) ss)
rmAnn ann (Expr_Lazy e) = Expr_Lazy (rmAnn ann e)
rmAnn ann (Expr_Ann a e)
  | ann == a  = rmAnn ann e
  | otherwise = Expr_Ann a (rmAnn ann e)
rmAnn _   e             = e
}
%%]

