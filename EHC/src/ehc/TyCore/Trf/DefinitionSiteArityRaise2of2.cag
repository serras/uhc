%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Definition-site arity raising in TyCore
%%%
%%% To keep sharing when doing partial applications, this will only raise nested lambdas.
%%%
%%% For example:
%%% > \[a] -> \[b] -> let g = f a b
%%% >                 in \[c] -> [d] -> g c
%%%
%%% Becomes:
%%% > \[a, b] -> let g = f a b
%%% >            in \[c, d] -> g c
%%%
%%% Note:
%%%  - Be careful when printing Seq attributes, using unsafe operation such as Debug.Trace,
%%%    these attributes can be defined circularly, forcing it unsafe can cause infinite loops
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi) hs module {%{EH}TyCore.Trf.DefinitionSiteArityRaise2of2}
%%]

%%[(8 codegen tycore tauphi) hs import({%{EH}TyCore.Trf.Common})
%%]

%%[(8 codegen tycore tauphi) hs import({%{EH}AbstractCore})
%%]
 
%%[(8 codegen tycore tauphi) hs import({%{EH}Base.HsName.Builtin},{%{EH}Opts},{%{EH}Base.Common})
%%]

%%[(8 codegen tycore tauphi) hs import(Control.Applicative)
%%]

%%[(8 codegen tycore tauphi) hs import(Data.Maybe, Data.Monoid, Data.List)
%%]

%%[(8 codegen tycore tauphi) hs import(qualified Data.Map as Map)
%%]

%%[(8 codegen tycore tauphi) hs import({%{EH}TyCore})
%%]

%%[(8 codegen tycore tauphi) hs import(UHC.Util.Utils)
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapping
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi).WRAPPER ag import({TyCore/Trf/ConstructTypeEnvironment})
WRAPPER AGItf
%%]

%%[(8 codegen tycore tauphi)
PRAGMA nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen tycore tauphi).tcmodTrfDefinitionSiteArityRaise hs
cmodTrfDefinitionSiteArityRaise2of2 :: Module -> Module
cmodTrfDefinitionSiteArityRaise2of2 tcmod
  = let  t = wrap_AGItf (sem_AGItf (AGItf_AGItf tcmod)) Inh_AGItf
    in   cTrf_Syn_AGItf t
%%]

%%[(8 codegen tycore tauphi)
ATTR AGItf [ | | cTrf : Module ]

SEM AGItf
  | AGItf       lhs         .   cTrf        =   @module.cTrf
%%]

%%[(8 codegen tycore tauphi)
ATTR AllCodeNT
  [
  |
  | cTrf    : SELF
    wrapper : SELF
  ]
ATTR Expr
  [
  |
  |
    mbVarNm    USE {<|>} {Nothing} : {Maybe HsName}
    appArgs    USE {++}  {[]}      : {[Expr]}
  ]
ATTR AllExprBase
  [
    workWrapSeq : {Seq WorkWrap}
    workWrap    : {WorkWrap}
    bindType    : {BindType}
    lamArgsSeq  : {Seq [[Expr]]}
    lamArgs     : {[[Expr]]}
    workerNmSeq : {Seq HsName}
    workerNm    : {HsName}
  |
  |
    workWrap    USE {|||}       {Ignored}   : {WorkWrap}
    workWrapSeq USE {`mappend`} {mempty}    : {Seq WorkWrap}
    lamArgsSeq  USE {`mappend`} {mempty}    : {Seq [[Expr]]}
    lamArgs                                 : {[[Expr]]}
    wrapperSeq  USE {`mappend`} {mempty}    : {Seq Expr}
    workerNmSeq USE {`mappend`} {mempty}    : {Seq HsName}
  ]


-- Worker/Wrapper
SEM ExprSeq1L
  | Cons
                lhs         .   cTrf        =   if @lhs.bindType == NoBind
                                                then @cTrf
                                                else case head @lhs.workWrapSeq of
                                                       UpdatedWrapper -> @hd.wrapper : @tl.cTrf
                                                       _              -> @hd.cTrf    : @tl.cTrf
                            .   workWrapSeq =   @hd.workWrap : @tl.workWrapSeq
                hd
                            .   workWrap    =   head @lhs.workWrapSeq
                            .   workerNm    =   head @lhs.workerNmSeq
                            .   bindType    =   NoBind
                tl
                            .   workWrapSeq =   tail @lhs.workWrapSeq
                            .   workerNmSeq =   tail @lhs.workerNmSeq

SEM ExprSeq1
  | L0Bind L1Bind L2Bind
                lhs         .   workerNmSeq =   [@workerNm]
                loc         .   workWrap    =   case (@isWorker, @isWrapper) of
                                                  (False, True) -> UpdatedWrapper
                                                  (_,     _)    -> Ignored
                            .   workerNm    =   hsnFromString (show @nm ++ "_worker")
                            .   isWorker    =   "_worker" `isSuffixOf` show @nm
                            .   isWrapper   =   hsnFromString (show @nm ++ "_worker") `Map.member` @lhs.tyEnv
                            .   hasWorker   =   any (\x -> length x > 1) @lhs.lamArgs


SEM ValBind
  | Val
                bind        .   bindType    =   NameTypeBind
                            .   lamArgsSeq  =   @lamArgsSeq
                            .   workWrapSeq =   @bind.workWrapSeq
                            --  Dummy data
                            .   lamArgs     =   []

                l0          .   bindType    =   BodyBind
                            .   lamArgsSeq  =   @lamArgsSeq
                            .   workWrapSeq =   @bind.workWrapSeq
                            .   workerNmSeq =   @bind.workerNmSeq

                bindMeta    .   bindType    =   NoBind
                loc         .   lamArgsSeq  =   @l0.lamArgsSeq ++ repeat [] -- example: let [x, y] = dup [3]

                            -- Initialize attributes, to prevent warnings
                bind        .   workerNmSeq =   @err "bind.workerNmSeq"
                            .   workerNm    =   @err "bind.workerNm"
                l0          .   workerNm    =   @err "l0.workerNm"
                bindMeta    .   workerNm    =   @err "bindMeta.workerNm"
                loc         .   err         =   \s -> panic $ "TyCore.Trf.DefinitionSiteArityRaise2of2: ValBind." ++ s ++ " not initialized"

SEM Expr
  | Let
                lhs         .   lamArgs     =   [] : @body.lamArgs
  | Lam
                lhs         .   lamArgs     =   list (\xs xss -> (@arg.cTrf : xs) : xss) [[@arg.cTrf]] @res.lamArgs
  | * - Lam Let
                lhs         .   lamArgs     =   []

SEM Expr
  | App
                lhs         .   wrapper     =   if @func.mbVarNm == Just @lhs.workerNm
                                                then updatedWrapperApp @lhs.workerNm @appArgs @wt
                                                else @wrapper
                loc         .   wt          =   fromMaybe (tyErr "DefinitionSiteArityRaise2of2: App.workerType lookup")
                                                (@lhs.workerNm `Map.lookup` @lhs.tyEnv)
                            .   appArgs     =   @func.appArgs ++ [@arg.copy]
  | Var
                lhs         .   mbVarNm     =   Just @nm

{
updatedWrapperApp :: HsName -> [Expr] -> Ty -> Expr
updatedWrapperApp nm args wt = foldl Expr_App (Expr_Var nm) (map Expr_Seq $ argss (init $ nrArgs wt) (concatMap unSeqs args))
  where
    argss :: [Int] -> [ExprSeq1] -> [[ExprSeq1]]
    argss _      []   = []
    argss []     args = [args]
    argss (x:xs) args = let (args1, args2) = splitAt x args
                        in args1 : argss xs args2


    nrArgs :: Ty -> [Int]
    nrArgs (Expr_Seq es)    = [length es]
    nrArgs (Expr_Arrow l r) = nrArgs l ++ nrArgs r
    nrArgs _                = [1]
}
%%]

