%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Translate Cmm to JavaScript
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm javascript) hs module {%{EH}Cmm.ToJavaScript}
%%]

%%[(8 codegen cmm javascript) hs import({%{EH}Base.HsName.Builtin},{%{EH}Cmm},{%{EH}Base.Common} hiding (Range),{%{EH}Opts})
%%]

%%[(8 codegen cmm javascript) hs import({%{EH}Error})
%%]

%%[(8 codegen cmm javascript) hs import(qualified {%{EH}JavaScript} as JS)
%%]

%%[(8 codegen cmm javascript) hs import({%{EH}CodeGen.ValAccess} as VA, {%{EH}CodeGen.CVar})
%%]
%%[(8 codegen cmm javascript) hs import({%{EH}Gam.DataGam})
%%]

%%[(8 codegen cmm javascript) hs import(Data.Maybe,Data.Char, UHC.Util.Utils, qualified Data.Map as Map, qualified Data.Set as Set, Data.List as L, UHC.Util.FastSeq as Seq)
%%]
%%[(8 codegen cmm javascript) hs import(qualified Data.Bits as B (Bits), Data.Bits as B hiding (Bits))
%%]

%%[(8 codegen cmm javascript) ag import({Cmm/AbsSyn})
%%]

%%[(50 codegen cmm javascript) hs import({%{EH}CodeGen.ImportUsedModules})
%%]

%%[(8 codegen cmm javascript).cmmMod2JavaScript hs export(cmmMod2JavaScript)
cmmMod2JavaScript
  :: EHCOpts
%%[[50
     -> ImportUsedModules
%%]]
     -> DataGam
     -> Module -> (JS.JavaScriptModule, [Err])
cmmMod2JavaScript opts importUsedModules dataGam m
  = let t = wrap_AGItf (sem_AGItf (AGItf_AGItf m))
                       (Inh_AGItf
                         { opts_Inh_AGItf 				= opts
                         , dataGam_Inh_AGItf			= dataGam
%%[[50
                         , importUsedModules_Inh_AGItf	= importUsedModules
%%]]
                         }
                       )
    in  (jsMod_Syn_AGItf t, [])
%%]

%%[(8 codegen cmm javascript)
WRAPPER AGItf
%%]
PRAGMA nocycle

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% General info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options, other environmental info

%%[(8 codegen cmm javascript)
ATTR
  AGItf AllNT
    [ opts: EHCOpts
      dataGam: DataGam
    | | ]
%%]

%%[(50 codegen cmm javascript)
ATTR
  AGItf Module
    [ importUsedModules: ImportUsedModules
    | | ]
%%]

Prefixing of global names ?? Or to be done outside

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm javascript) hs
type JsTopStats = Seq.Seq JS.Stat
type JsBodyStats = Seq.Seq JS.Stat

infixr 1 &
(&) = Seq.union
{-# INLINE (&) #-}

s = Seq.singleton
{-# INLINE s #-}

ss = Seq.fromList
{-# INLINE ss #-}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Safe name, name expansion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm javascript) hs
jref :: CVarNmModuleCfg -> {- CVarMp -> -} CVarInfo -> JS.Expr
jdefNm :: CVarNmModuleCfg -> {- CVarMp -> -} CVarInfo -> HsName

(jref, jdefNm)
  = ( \cfg cvi
      -> cvarToRef
          ( \n       -> JS.var $ mkErrNm n
          , \_       -> JS.Expr_This
          , mkLoc
          , mkLoc
          , mkGlEx
          , mkGlIn
          , \_ e _ f -> JS.Expr_ObjFld e f -- (fldNm f)
          , \_ e     -> JS.Expr_ObjFld e JS.nmTag
          , \  e o   -> JS.Expr_ArrInx e o
          , JS.intConst
          , mkTag
          , JS.hsnJavaScriptVar
          )
          cfg Map.empty cvi
    , \cfg cvi
      -> cvarToDefHsName
          ( mkErrNm . mkHNm
          , unq . mkHNm
          , mkHNm
          , mkHNm
          , mkTag
          , JS.hsnJavaScriptVar
          )
          cfg Map.empty cvi
    )
  where mkErrNm = hsnPrefix "#ERRREF#"
        mkTag   = \_ _ -> panic "JavaScript.cvarToXXX.mkTag should not be used"
        mkLoc   = \_ o -> JS.var $ unq $ fldNm o
        mkGlEx	= \_ m f -> JS.var $ q m f
        mkGlIn	= \_ m f -> JS.var $ maybe f (flip q f) m
        unq = hsnQualified
        q   = hsnSetQual
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global name info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm javascript)
ATTR AllNT [ cvarNmModCfg: CVarNmModuleCfg | | ]
%%]

%%[(8 codegen cmm javascript)
SEM Module
  | Mod         loc         .   topClassNm      =   @moduleNm
                            .   pkgNm           =   @moduleNm
%%[[8
                            .   moduleClassNm   =   @moduleNm
%%][50
                            .   moduleClassNm   =   hsnSetQual @moduleNm $ hsnQualified @moduleNm
%%]]
				loc			.	cvarNmModCfg	=	CVarNmModuleCfg @pkgNm @topClassNm @moduleClassNm
%%]

%%[(8 codegen cmm javascript)
SEM AGItf
  | AGItf       loc         .   topClassNm      =   hsnUnknown
                            .   pkgNm           =   hsnUnknown
                            .   moduleClassNm   =   hsnUnknown
                            .   cvarNmModCfg    =   emptyCVarNmModuleCfg
%%]

%%[(8 codegen cmm javascript)
SEM Decl
  | Const		       	loc         .   jsnm	=   jdefNm @lhs.cvarNmModCfg @cvar -- JS.hsnJavaScriptVar @lhs.cvarNmModCfg False @nm

SEM Expr
  | Nm NdDataTagGet NdDataFldGet NdTupFldGet
  						loc         .   jsnm	=   JS.hsnJavaScriptVar @lhs.cvarNmModCfg False @nm

SEM Stmt
  | Alloc Box UnBox
  						loc         .   jsnm	=   jdefNm @lhs.cvarNmModCfg @cvar -- JS.hsnJavaScriptVar @lhs.cvarNmModCfg False @nm

SEM Proc
  | Proc        		loc         .   jsnm	=   jdefNm @lhs.cvarNmModCfg @cvar -- JS.hsnJavaScriptVar @lhs.cvarNmModCfg False @nm

SEM Datum
  | Nm	        		loc         .   jsnm	=   JS.hsnJavaScriptVar @lhs.cvarNmModCfg False @nm

SEM RegNmInit
  | NmInit	        	loc         .   jsnm	=   jdefNm @lhs.cvarNmModCfg @cvar -- JS.hsnJavaScriptVar @lhs.cvarNmModCfg False @nm

SEM Formal
  | Formal        		loc         .   jsnm	=   jdefNm @lhs.cvarNmModCfg @cvar -- JS.hsnJavaScriptVar @lhs.cvarNmModCfg False @nm

SEM KindName
  | KindName        	loc         .   jsnm	=   JS.hsnJavaScriptVar @lhs.cvarNmModCfg False @nm

SEM FldExpr
  | Tuple				loc			.	jsnm	=	JS.hsnJavaScriptVar @lhs.cvarNmModCfg False $ fldNm @x1

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation of JavaScript
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm javascript)
ATTR AGItf Module [ | | jsMod: {JS.JavaScriptModule} ]

SEM Module
  | Mod                 lhs         .   jsMod       	=   JS.JavaScriptModule_Mod (Seq.toList $ Seq.unions [Seq.fromList @jsModInitStats, Seq.fromList @jsModTraceStats, @decls.jsTopStats, Seq.fromList @jsModStatsMain]) [] []
                        loc         .   jsModStatsMain  =   maybe [] (\m ->[ JS.Stat_Expr $ JS.evl $
%%[[99
                                                                             (\m -> JS.app m [JS.arr []]) $
%%]]
                                                                             (jref @lhs.cvarNmModCfg m)
                                                                           ])
                                                                   @mbMainEntryCVar
%%[[8
                        loc         .   jsModInitStats  =   []
%%][50
                        loc         .   jsModInitStats  =   let prefixes = nub . catMaybes . L.map hsnQualifier
                                                                mk  n = JS.Expr_If (JS.var n) (JS.var n) (JS.Expr_Obj [])
                                                                mkd n e | isJust q  = JS.assign n e
                                                                        | otherwise = JS.vardecl n (Just e)
                                                                  where q = hsnQualifier n
                                                            in  L.map (\n -> mkd n $ mk n) $ concat $ reverse $ takeWhile (not . L.null) $ iterate prefixes $ Set.toList $ iumIntrodModules @lhs.importUsedModules
%%]]
%%[[8
                        loc         .   jsModTraceStats =   if ehcOptGenTrace @lhs.opts then [JS.assign (mkHNm "traceOn") JS.Expr_True] else []
%%][100
                        loc         .   jsModTraceStats =   []
%%]]
%%]

Top level

%%[(8 codegen cmm javascript)
ATTR AllTopLevel Proc [ | | jsTopStats USE {&} {Seq.empty}: JsTopStats ]

SEM Proc
  | Proc                lhs         .   jsTopStats  =   ss [ -- JS.Stat_FunDecl $ JS.Expr_Fun (Just @jsnm) @formals.nmL (JS.Stat_Block $ Seq.toList @body.jsBodyStats)
                                                             JS.vardecl @jsnm $ Just $ JS.fun' @jsnm (length @formals.nmL) $ JS.Expr_Fun Nothing @formals.nmL (JS.Stat_Block $ Seq.toList @body.jsBodyStats)
                                                           ]

SEM TopLevel
  | Decl				lhs			.	jsTopStats	=	@decl.jsBodyStats
%%]

Body, Expr level

%%[(8 codegen cmm javascript)
ATTR AllBody Decl AllStmtTop AllRegs [ | | jsBodyStats USE {&} {Seq.empty}: JsBodyStats ]

SEM DatumL
  | Cons                lhs         .   jsBodyStats =   ( maybe Seq.empty (\n -> s $ JS.localVarDecl n @tl.mbInitExpr) @hd.mbLblNm
                                                        ) & @tl.jsBodyStats

SEM Stmt
  | Call				lhs			.	jsBodyStats	=	s $ maybeHd JS.Stat_Expr JS.assign @knames.nmL $ @callexpr.jsMkCall @actuals.jsExprL
  | Switch				lhs			.	jsBodyStats	=	s $ JS.Stat_Switch @expr.jsExpr @arms.jsAltL
  | Ret					lhs			.	jsBodyStats	=	s $ JS.ret' $ maybeHd Nothing Just @actuals.jsExprL
  | Assign				lhs			.	jsBodyStats	=	ss $ zipWith (JS.assign' . jref @lhs.cvarNmModCfg) @lval.cvarL @rhs.jsExprL
  | Alloc				lhs			.	jsBodyStats	=	s $ JS.assign @jsnm $ @tag.jsMkAlloc $ @elts.nmExprL
  | Box					lhs			.	jsBodyStats	=	s $ JS.assign @jsnm @expr.jsExpr
  | UnBox				lhs			.	jsBodyStats	=	s $ JS.assign @jsnm @expr.jsExpr

SEM Regs
  | Regs				lhs			.	jsBodyStats	=	ss [ JS.vardecl n Nothing | n <- @nmInits.nmL ]

SEM Decl
  | Const				lhs			.	jsBodyStats	=	s $ JS.vardecl @jsnm (Just @expr.jsExpr)
%%]

jsLocalVarDecl

%%[(88 codegen cmm javascript)
SEM Decl
  | Const				lhs			.	c		=	gencUpdAssign "" (@ty.c >#< @nm) @expr.c
  | ConstArray			lhs			.	c		=	gencUpdAssign "" (@ty.c >#< @nm >|< "[]") (ppCurlysCommasBlock @exprs.lc)
  | Typedef				lhs			.	c		=	vlist $ map (\n -> gencTypeDecl n @ty.c) @nms
  -- | Regs
  -- | Target
  | Comment				lhs			.	c		=	gencCmt @str

SEM Proc
  | Proc				lhs			.	c		=	gencFunDef "void" @nm @formals.lc @body.lc

SEM Body
  | Body				lhs			.	c		=	ppCurlysBlock @decls.lc

SEM Formal
  | Formal				lhs			.	c		=	gencFunDefArg @ty.c @nm

SEM Import
  | Imp	ImpAs			lhs			.	c		=	gencInclude' "h" @nm

SEM Export
  | Exp	ExpAs			lhs			.	c		=	gencEndsemic $ gencExtern $ @ty.c >#< @nm
%%]

Top level global data

%%[(88 codegen cmm javascript)
SEM Datum
  -- | Nm
  -- | Align
  -- | Ty					lhs			.	c		=	gencUpdAssign (@ty.c 

SEM Init
  | Seq					lhs			.	c		=	gencArray @exprs.lc
  | Str					lhs			.	c		=	gencStr @str
  -- | Str16
%%]

Statement

%%[(88 codegen cmm javascript)
SEM BodyDecl
  -- | StackDecl

SEM Stmt
  | If                  lhs         .   c       =   "if" >#< ppParens @condExpr.c
                                                    >-< indent 2 @thenBody.c
                                                    >-< maybe empty (\c -> "else" >-< indent 2 c) @elseMbBody.mbc
  | Switch				lhs			.	c		=	gencSwitch @expr.c @arms.lc empty
  | Assign				lhs			.	c		=	vlist $ zipWith (\l r -> gencUpdAssign "" l r) @lval.lc @rhs.lc	-- TBD: parallel update ignored, assume given order is ok
  -- | Call
  -- | Jump
  -- | Ret
  | Label				lhs			.	c		=	gencLabel @nm
  -- | Cont
  -- | Goto
  -- | Cut

SEM LValue
  | Nm					lhs			.	c		=	pp @cvi
  -- | Typed
%%]

Case branches

%%[(8 codegen cmm javascript)
ATTR AllArm [ | | jsAltL USE {++} {[]}: {[JS.Alt]} ]

SEM Arm
  | Case				lhs			.	jsAltL	=	[JS.Alt_Alt (maybeHd 0 id @ranges.jsTagL) $ Seq.toList $ @body.jsBodyStats & s JS.Stat_Break]

ATTR AllRange [ | | jsTagL USE {++} {[]}: {[Int]} ]

SEM Range
  | RangeI				lhs			.	jsTagL	=	[@int]
%%]

Callable Expression

%%[(8 codegen cmm javascript)
ATTR CallExpr [ | | jsMkCall: {[JS.Expr] -> JS.Expr} ]

SEM CallExpr
  | Expr				lhs			.	jsMkCall=	JS.call (JS.funFld @expr.jsExpr)
  | Eval				lhs			.	jsMkCall=	JS.evl . head
  | Apply				lhs			.	jsMkCall=	\(f:as) -> JS.apl f as
%%]

Callable Expression

%%[(8 codegen cmm javascript)
ATTR Tag [ | | jsMkAlloc: {[JS.NmExpr] -> JS.Expr} ]

SEM Tag
  | Con					lhs			.	jsMkAlloc	=	JS.newDataConstr @tag
  | Tup					lhs			.	jsMkAlloc	=	JS.newTup . L.map snd
  | Ind					lhs			.	jsMkAlloc	=	JS.newTup . L.map snd	-- TBD
  -- | Fun					lhs			.	jsMkAlloc	=	JS.newTup . L.map snd	-- TBD -- \as -> let as' = L.map snd as in JS.fun' (show @cvar) (length as') $ atNm (jref @lhs.cvarNmModCfg @cvar) nmFunEvNFld
  | App					lhs			.	jsMkAlloc	=	\fas -> let (f:as) = L.map snd fas in JS.app f as
  | Fun PApp			lhs			.	jsMkAlloc	=	\as -> let as' = L.map snd as in JS.app (jref @lhs.cvarNmModCfg @cvar) as'
%%]

-- \as -> fun' @cvi (length as) -> Expr -> Expr -- 

Expression

%%[(8 codegen cmm javascript)
ATTR Expr Actual Lit [ | | jsExpr: {JS.Expr} ]

SEM Expr
  | Int					lhs         .   jsExpr	=   JS.intConst @val
  | Char				lhs         .   jsExpr	=   JS.Expr_Char @val
  | Str					lhs         .   jsExpr	=   JS.Expr_Str @val
  | CVar				lhs         .   jsExpr	=   jref @lhs.cvarNmModCfg @cvar
  | Nm					lhs         .   jsExpr	=   JS.var @jsnm
  | Op					lhs			.	jsExpr	=	@op.mkExpr @exprs.jsExprL
  | NdDataTagGet		lhs			.	jsExpr	=	JS.Expr_ObjFld (JS.var @jsnm) JS.nmTag
  | NdDataFldGet		lhs			.	jsExpr	=	JS.Expr_ObjFld (JS.var @jsnm) (fldNm @fld)
  | NdTupFldGet			lhs			.	jsExpr	=	JS.Expr_ArrInx (JS.var @jsnm) (JS.intConst $ fldInt @fld)
  -- | Nd					lhs			.	jsExpr	=	JS.Expr_Obj @elts.nmExprL
  -- | Eval				lhs			.	jsExpr	=	JS.evl $ JS.var @jsnm

  -- TBD
  | * - Int Char Str Nm CVar Op NdDataTagGet NdDataFldGet NdTupFldGet Nd
  						lhs			.	jsExpr	=	JS.var hsnUnknown

SEM Lit
  | MInf				lhs			.	jsExpr	=	JS.intConst $ (negate (1 `shiftL` @sz) :: Integer)
  | PInf				lhs			.	jsExpr	=	JS.intConst $ ((1 `shiftL` @sz) - 1 :: Integer)
  | MZero				lhs			.	jsExpr	=	JS.intConst 0
  | PZero				lhs			.	jsExpr	=	JS.intConst 0
  | True				lhs			.	jsExpr	=	JS.Expr_True
  | False				lhs			.	jsExpr	=	JS.Expr_False
%%]

Initial expression from Datum

%%[(8 codegen cmm javascript)
ATTR AllDatum AllInit [ | | mbInitExpr: {Maybe JS.Expr} ]

SEM DatumL
  | Cons				lhs			.	mbInitExpr	=	@hd.mbInitExpr
  | Nil					lhs			.	mbInitExpr	= 	Nothing

SEM Datum
  | Ty					lhs			.	mbInitExpr	=	@mbInit.mbInitExpr
  | Nm					lhs			.	mbInitExpr	=	Just $ JS.var @jsnm
  | * - Ty Nm			lhs			.	mbInitExpr	=	Nothing

SEM MbInit
  | Nothing				lhs			.	mbInitExpr	=	Nothing

SEM Init
  | Seq 				lhs			.	mbInitExpr	=	maybeHd Nothing Just @exprs.jsExprL
  | * - Seq				lhs			.	mbInitExpr	=	Nothing
%%]

Possible label from Datum

%%[(8 codegen cmm javascript)
ATTR Datum  [ | | mbLblNm: {Maybe HsName} ]

SEM Datum
  | Nm					lhs			.	mbLblNm		=	Just @jsnm
  | * - Nm				lhs			.	mbLblNm		= 	Nothing
%%]

DATA Expr
  | Round			val				: Round
  | Rat				nom				: Integer
  					denom			: Integer
  					mbTy			: MbTy
  | Float			val				: Double
  					mbTy			: MbTy
  | Typed			ty				: Ty
  					expr			: Expr
  					mbAssert		: MbAssert
  | Op				op				: Op
  					exprs			: ExprL


%%[(88 codegen cmm javascript)
SEM Expr
  | Int                 lhs         .   c       =   gencInt @mbTy.mbc (>|< "L") (show @val)
  -- | Lit
  -- | Round
  -- | Rat
  -- | Float
  -- | Char
  | Nm					lhs			.	c		=	pp @nm
  -- | Typed
  | Op					lhs			.	c		=	@op.lcmk @exprs.lc
%%]

Type

%%[(88 codegen cmm javascript)
SEM Ty
  -- | Bits
  | Nm					lhs			.	c		=	pp @nm
  -- | Struct
  -- | Ptr					lhs			.	c		=	ppParens $ @ty.c >|< "*"
%%]

Operator

%%[(8 codegen cmm javascript)
ATTR AllOp [ | | mkExpr: {[JS.Expr] -> JS.Expr} ]

SEM OpCode
  -- comparisons
  | Eq					lhs			.	mkExpr	=	JS.op "=="
  
  -- TBD
  | * - Eq				lhs			.	mkExpr	=	const JS.empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% List/Maybe of ...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

List

%%[(8 codegen cmm javascript)
ATTR AllFormal AllKindName AllRegNmInit [ | | nmL USE {++} {[]}: {[HsName]} ]

SEM Formal
  | Formal				lhs			.	nmL		=	[@jsnm]

SEM KindName
  | KindName			lhs			.	nmL		=	[@jsnm]

SEM RegNmInit
  | NmInit				lhs			.	nmL		=	[@jsnm]

ATTR AllLValue [ | | cvarL USE {++} {[]}: {[CVarInfo]} ]

SEM LValue
  | Nm					lhs			.	cvarL	=	[@cvar]

ATTR ExprL ActualL [ | | jsExprL USE {++} {[]}: {[JS.Expr]} ]

SEM ExprL ActualL
  | Cons				lhs			.	jsExprL	=	@hd.jsExpr : @tl.jsExprL

ATTR AllFldExpr [ | | nmExprL USE {++} {[]}: {JS.NmExprL} ]

SEM FldExpr
  | Tuple				lhs			.	nmExprL	=	[(@jsnm, @x2.jsExpr)]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation of C: Maybe, List forms
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Maybe

%%[(88 codegen cmm javascript)
ATTR MbBody MbTy [ | | mbc: {Maybe GenC} ]

SEM MbBody MbTy
  | Just				lhs			.	mbc		=	Just @just.c
  | Nothing				lhs			.	mbc		=	Nothing
%%]

List

%%[(88 codegen cmm javascript)
ATTR
  ArmL Arm
  RangeL Range
  ExprL
  LValueL
  FormalL
  BodyDeclL Body
    [ | | lc USE {++} {[]}: {[GenC]} ]

SEM Arm
  | Case				lhs			.	lc		=	[gencSwitchcase @ranges.lc @body.lc]

SEM Range
  | Range1				lhs			.	lc		=	[@expr1.c]
  -- | Range2	-- we need evaluation here... TBD

SEM ExprL LValueL FormalL BodyDeclL
  | Cons				lhs			.	lc		=	@hd.c : @tl.lc

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation of C: Maybe, List forms
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen cmm javascript)
ATTR Tag [ | | self: SELF ]
%%]
